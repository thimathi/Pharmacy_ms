{"ast":null,"code":"/**\n * @remix-run/router v1.19.2\n *\n * Copyright (c) Remix Software Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n  return _extends.apply(this, arguments);\n} ////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Actions represent the type of change to a location value.\n */\n\n\nvar Action;\n\n(function (Action) {\n  /**\n   * A POP indicates a change to an arbitrary index in the history stack, such\n   * as a back or forward navigation. It does not describe the direction of the\n   * navigation, only that the current index changed.\n   *\n   * Note: This is the default action for newly created history objects.\n   */\n  Action[\"Pop\"] = \"POP\";\n  /**\n   * A PUSH indicates a new entry being added to the history stack, such as when\n   * a link is clicked and a new page loads. When this happens, all subsequent\n   * entries in the stack are lost.\n   */\n\n  Action[\"Push\"] = \"PUSH\";\n  /**\n   * A REPLACE indicates the entry at the current index in the history stack\n   * being replaced by a new one.\n   */\n\n  Action[\"Replace\"] = \"REPLACE\";\n})(Action || (Action = {}));\n\nconst PopStateEventType = \"popstate\";\n/**\n * Memory history stores the current location in memory. It is designed for use\n * in stateful non-browser environments like tests and React Native.\n */\n\nfunction createMemoryHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  let {\n    initialEntries = [\"/\"],\n    initialIndex,\n    v5Compat = false\n  } = options;\n  let entries; // Declare so we can access from createMemoryLocation\n\n  entries = initialEntries.map((entry, index) => createMemoryLocation(entry, typeof entry === \"string\" ? null : entry.state, index === 0 ? \"default\" : undefined));\n  let index = clampIndex(initialIndex == null ? entries.length - 1 : initialIndex);\n  let action = Action.Pop;\n  let listener = null;\n\n  function clampIndex(n) {\n    return Math.min(Math.max(n, 0), entries.length - 1);\n  }\n\n  function getCurrentLocation() {\n    return entries[index];\n  }\n\n  function createMemoryLocation(to, state, key) {\n    if (state === void 0) {\n      state = null;\n    }\n\n    let location = createLocation(entries ? getCurrentLocation().pathname : \"/\", to, state, key);\n    warning(location.pathname.charAt(0) === \"/\", \"relative pathnames are not supported in memory history: \" + JSON.stringify(to));\n    return location;\n  }\n\n  function createHref(to) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  let history = {\n    get index() {\n      return index;\n    },\n\n    get action() {\n      return action;\n    },\n\n    get location() {\n      return getCurrentLocation();\n    },\n\n    createHref,\n\n    createURL(to) {\n      return new URL(createHref(to), \"http://localhost\");\n    },\n\n    encodeLocation(to) {\n      let path = typeof to === \"string\" ? parsePath(to) : to;\n      return {\n        pathname: path.pathname || \"\",\n        search: path.search || \"\",\n        hash: path.hash || \"\"\n      };\n    },\n\n    push(to, state) {\n      action = Action.Push;\n      let nextLocation = createMemoryLocation(to, state);\n      index += 1;\n      entries.splice(index, entries.length, nextLocation);\n\n      if (v5Compat && listener) {\n        listener({\n          action,\n          location: nextLocation,\n          delta: 1\n        });\n      }\n    },\n\n    replace(to, state) {\n      action = Action.Replace;\n      let nextLocation = createMemoryLocation(to, state);\n      entries[index] = nextLocation;\n\n      if (v5Compat && listener) {\n        listener({\n          action,\n          location: nextLocation,\n          delta: 0\n        });\n      }\n    },\n\n    go(delta) {\n      action = Action.Pop;\n      let nextIndex = clampIndex(index + delta);\n      let nextLocation = entries[nextIndex];\n      index = nextIndex;\n\n      if (listener) {\n        listener({\n          action,\n          location: nextLocation,\n          delta\n        });\n      }\n    },\n\n    listen(fn) {\n      listener = fn;\n      return () => {\n        listener = null;\n      };\n    }\n\n  };\n  return history;\n}\n/**\n * Browser history stores the location in regular URLs. This is the standard for\n * most web apps, but it requires some configuration on the server to ensure you\n * serve the same app at multiple URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createbrowserhistory\n */\n\n\nfunction createBrowserHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  function createBrowserLocation(window, globalHistory) {\n    let {\n      pathname,\n      search,\n      hash\n    } = window.location;\n    return createLocation(\"\", {\n      pathname,\n      search,\n      hash\n    }, // state defaults to `null` because `window.history.state` does\n    globalHistory.state && globalHistory.state.usr || null, globalHistory.state && globalHistory.state.key || \"default\");\n  }\n\n  function createBrowserHref(window, to) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  return getUrlBasedHistory(createBrowserLocation, createBrowserHref, null, options);\n}\n/**\n * Hash history stores the location in window.location.hash. This makes it ideal\n * for situations where you don't want to send the location to the server for\n * some reason, either because you do cannot configure it or the URL space is\n * reserved for something else.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createhashhistory\n */\n\n\nfunction createHashHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  function createHashLocation(window, globalHistory) {\n    let {\n      pathname = \"/\",\n      search = \"\",\n      hash = \"\"\n    } = parsePath(window.location.hash.substr(1)); // Hash URL should always have a leading / just like window.location.pathname\n    // does, so if an app ends up at a route like /#something then we add a\n    // leading slash so all of our path-matching behaves the same as if it would\n    // in a browser router.  This is particularly important when there exists a\n    // root splat route (<Route path=\"*\">) since that matches internally against\n    // \"/*\" and we'd expect /#something to 404 in a hash router app.\n\n    if (!pathname.startsWith(\"/\") && !pathname.startsWith(\".\")) {\n      pathname = \"/\" + pathname;\n    }\n\n    return createLocation(\"\", {\n      pathname,\n      search,\n      hash\n    }, // state defaults to `null` because `window.history.state` does\n    globalHistory.state && globalHistory.state.usr || null, globalHistory.state && globalHistory.state.key || \"default\");\n  }\n\n  function createHashHref(window, to) {\n    let base = window.document.querySelector(\"base\");\n    let href = \"\";\n\n    if (base && base.getAttribute(\"href\")) {\n      let url = window.location.href;\n      let hashIndex = url.indexOf(\"#\");\n      href = hashIndex === -1 ? url : url.slice(0, hashIndex);\n    }\n\n    return href + \"#\" + (typeof to === \"string\" ? to : createPath(to));\n  }\n\n  function validateHashLocation(location, to) {\n    warning(location.pathname.charAt(0) === \"/\", \"relative pathnames are not supported in hash history.push(\" + JSON.stringify(to) + \")\");\n  }\n\n  return getUrlBasedHistory(createHashLocation, createHashHref, validateHashLocation, options);\n}\n\nfunction invariant(value, message) {\n  if (value === false || value === null || typeof value === \"undefined\") {\n    throw new Error(message);\n  }\n}\n\nfunction warning(cond, message) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging history!\n      //\n      // This error is thrown as a convenience, so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message); // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\nfunction createKey() {\n  return Math.random().toString(36).substr(2, 8);\n}\n/**\n * For browser-based histories, we combine the state and key into an object\n */\n\n\nfunction getHistoryState(location, index) {\n  return {\n    usr: location.state,\n    key: location.key,\n    idx: index\n  };\n}\n/**\n * Creates a Location object with a unique key from the given Path\n */\n\n\nfunction createLocation(current, to, state, key) {\n  if (state === void 0) {\n    state = null;\n  }\n\n  let location = _extends({\n    pathname: typeof current === \"string\" ? current : current.pathname,\n    search: \"\",\n    hash: \"\"\n  }, typeof to === \"string\" ? parsePath(to) : to, {\n    state,\n    // TODO: This could be cleaned up.  push/replace should probably just take\n    // full Locations now and avoid the need to run through this flow at all\n    // But that's a pretty big refactor to the current test suite so going to\n    // keep as is for the time being and just let any incoming keys take precedence\n    key: to && to.key || key || createKey()\n  });\n\n  return location;\n}\n/**\n * Creates a string URL path from the given pathname, search, and hash components.\n */\n\n\nfunction createPath(_ref) {\n  let {\n    pathname = \"/\",\n    search = \"\",\n    hash = \"\"\n  } = _ref;\n  if (search && search !== \"?\") pathname += search.charAt(0) === \"?\" ? search : \"?\" + search;\n  if (hash && hash !== \"#\") pathname += hash.charAt(0) === \"#\" ? hash : \"#\" + hash;\n  return pathname;\n}\n/**\n * Parses a string URL path into its separate pathname, search, and hash components.\n */\n\n\nfunction parsePath(path) {\n  let parsedPath = {};\n\n  if (path) {\n    let hashIndex = path.indexOf(\"#\");\n\n    if (hashIndex >= 0) {\n      parsedPath.hash = path.substr(hashIndex);\n      path = path.substr(0, hashIndex);\n    }\n\n    let searchIndex = path.indexOf(\"?\");\n\n    if (searchIndex >= 0) {\n      parsedPath.search = path.substr(searchIndex);\n      path = path.substr(0, searchIndex);\n    }\n\n    if (path) {\n      parsedPath.pathname = path;\n    }\n  }\n\n  return parsedPath;\n}\n\nfunction getUrlBasedHistory(getLocation, createHref, validateLocation, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  let {\n    window = document.defaultView,\n    v5Compat = false\n  } = options;\n  let globalHistory = window.history;\n  let action = Action.Pop;\n  let listener = null;\n  let index = getIndex(); // Index should only be null when we initialize. If not, it's because the\n  // user called history.pushState or history.replaceState directly, in which\n  // case we should log a warning as it will result in bugs.\n\n  if (index == null) {\n    index = 0;\n    globalHistory.replaceState(_extends({}, globalHistory.state, {\n      idx: index\n    }), \"\");\n  }\n\n  function getIndex() {\n    let state = globalHistory.state || {\n      idx: null\n    };\n    return state.idx;\n  }\n\n  function handlePop() {\n    action = Action.Pop;\n    let nextIndex = getIndex();\n    let delta = nextIndex == null ? null : nextIndex - index;\n    index = nextIndex;\n\n    if (listener) {\n      listener({\n        action,\n        location: history.location,\n        delta\n      });\n    }\n  }\n\n  function push(to, state) {\n    action = Action.Push;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n    index = getIndex() + 1;\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location); // try...catch because iOS limits us to 100 pushState calls :/\n\n    try {\n      globalHistory.pushState(historyState, \"\", url);\n    } catch (error) {\n      // If the exception is because `state` can't be serialized, let that throw\n      // outwards just like a replace call would so the dev knows the cause\n      // https://html.spec.whatwg.org/multipage/nav-history-apis.html#shared-history-push/replace-state-steps\n      // https://html.spec.whatwg.org/multipage/structured-data.html#structuredserializeinternal\n      if (error instanceof DOMException && error.name === \"DataCloneError\") {\n        throw error;\n      } // They are going to lose state here, but there is no real\n      // way to warn them about it since the page will refresh...\n\n\n      window.location.assign(url);\n    }\n\n    if (v5Compat && listener) {\n      listener({\n        action,\n        location: history.location,\n        delta: 1\n      });\n    }\n  }\n\n  function replace(to, state) {\n    action = Action.Replace;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n    index = getIndex();\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n    globalHistory.replaceState(historyState, \"\", url);\n\n    if (v5Compat && listener) {\n      listener({\n        action,\n        location: history.location,\n        delta: 0\n      });\n    }\n  }\n\n  function createURL(to) {\n    // window.location.origin is \"null\" (the literal string value) in Firefox\n    // under certain conditions, notably when serving from a local HTML file\n    // See https://bugzilla.mozilla.org/show_bug.cgi?id=878297\n    let base = window.location.origin !== \"null\" ? window.location.origin : window.location.href;\n    let href = typeof to === \"string\" ? to : createPath(to); // Treating this as a full URL will strip any trailing spaces so we need to\n    // pre-encode them since they might be part of a matching splat param from\n    // an ancestor route\n\n    href = href.replace(/ $/, \"%20\");\n    invariant(base, \"No window.location.(origin|href) available to create URL for href: \" + href);\n    return new URL(href, base);\n  }\n\n  let history = {\n    get action() {\n      return action;\n    },\n\n    get location() {\n      return getLocation(window, globalHistory);\n    },\n\n    listen(fn) {\n      if (listener) {\n        throw new Error(\"A history only accepts one active listener\");\n      }\n\n      window.addEventListener(PopStateEventType, handlePop);\n      listener = fn;\n      return () => {\n        window.removeEventListener(PopStateEventType, handlePop);\n        listener = null;\n      };\n    },\n\n    createHref(to) {\n      return createHref(window, to);\n    },\n\n    createURL,\n\n    encodeLocation(to) {\n      // Encode a Location the same way window.location would\n      let url = createURL(to);\n      return {\n        pathname: url.pathname,\n        search: url.search,\n        hash: url.hash\n      };\n    },\n\n    push,\n    replace,\n\n    go(n) {\n      return globalHistory.go(n);\n    }\n\n  };\n  return history;\n} //#endregion\n\n\nvar ResultType;\n\n(function (ResultType) {\n  ResultType[\"data\"] = \"data\";\n  ResultType[\"deferred\"] = \"deferred\";\n  ResultType[\"redirect\"] = \"redirect\";\n  ResultType[\"error\"] = \"error\";\n})(ResultType || (ResultType = {}));\n\nconst immutableRouteKeys = new Set([\"lazy\", \"caseSensitive\", \"path\", \"id\", \"index\", \"children\"]);\n\nfunction isIndexRoute(route) {\n  return route.index === true;\n} // Walk the route tree generating unique IDs where necessary, so we are working\n// solely with AgnosticDataRouteObject's within the Router\n\n\nfunction convertRoutesToDataRoutes(routes, mapRouteProperties, parentPath, manifest) {\n  if (parentPath === void 0) {\n    parentPath = [];\n  }\n\n  if (manifest === void 0) {\n    manifest = {};\n  }\n\n  return routes.map((route, index) => {\n    let treePath = [...parentPath, String(index)];\n    let id = typeof route.id === \"string\" ? route.id : treePath.join(\"-\");\n    invariant(route.index !== true || !route.children, \"Cannot specify children on an index route\");\n    invariant(!manifest[id], \"Found a route id collision on id \\\"\" + id + \"\\\".  Route \" + \"id's must be globally unique within Data Router usages\");\n\n    if (isIndexRoute(route)) {\n      let indexRoute = _extends({}, route, mapRouteProperties(route), {\n        id\n      });\n\n      manifest[id] = indexRoute;\n      return indexRoute;\n    } else {\n      let pathOrLayoutRoute = _extends({}, route, mapRouteProperties(route), {\n        id,\n        children: undefined\n      });\n\n      manifest[id] = pathOrLayoutRoute;\n\n      if (route.children) {\n        pathOrLayoutRoute.children = convertRoutesToDataRoutes(route.children, mapRouteProperties, treePath, manifest);\n      }\n\n      return pathOrLayoutRoute;\n    }\n  });\n}\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/utils/match-routes\n */\n\n\nfunction matchRoutes(routes, locationArg, basename) {\n  if (basename === void 0) {\n    basename = \"/\";\n  }\n\n  return matchRoutesImpl(routes, locationArg, basename, false);\n}\n\nfunction matchRoutesImpl(routes, locationArg, basename, allowPartial) {\n  let location = typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n  let pathname = stripBasename(location.pathname || \"/\", basename);\n\n  if (pathname == null) {\n    return null;\n  }\n\n  let branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n  let matches = null;\n\n  for (let i = 0; matches == null && i < branches.length; ++i) {\n    // Incoming pathnames are generally encoded from either window.location\n    // or from router.navigate, but we want to match against the unencoded\n    // paths in the route definitions.  Memory router locations won't be\n    // encoded here but there also shouldn't be anything to decode so this\n    // should be a safe operation.  This avoids needing matchRoutes to be\n    // history-aware.\n    let decoded = decodePath(pathname);\n    matches = matchRouteBranch(branches[i], decoded, allowPartial);\n  }\n\n  return matches;\n}\n\nfunction convertRouteMatchToUiMatch(match, loaderData) {\n  let {\n    route,\n    pathname,\n    params\n  } = match;\n  return {\n    id: route.id,\n    pathname,\n    params,\n    data: loaderData[route.id],\n    handle: route.handle\n  };\n}\n\nfunction flattenRoutes(routes, branches, parentsMeta, parentPath) {\n  if (branches === void 0) {\n    branches = [];\n  }\n\n  if (parentsMeta === void 0) {\n    parentsMeta = [];\n  }\n\n  if (parentPath === void 0) {\n    parentPath = \"\";\n  }\n\n  let flattenRoute = (route, index, relativePath) => {\n    let meta = {\n      relativePath: relativePath === undefined ? route.path || \"\" : relativePath,\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index,\n      route\n    };\n\n    if (meta.relativePath.startsWith(\"/\")) {\n      invariant(meta.relativePath.startsWith(parentPath), \"Absolute route path \\\"\" + meta.relativePath + \"\\\" nested under path \" + (\"\\\"\" + parentPath + \"\\\" is not valid. An absolute child route path \") + \"must start with the combined path of all its parent routes.\");\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n\n    let path = joinPaths([parentPath, meta.relativePath]);\n    let routesMeta = parentsMeta.concat(meta); // Add the children before adding this route to the array, so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n\n    if (route.children && route.children.length > 0) {\n      invariant( // Our types know better, but runtime JS may not!\n      // @ts-expect-error\n      route.index !== true, \"Index routes must not have child routes. Please remove \" + (\"all child routes from route path \\\"\" + path + \"\\\".\"));\n      flattenRoutes(route.children, branches, routesMeta, path);\n    } // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n\n\n    if (route.path == null && !route.index) {\n      return;\n    }\n\n    branches.push({\n      path,\n      score: computeScore(path, route.index),\n      routesMeta\n    });\n  };\n\n  routes.forEach((route, index) => {\n    var _route$path; // coarse-grain check for optional params\n\n\n    if (route.path === \"\" || !((_route$path = route.path) != null && _route$path.includes(\"?\"))) {\n      flattenRoute(route, index);\n    } else {\n      for (let exploded of explodeOptionalSegments(route.path)) {\n        flattenRoute(route, index, exploded);\n      }\n    }\n  });\n  return branches;\n}\n/**\n * Computes all combinations of optional path segments for a given path,\n * excluding combinations that are ambiguous and of lower priority.\n *\n * For example, `/one/:two?/three/:four?/:five?` explodes to:\n * - `/one/three`\n * - `/one/:two/three`\n * - `/one/three/:four`\n * - `/one/three/:five`\n * - `/one/:two/three/:four`\n * - `/one/:two/three/:five`\n * - `/one/three/:four/:five`\n * - `/one/:two/three/:four/:five`\n */\n\n\nfunction explodeOptionalSegments(path) {\n  let segments = path.split(\"/\");\n  if (segments.length === 0) return [];\n  let [first, ...rest] = segments; // Optional path segments are denoted by a trailing `?`\n\n  let isOptional = first.endsWith(\"?\"); // Compute the corresponding required segment: `foo?` -> `foo`\n\n  let required = first.replace(/\\?$/, \"\");\n\n  if (rest.length === 0) {\n    // Intepret empty string as omitting an optional segment\n    // `[\"one\", \"\", \"three\"]` corresponds to omitting `:two` from `/one/:two?/three` -> `/one/three`\n    return isOptional ? [required, \"\"] : [required];\n  }\n\n  let restExploded = explodeOptionalSegments(rest.join(\"/\"));\n  let result = []; // All child paths with the prefix.  Do this for all children before the\n  // optional version for all children, so we get consistent ordering where the\n  // parent optional aspect is preferred as required.  Otherwise, we can get\n  // child sections interspersed where deeper optional segments are higher than\n  // parent optional segments, where for example, /:two would explode _earlier_\n  // then /:one.  By always including the parent as required _for all children_\n  // first, we avoid this issue\n\n  result.push(...restExploded.map(subpath => subpath === \"\" ? required : [required, subpath].join(\"/\"))); // Then, if this is an optional value, add all child versions without\n\n  if (isOptional) {\n    result.push(...restExploded);\n  } // for absolute paths, ensure `/` instead of empty segment\n\n\n  return result.map(exploded => path.startsWith(\"/\") && exploded === \"\" ? \"/\" : exploded);\n}\n\nfunction rankRouteBranches(branches) {\n  branches.sort((a, b) => a.score !== b.score ? b.score - a.score // Higher score first\n  : compareIndexes(a.routesMeta.map(meta => meta.childrenIndex), b.routesMeta.map(meta => meta.childrenIndex)));\n}\n\nconst paramRe = /^:[\\w-]+$/;\nconst dynamicSegmentValue = 3;\nconst indexRouteValue = 2;\nconst emptySegmentValue = 1;\nconst staticSegmentValue = 10;\nconst splatPenalty = -2;\n\nconst isSplat = s => s === \"*\";\n\nfunction computeScore(path, index) {\n  let segments = path.split(\"/\");\n  let initialScore = segments.length;\n\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n\n  return segments.filter(s => !isSplat(s)).reduce((score, segment) => score + (paramRe.test(segment) ? dynamicSegmentValue : segment === \"\" ? emptySegmentValue : staticSegmentValue), initialScore);\n}\n\nfunction compareIndexes(a, b) {\n  let siblings = a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);\n  return siblings ? // If two routes are siblings, we should try to match the earlier sibling\n  // first. This allows people to have fine-grained control over the matching\n  // behavior by simply putting routes with identical paths in the order they\n  // want them tried.\n  a[a.length - 1] - b[b.length - 1] : // Otherwise, it doesn't really make sense to rank non-siblings by index,\n  // so they sort equally.\n  0;\n}\n\nfunction matchRouteBranch(branch, pathname, allowPartial) {\n  if (allowPartial === void 0) {\n    allowPartial = false;\n  }\n\n  let {\n    routesMeta\n  } = branch;\n  let matchedParams = {};\n  let matchedPathname = \"/\";\n  let matches = [];\n\n  for (let i = 0; i < routesMeta.length; ++i) {\n    let meta = routesMeta[i];\n    let end = i === routesMeta.length - 1;\n    let remainingPathname = matchedPathname === \"/\" ? pathname : pathname.slice(matchedPathname.length) || \"/\";\n    let match = matchPath({\n      path: meta.relativePath,\n      caseSensitive: meta.caseSensitive,\n      end\n    }, remainingPathname);\n    let route = meta.route;\n\n    if (!match && end && allowPartial && !routesMeta[routesMeta.length - 1].route.index) {\n      match = matchPath({\n        path: meta.relativePath,\n        caseSensitive: meta.caseSensitive,\n        end: false\n      }, remainingPathname);\n    }\n\n    if (!match) {\n      return null;\n    }\n\n    Object.assign(matchedParams, match.params);\n    matches.push({\n      // TODO: Can this as be avoided?\n      params: matchedParams,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: normalizePathname(joinPaths([matchedPathname, match.pathnameBase])),\n      route\n    });\n\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n  }\n\n  return matches;\n}\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/utils/generate-path\n */\n\n\nfunction generatePath(originalPath, params) {\n  if (params === void 0) {\n    params = {};\n  }\n\n  let path = originalPath;\n\n  if (path.endsWith(\"*\") && path !== \"*\" && !path.endsWith(\"/*\")) {\n    warning(false, \"Route path \\\"\" + path + \"\\\" will be treated as if it were \" + (\"\\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\" because the `*` character must \") + \"always follow a `/` in the pattern. To get rid of this warning, \" + (\"please change the route path to \\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\".\"));\n    path = path.replace(/\\*$/, \"/*\");\n  } // ensure `/` is added at the beginning if the path is absolute\n\n\n  const prefix = path.startsWith(\"/\") ? \"/\" : \"\";\n\n  const stringify = p => p == null ? \"\" : typeof p === \"string\" ? p : String(p);\n\n  const segments = path.split(/\\/+/).map((segment, index, array) => {\n    const isLastSegment = index === array.length - 1; // only apply the splat if it's the last segment\n\n    if (isLastSegment && segment === \"*\") {\n      const star = \"*\"; // Apply the splat\n\n      return stringify(params[star]);\n    }\n\n    const keyMatch = segment.match(/^:([\\w-]+)(\\??)$/);\n\n    if (keyMatch) {\n      const [, key, optional] = keyMatch;\n      let param = params[key];\n      invariant(optional === \"?\" || param != null, \"Missing \\\":\" + key + \"\\\" param\");\n      return stringify(param);\n    } // Remove any optional markers from optional static segments\n\n\n    return segment.replace(/\\?$/g, \"\");\n  }) // Remove empty segments\n  .filter(segment => !!segment);\n  return prefix + segments.join(\"/\");\n}\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/utils/match-path\n */\n\n\nfunction matchPath(pattern, pathname) {\n  if (typeof pattern === \"string\") {\n    pattern = {\n      path: pattern,\n      caseSensitive: false,\n      end: true\n    };\n  }\n\n  let [matcher, compiledParams] = compilePath(pattern.path, pattern.caseSensitive, pattern.end);\n  let match = pathname.match(matcher);\n  if (!match) return null;\n  let matchedPathname = match[0];\n  let pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  let captureGroups = match.slice(1);\n  let params = compiledParams.reduce((memo, _ref, index) => {\n    let {\n      paramName,\n      isOptional\n    } = _ref; // We need to compute the pathnameBase here using the raw splat value\n    // instead of using params[\"*\"] later because it will be decoded then\n\n    if (paramName === \"*\") {\n      let splatValue = captureGroups[index] || \"\";\n      pathnameBase = matchedPathname.slice(0, matchedPathname.length - splatValue.length).replace(/(.)\\/+$/, \"$1\");\n    }\n\n    const value = captureGroups[index];\n\n    if (isOptional && !value) {\n      memo[paramName] = undefined;\n    } else {\n      memo[paramName] = (value || \"\").replace(/%2F/g, \"/\");\n    }\n\n    return memo;\n  }, {});\n  return {\n    params,\n    pathname: matchedPathname,\n    pathnameBase,\n    pattern\n  };\n}\n\nfunction compilePath(path, caseSensitive, end) {\n  if (caseSensitive === void 0) {\n    caseSensitive = false;\n  }\n\n  if (end === void 0) {\n    end = true;\n  }\n\n  warning(path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"), \"Route path \\\"\" + path + \"\\\" will be treated as if it were \" + (\"\\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\" because the `*` character must \") + \"always follow a `/` in the pattern. To get rid of this warning, \" + (\"please change the route path to \\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\".\"));\n  let params = [];\n  let regexpSource = \"^\" + path.replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n  .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n  .replace(/[\\\\.*+^${}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n  .replace(/\\/:([\\w-]+)(\\?)?/g, (_, paramName, isOptional) => {\n    params.push({\n      paramName,\n      isOptional: isOptional != null\n    });\n    return isOptional ? \"/?([^\\\\/]+)?\" : \"/([^\\\\/]+)\";\n  });\n\n  if (path.endsWith(\"*\")) {\n    params.push({\n      paramName: \"*\"\n    });\n    regexpSource += path === \"*\" || path === \"/*\" ? \"(.*)$\" // Already matched the initial /, just match the rest\n    : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else if (end) {\n    // When matching to the end, ignore trailing slashes\n    regexpSource += \"\\\\/*$\";\n  } else if (path !== \"\" && path !== \"/\") {\n    // If our path is non-empty and contains anything beyond an initial slash,\n    // then we have _some_ form of path in our regex, so we should expect to\n    // match only if we find the end of this path segment.  Look for an optional\n    // non-captured trailing slash (to match a portion of the URL) or the end\n    // of the path (if we've matched to the end).  We used to do this with a\n    // word boundary but that gives false positives on routes like\n    // /user-preferences since `-` counts as a word boundary.\n    regexpSource += \"(?:(?=\\\\/|$))\";\n  } else ;\n\n  let matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n  return [matcher, params];\n}\n\nfunction decodePath(value) {\n  try {\n    return value.split(\"/\").map(v => decodeURIComponent(v).replace(/\\//g, \"%2F\")).join(\"/\");\n  } catch (error) {\n    warning(false, \"The URL path \\\"\" + value + \"\\\" could not be decoded because it is is a \" + \"malformed URL segment. This is probably due to a bad percent \" + (\"encoding (\" + error + \").\"));\n    return value;\n  }\n}\n/**\n * @private\n */\n\n\nfunction stripBasename(pathname, basename) {\n  if (basename === \"/\") return pathname;\n\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  } // We want to leave trailing slash behavior in the user's control, so if they\n  // specify a basename with a trailing slash, we should support it\n\n\n  let startIndex = basename.endsWith(\"/\") ? basename.length - 1 : basename.length;\n  let nextChar = pathname.charAt(startIndex);\n\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n\n  return pathname.slice(startIndex) || \"/\";\n}\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/utils/resolve-path\n */\n\n\nfunction resolvePath(to, fromPathname) {\n  if (fromPathname === void 0) {\n    fromPathname = \"/\";\n  }\n\n  let {\n    pathname: toPathname,\n    search = \"\",\n    hash = \"\"\n  } = typeof to === \"string\" ? parsePath(to) : to;\n  let pathname = toPathname ? toPathname.startsWith(\"/\") ? toPathname : resolvePathname(toPathname, fromPathname) : fromPathname;\n  return {\n    pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash)\n  };\n}\n\nfunction resolvePathname(relativePath, fromPathname) {\n  let segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  let relativeSegments = relativePath.split(\"/\");\n  relativeSegments.forEach(segment => {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\n\nfunction getInvalidPathError(char, field, dest, path) {\n  return \"Cannot include a '\" + char + \"' character in a manually specified \" + (\"`to.\" + field + \"` field [\" + JSON.stringify(path) + \"].  Please separate it out to the \") + (\"`to.\" + dest + \"` field. Alternatively you may provide the full path as \") + \"a string in <Link to=\\\"...\\\"> and the router will parse it for you.\";\n}\n/**\n * @private\n *\n * When processing relative navigation we want to ignore ancestor routes that\n * do not contribute to the path, such that index/pathless layout routes don't\n * interfere.\n *\n * For example, when moving a route element into an index route and/or a\n * pathless layout route, relative link behavior contained within should stay\n * the same.  Both of the following examples should link back to the root:\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\" element={<Link to=\"..\"}>\n *   </Route>\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\">\n *       <Route element={<AccountsLayout />}>       // <-- Does not contribute\n *         <Route index element={<Link to=\"..\"} />  // <-- Does not contribute\n *       </Route\n *     </Route>\n *   </Route>\n */\n\n\nfunction getPathContributingMatches(matches) {\n  return matches.filter((match, index) => index === 0 || match.route.path && match.route.path.length > 0);\n} // Return the array of pathnames for the current route matches - used to\n// generate the routePathnames input for resolveTo()\n\n\nfunction getResolveToMatches(matches, v7_relativeSplatPath) {\n  let pathMatches = getPathContributingMatches(matches); // When v7_relativeSplatPath is enabled, use the full pathname for the leaf\n  // match so we include splat values for \".\" links.  See:\n  // https://github.com/remix-run/react-router/issues/11052#issuecomment-1836589329\n\n  if (v7_relativeSplatPath) {\n    return pathMatches.map((match, idx) => idx === pathMatches.length - 1 ? match.pathname : match.pathnameBase);\n  }\n\n  return pathMatches.map(match => match.pathnameBase);\n}\n/**\n * @private\n */\n\n\nfunction resolveTo(toArg, routePathnames, locationPathname, isPathRelative) {\n  if (isPathRelative === void 0) {\n    isPathRelative = false;\n  }\n\n  let to;\n\n  if (typeof toArg === \"string\") {\n    to = parsePath(toArg);\n  } else {\n    to = _extends({}, toArg);\n    invariant(!to.pathname || !to.pathname.includes(\"?\"), getInvalidPathError(\"?\", \"pathname\", \"search\", to));\n    invariant(!to.pathname || !to.pathname.includes(\"#\"), getInvalidPathError(\"#\", \"pathname\", \"hash\", to));\n    invariant(!to.search || !to.search.includes(\"#\"), getInvalidPathError(\"#\", \"search\", \"hash\", to));\n  }\n\n  let isEmptyPath = toArg === \"\" || to.pathname === \"\";\n  let toPathname = isEmptyPath ? \"/\" : to.pathname;\n  let from; // Routing is relative to the current pathname if explicitly requested.\n  //\n  // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n\n  if (toPathname == null) {\n    from = locationPathname;\n  } else {\n    let routePathnameIndex = routePathnames.length - 1; // With relative=\"route\" (the default), each leading .. segment means\n    // \"go up one route\" instead of \"go up one URL segment\".  This is a key\n    // difference from how <a href> works and a major reason we call this a\n    // \"to\" value instead of a \"href\".\n\n    if (!isPathRelative && toPathname.startsWith(\"..\")) {\n      let toSegments = toPathname.split(\"/\");\n\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n\n      to.pathname = toSegments.join(\"/\");\n    }\n\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n\n  let path = resolvePath(to, from); // Ensure the pathname has a trailing slash if the original \"to\" had one\n\n  let hasExplicitTrailingSlash = toPathname && toPathname !== \"/\" && toPathname.endsWith(\"/\"); // Or if this was a link to the current path which has a trailing slash\n\n  let hasCurrentTrailingSlash = (isEmptyPath || toPathname === \".\") && locationPathname.endsWith(\"/\");\n\n  if (!path.pathname.endsWith(\"/\") && (hasExplicitTrailingSlash || hasCurrentTrailingSlash)) {\n    path.pathname += \"/\";\n  }\n\n  return path;\n}\n/**\n * @private\n */\n\n\nfunction getToPathname(to) {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || to.pathname === \"\" ? \"/\" : typeof to === \"string\" ? parsePath(to).pathname : to.pathname;\n}\n/**\n * @private\n */\n\n\nconst joinPaths = paths => paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n/**\n * @private\n */\n\n\nconst normalizePathname = pathname => pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n/**\n * @private\n */\n\n\nconst normalizeSearch = search => !search || search === \"?\" ? \"\" : search.startsWith(\"?\") ? search : \"?\" + search;\n/**\n * @private\n */\n\n\nconst normalizeHash = hash => !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash;\n/**\n * This is a shortcut for creating `application/json` responses. Converts `data`\n * to JSON and sets the `Content-Type` header.\n */\n\n\nconst json = function json(data, init) {\n  if (init === void 0) {\n    init = {};\n  }\n\n  let responseInit = typeof init === \"number\" ? {\n    status: init\n  } : init;\n  let headers = new Headers(responseInit.headers);\n\n  if (!headers.has(\"Content-Type\")) {\n    headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n  }\n\n  return new Response(JSON.stringify(data), _extends({}, responseInit, {\n    headers\n  }));\n};\n\nclass DataWithResponseInit {\n  constructor(data, init) {\n    this.type = \"DataWithResponseInit\";\n    this.data = data;\n    this.init = init || null;\n  }\n\n}\n/**\n * Create \"responses\" that contain `status`/`headers` without forcing\n * serialization into an actual `Response` - used by Remix single fetch\n */\n\n\nfunction data(data, init) {\n  return new DataWithResponseInit(data, typeof init === \"number\" ? {\n    status: init\n  } : init);\n}\n\nclass AbortedDeferredError extends Error {}\n\nclass DeferredData {\n  constructor(data, responseInit) {\n    this.pendingKeysSet = new Set();\n    this.subscribers = new Set();\n    this.deferredKeys = [];\n    invariant(data && typeof data === \"object\" && !Array.isArray(data), \"defer() only accepts plain objects\"); // Set up an AbortController + Promise we can race against to exit early\n    // cancellation\n\n    let reject;\n    this.abortPromise = new Promise((_, r) => reject = r);\n    this.controller = new AbortController();\n\n    let onAbort = () => reject(new AbortedDeferredError(\"Deferred data aborted\"));\n\n    this.unlistenAbortSignal = () => this.controller.signal.removeEventListener(\"abort\", onAbort);\n\n    this.controller.signal.addEventListener(\"abort\", onAbort);\n    this.data = Object.entries(data).reduce((acc, _ref2) => {\n      let [key, value] = _ref2;\n      return Object.assign(acc, {\n        [key]: this.trackPromise(key, value)\n      });\n    }, {});\n\n    if (this.done) {\n      // All incoming values were resolved\n      this.unlistenAbortSignal();\n    }\n\n    this.init = responseInit;\n  }\n\n  trackPromise(key, value) {\n    if (!(value instanceof Promise)) {\n      return value;\n    }\n\n    this.deferredKeys.push(key);\n    this.pendingKeysSet.add(key); // We store a little wrapper promise that will be extended with\n    // _data/_error props upon resolve/reject\n\n    let promise = Promise.race([value, this.abortPromise]).then(data => this.onSettle(promise, key, undefined, data), error => this.onSettle(promise, key, error)); // Register rejection listeners to avoid uncaught promise rejections on\n    // errors or aborted deferred values\n\n    promise.catch(() => {});\n    Object.defineProperty(promise, \"_tracked\", {\n      get: () => true\n    });\n    return promise;\n  }\n\n  onSettle(promise, key, error, data) {\n    if (this.controller.signal.aborted && error instanceof AbortedDeferredError) {\n      this.unlistenAbortSignal();\n      Object.defineProperty(promise, \"_error\", {\n        get: () => error\n      });\n      return Promise.reject(error);\n    }\n\n    this.pendingKeysSet.delete(key);\n\n    if (this.done) {\n      // Nothing left to abort!\n      this.unlistenAbortSignal();\n    } // If the promise was resolved/rejected with undefined, we'll throw an error as you\n    // should always resolve with a value or null\n\n\n    if (error === undefined && data === undefined) {\n      let undefinedError = new Error(\"Deferred data for key \\\"\" + key + \"\\\" resolved/rejected with `undefined`, \" + \"you must resolve/reject with a value or `null`.\");\n      Object.defineProperty(promise, \"_error\", {\n        get: () => undefinedError\n      });\n      this.emit(false, key);\n      return Promise.reject(undefinedError);\n    }\n\n    if (data === undefined) {\n      Object.defineProperty(promise, \"_error\", {\n        get: () => error\n      });\n      this.emit(false, key);\n      return Promise.reject(error);\n    }\n\n    Object.defineProperty(promise, \"_data\", {\n      get: () => data\n    });\n    this.emit(false, key);\n    return data;\n  }\n\n  emit(aborted, settledKey) {\n    this.subscribers.forEach(subscriber => subscriber(aborted, settledKey));\n  }\n\n  subscribe(fn) {\n    this.subscribers.add(fn);\n    return () => this.subscribers.delete(fn);\n  }\n\n  cancel() {\n    this.controller.abort();\n    this.pendingKeysSet.forEach((v, k) => this.pendingKeysSet.delete(k));\n    this.emit(true);\n  }\n\n  async resolveData(signal) {\n    let aborted = false;\n\n    if (!this.done) {\n      let onAbort = () => this.cancel();\n\n      signal.addEventListener(\"abort\", onAbort);\n      aborted = await new Promise(resolve => {\n        this.subscribe(aborted => {\n          signal.removeEventListener(\"abort\", onAbort);\n\n          if (aborted || this.done) {\n            resolve(aborted);\n          }\n        });\n      });\n    }\n\n    return aborted;\n  }\n\n  get done() {\n    return this.pendingKeysSet.size === 0;\n  }\n\n  get unwrappedData() {\n    invariant(this.data !== null && this.done, \"Can only unwrap data on initialized and settled deferreds\");\n    return Object.entries(this.data).reduce((acc, _ref3) => {\n      let [key, value] = _ref3;\n      return Object.assign(acc, {\n        [key]: unwrapTrackedPromise(value)\n      });\n    }, {});\n  }\n\n  get pendingKeys() {\n    return Array.from(this.pendingKeysSet);\n  }\n\n}\n\nfunction isTrackedPromise(value) {\n  return value instanceof Promise && value._tracked === true;\n}\n\nfunction unwrapTrackedPromise(value) {\n  if (!isTrackedPromise(value)) {\n    return value;\n  }\n\n  if (value._error) {\n    throw value._error;\n  }\n\n  return value._data;\n}\n\nconst defer = function defer(data, init) {\n  if (init === void 0) {\n    init = {};\n  }\n\n  let responseInit = typeof init === \"number\" ? {\n    status: init\n  } : init;\n  return new DeferredData(data, responseInit);\n};\n/**\n * A redirect response. Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\n\n\nconst redirect = function redirect(url, init) {\n  if (init === void 0) {\n    init = 302;\n  }\n\n  let responseInit = init;\n\n  if (typeof responseInit === \"number\") {\n    responseInit = {\n      status: responseInit\n    };\n  } else if (typeof responseInit.status === \"undefined\") {\n    responseInit.status = 302;\n  }\n\n  let headers = new Headers(responseInit.headers);\n  headers.set(\"Location\", url);\n  return new Response(null, _extends({}, responseInit, {\n    headers\n  }));\n};\n/**\n * A redirect response that will force a document reload to the new location.\n * Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\n\n\nconst redirectDocument = (url, init) => {\n  let response = redirect(url, init);\n  response.headers.set(\"X-Remix-Reload-Document\", \"true\");\n  return response;\n};\n/**\n * A redirect response that will perform a `history.replaceState` instead of a\n * `history.pushState` for client-side navigation redirects.\n * Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\n\n\nconst replace = (url, init) => {\n  let response = redirect(url, init);\n  response.headers.set(\"X-Remix-Replace\", \"true\");\n  return response;\n};\n/**\n * @private\n * Utility class we use to hold auto-unwrapped 4xx/5xx Response bodies\n *\n * We don't export the class for public use since it's an implementation\n * detail, but we export the interface above so folks can build their own\n * abstractions around instances via isRouteErrorResponse()\n */\n\n\nclass ErrorResponseImpl {\n  constructor(status, statusText, data, internal) {\n    if (internal === void 0) {\n      internal = false;\n    }\n\n    this.status = status;\n    this.statusText = statusText || \"\";\n    this.internal = internal;\n\n    if (data instanceof Error) {\n      this.data = data.toString();\n      this.error = data;\n    } else {\n      this.data = data;\n    }\n  }\n\n}\n/**\n * Check if the given error is an ErrorResponse generated from a 4xx/5xx\n * Response thrown from an action/loader\n */\n\n\nfunction isRouteErrorResponse(error) {\n  return error != null && typeof error.status === \"number\" && typeof error.statusText === \"string\" && typeof error.internal === \"boolean\" && \"data\" in error;\n}\n\nconst validMutationMethodsArr = [\"post\", \"put\", \"patch\", \"delete\"];\nconst validMutationMethods = new Set(validMutationMethodsArr);\nconst validRequestMethodsArr = [\"get\", ...validMutationMethodsArr];\nconst validRequestMethods = new Set(validRequestMethodsArr);\nconst redirectStatusCodes = new Set([301, 302, 303, 307, 308]);\nconst redirectPreserveMethodStatusCodes = new Set([307, 308]);\nconst IDLE_NAVIGATION = {\n  state: \"idle\",\n  location: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n  json: undefined,\n  text: undefined\n};\nconst IDLE_FETCHER = {\n  state: \"idle\",\n  data: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n  json: undefined,\n  text: undefined\n};\nconst IDLE_BLOCKER = {\n  state: \"unblocked\",\n  proceed: undefined,\n  reset: undefined,\n  location: undefined\n};\nconst ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\\/\\/)/i;\n\nconst defaultMapRouteProperties = route => ({\n  hasErrorBoundary: Boolean(route.hasErrorBoundary)\n});\n\nconst TRANSITIONS_STORAGE_KEY = \"remix-router-transitions\"; //#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region createRouter\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Create a router and listen to history POP navigations\n */\n\nfunction createRouter(init) {\n  const routerWindow = init.window ? init.window : typeof window !== \"undefined\" ? window : undefined;\n  const isBrowser = typeof routerWindow !== \"undefined\" && typeof routerWindow.document !== \"undefined\" && typeof routerWindow.document.createElement !== \"undefined\";\n  const isServer = !isBrowser;\n  invariant(init.routes.length > 0, \"You must provide a non-empty routes array to createRouter\");\n  let mapRouteProperties;\n\n  if (init.mapRouteProperties) {\n    mapRouteProperties = init.mapRouteProperties;\n  } else if (init.detectErrorBoundary) {\n    // If they are still using the deprecated version, wrap it with the new API\n    let detectErrorBoundary = init.detectErrorBoundary;\n\n    mapRouteProperties = route => ({\n      hasErrorBoundary: detectErrorBoundary(route)\n    });\n  } else {\n    mapRouteProperties = defaultMapRouteProperties;\n  } // Routes keyed by ID\n\n\n  let manifest = {}; // Routes in tree format for matching\n\n  let dataRoutes = convertRoutesToDataRoutes(init.routes, mapRouteProperties, undefined, manifest);\n  let inFlightDataRoutes;\n  let basename = init.basename || \"/\";\n  let dataStrategyImpl = init.unstable_dataStrategy || defaultDataStrategy;\n  let patchRoutesOnNavigationImpl = init.unstable_patchRoutesOnNavigation; // Config driven behavior flags\n\n  let future = _extends({\n    v7_fetcherPersist: false,\n    v7_normalizeFormMethod: false,\n    v7_partialHydration: false,\n    v7_prependBasename: false,\n    v7_relativeSplatPath: false,\n    v7_skipActionErrorRevalidation: false\n  }, init.future); // Cleanup function for history\n\n\n  let unlistenHistory = null; // Externally-provided functions to call on all state changes\n\n  let subscribers = new Set(); // FIFO queue of previously discovered routes to prevent re-calling on\n  // subsequent navigations to the same path\n\n  let discoveredRoutesMaxSize = 1000;\n  let discoveredRoutes = new Set(); // Externally-provided object to hold scroll restoration locations during routing\n\n  let savedScrollPositions = null; // Externally-provided function to get scroll restoration keys\n\n  let getScrollRestorationKey = null; // Externally-provided function to get current scroll position\n\n  let getScrollPosition = null; // One-time flag to control the initial hydration scroll restoration.  Because\n  // we don't get the saved positions from <ScrollRestoration /> until _after_\n  // the initial render, we need to manually trigger a separate updateState to\n  // send along the restoreScrollPosition\n  // Set to true if we have `hydrationData` since we assume we were SSR'd and that\n  // SSR did the initial scroll restoration.\n\n  let initialScrollRestored = init.hydrationData != null;\n  let initialMatches = matchRoutes(dataRoutes, init.history.location, basename);\n  let initialErrors = null;\n\n  if (initialMatches == null && !patchRoutesOnNavigationImpl) {\n    // If we do not match a user-provided-route, fall back to the root\n    // to allow the error boundary to take over\n    let error = getInternalRouterError(404, {\n      pathname: init.history.location.pathname\n    });\n    let {\n      matches,\n      route\n    } = getShortCircuitMatches(dataRoutes);\n    initialMatches = matches;\n    initialErrors = {\n      [route.id]: error\n    };\n  } // In SPA apps, if the user provided a patchRoutesOnNavigation implementation and\n  // our initial match is a splat route, clear them out so we run through lazy\n  // discovery on hydration in case there's a more accurate lazy route match.\n  // In SSR apps (with `hydrationData`), we expect that the server will send\n  // up the proper matched routes so we don't want to run lazy discovery on\n  // initial hydration and want to hydrate into the splat route.\n\n\n  if (initialMatches && !init.hydrationData) {\n    let fogOfWar = checkFogOfWar(initialMatches, dataRoutes, init.history.location.pathname);\n\n    if (fogOfWar.active) {\n      initialMatches = null;\n    }\n  }\n\n  let initialized;\n\n  if (!initialMatches) {\n    initialized = false;\n    initialMatches = []; // If partial hydration and fog of war is enabled, we will be running\n    // `patchRoutesOnNavigation` during hydration so include any partial matches as\n    // the initial matches so we can properly render `HydrateFallback`'s\n\n    if (future.v7_partialHydration) {\n      let fogOfWar = checkFogOfWar(null, dataRoutes, init.history.location.pathname);\n\n      if (fogOfWar.active && fogOfWar.matches) {\n        initialMatches = fogOfWar.matches;\n      }\n    }\n  } else if (initialMatches.some(m => m.route.lazy)) {\n    // All initialMatches need to be loaded before we're ready.  If we have lazy\n    // functions around still then we'll need to run them in initialize()\n    initialized = false;\n  } else if (!initialMatches.some(m => m.route.loader)) {\n    // If we've got no loaders to run, then we're good to go\n    initialized = true;\n  } else if (future.v7_partialHydration) {\n    // If partial hydration is enabled, we're initialized so long as we were\n    // provided with hydrationData for every route with a loader, and no loaders\n    // were marked for explicit hydration\n    let loaderData = init.hydrationData ? init.hydrationData.loaderData : null;\n    let errors = init.hydrationData ? init.hydrationData.errors : null;\n\n    let isRouteInitialized = m => {\n      // No loader, nothing to initialize\n      if (!m.route.loader) {\n        return true;\n      } // Explicitly opting-in to running on hydration\n\n\n      if (typeof m.route.loader === \"function\" && m.route.loader.hydrate === true) {\n        return false;\n      } // Otherwise, initialized if hydrated with data or an error\n\n\n      return loaderData && loaderData[m.route.id] !== undefined || errors && errors[m.route.id] !== undefined;\n    }; // If errors exist, don't consider routes below the boundary\n\n\n    if (errors) {\n      let idx = initialMatches.findIndex(m => errors[m.route.id] !== undefined);\n      initialized = initialMatches.slice(0, idx + 1).every(isRouteInitialized);\n    } else {\n      initialized = initialMatches.every(isRouteInitialized);\n    }\n  } else {\n    // Without partial hydration - we're initialized if we were provided any\n    // hydrationData - which is expected to be complete\n    initialized = init.hydrationData != null;\n  }\n\n  let router;\n  let state = {\n    historyAction: init.history.action,\n    location: init.history.location,\n    matches: initialMatches,\n    initialized,\n    navigation: IDLE_NAVIGATION,\n    // Don't restore on initial updateState() if we were SSR'd\n    restoreScrollPosition: init.hydrationData != null ? false : null,\n    preventScrollReset: false,\n    revalidation: \"idle\",\n    loaderData: init.hydrationData && init.hydrationData.loaderData || {},\n    actionData: init.hydrationData && init.hydrationData.actionData || null,\n    errors: init.hydrationData && init.hydrationData.errors || initialErrors,\n    fetchers: new Map(),\n    blockers: new Map()\n  }; // -- Stateful internal variables to manage navigations --\n  // Current navigation in progress (to be committed in completeNavigation)\n\n  let pendingAction = Action.Pop; // Should the current navigation prevent the scroll reset if scroll cannot\n  // be restored?\n\n  let pendingPreventScrollReset = false; // AbortController for the active navigation\n\n  let pendingNavigationController; // Should the current navigation enable document.startViewTransition?\n\n  let pendingViewTransitionEnabled = false; // Store applied view transitions so we can apply them on POP\n\n  let appliedViewTransitions = new Map(); // Cleanup function for persisting applied transitions to sessionStorage\n\n  let removePageHideEventListener = null; // We use this to avoid touching history in completeNavigation if a\n  // revalidation is entirely uninterrupted\n\n  let isUninterruptedRevalidation = false; // Use this internal flag to force revalidation of all loaders:\n  //  - submissions (completed or interrupted)\n  //  - useRevalidator()\n  //  - X-Remix-Revalidate (from redirect)\n\n  let isRevalidationRequired = false; // Use this internal array to capture routes that require revalidation due\n  // to a cancelled deferred on action submission\n\n  let cancelledDeferredRoutes = []; // Use this internal array to capture fetcher loads that were cancelled by an\n  // action navigation and require revalidation\n\n  let cancelledFetcherLoads = new Set(); // AbortControllers for any in-flight fetchers\n\n  let fetchControllers = new Map(); // Track loads based on the order in which they started\n\n  let incrementingLoadId = 0; // Track the outstanding pending navigation data load to be compared against\n  // the globally incrementing load when a fetcher load lands after a completed\n  // navigation\n\n  let pendingNavigationLoadId = -1; // Fetchers that triggered data reloads as a result of their actions\n\n  let fetchReloadIds = new Map(); // Fetchers that triggered redirect navigations\n\n  let fetchRedirectIds = new Set(); // Most recent href/match for fetcher.load calls for fetchers\n\n  let fetchLoadMatches = new Map(); // Ref-count mounted fetchers so we know when it's ok to clean them up\n\n  let activeFetchers = new Map(); // Fetchers that have requested a delete when using v7_fetcherPersist,\n  // they'll be officially removed after they return to idle\n\n  let deletedFetchers = new Set(); // Store DeferredData instances for active route matches.  When a\n  // route loader returns defer() we stick one in here.  Then, when a nested\n  // promise resolves we update loaderData.  If a new navigation starts we\n  // cancel active deferreds for eliminated routes.\n\n  let activeDeferreds = new Map(); // Store blocker functions in a separate Map outside of router state since\n  // we don't need to update UI state if they change\n\n  let blockerFunctions = new Map(); // Map of pending patchRoutesOnNavigation() promises (keyed by path/matches) so\n  // that we only kick them off once for a given combo\n\n  let pendingPatchRoutes = new Map(); // Flag to ignore the next history update, so we can revert the URL change on\n  // a POP navigation that was blocked by the user without touching router state\n\n  let unblockBlockerHistoryUpdate = undefined; // Initialize the router, all side effects should be kicked off from here.\n  // Implemented as a Fluent API for ease of:\n  //   let router = createRouter(init).initialize();\n\n  function initialize() {\n    // If history informs us of a POP navigation, start the navigation but do not update\n    // state.  We'll update our own state once the navigation completes\n    unlistenHistory = init.history.listen(_ref => {\n      let {\n        action: historyAction,\n        location,\n        delta\n      } = _ref; // Ignore this event if it was just us resetting the URL from a\n      // blocked POP navigation\n\n      if (unblockBlockerHistoryUpdate) {\n        unblockBlockerHistoryUpdate();\n        unblockBlockerHistoryUpdate = undefined;\n        return;\n      }\n\n      warning(blockerFunctions.size === 0 || delta != null, \"You are trying to use a blocker on a POP navigation to a location \" + \"that was not created by @remix-run/router. This will fail silently in \" + \"production. This can happen if you are navigating outside the router \" + \"via `window.history.pushState`/`window.location.hash` instead of using \" + \"router navigation APIs.  This can also happen if you are using \" + \"createHashRouter and the user manually changes the URL.\");\n      let blockerKey = shouldBlockNavigation({\n        currentLocation: state.location,\n        nextLocation: location,\n        historyAction\n      });\n\n      if (blockerKey && delta != null) {\n        // Restore the URL to match the current UI, but don't update router state\n        let nextHistoryUpdatePromise = new Promise(resolve => {\n          unblockBlockerHistoryUpdate = resolve;\n        });\n        init.history.go(delta * -1); // Put the blocker into a blocked state\n\n        updateBlocker(blockerKey, {\n          state: \"blocked\",\n          location,\n\n          proceed() {\n            updateBlocker(blockerKey, {\n              state: \"proceeding\",\n              proceed: undefined,\n              reset: undefined,\n              location\n            }); // Re-do the same POP navigation we just blocked, after the url\n            // restoration is also complete.  See:\n            // https://github.com/remix-run/react-router/issues/11613\n\n            nextHistoryUpdatePromise.then(() => init.history.go(delta));\n          },\n\n          reset() {\n            let blockers = new Map(state.blockers);\n            blockers.set(blockerKey, IDLE_BLOCKER);\n            updateState({\n              blockers\n            });\n          }\n\n        });\n        return;\n      }\n\n      return startNavigation(historyAction, location);\n    });\n\n    if (isBrowser) {\n      // FIXME: This feels gross.  How can we cleanup the lines between\n      // scrollRestoration/appliedTransitions persistance?\n      restoreAppliedTransitions(routerWindow, appliedViewTransitions);\n\n      let _saveAppliedTransitions = () => persistAppliedTransitions(routerWindow, appliedViewTransitions);\n\n      routerWindow.addEventListener(\"pagehide\", _saveAppliedTransitions);\n\n      removePageHideEventListener = () => routerWindow.removeEventListener(\"pagehide\", _saveAppliedTransitions);\n    } // Kick off initial data load if needed.  Use Pop to avoid modifying history\n    // Note we don't do any handling of lazy here.  For SPA's it'll get handled\n    // in the normal navigation flow.  For SSR it's expected that lazy modules are\n    // resolved prior to router creation since we can't go into a fallbackElement\n    // UI for SSR'd apps\n\n\n    if (!state.initialized) {\n      startNavigation(Action.Pop, state.location, {\n        initialHydration: true\n      });\n    }\n\n    return router;\n  } // Clean up a router and it's side effects\n\n\n  function dispose() {\n    if (unlistenHistory) {\n      unlistenHistory();\n    }\n\n    if (removePageHideEventListener) {\n      removePageHideEventListener();\n    }\n\n    subscribers.clear();\n    pendingNavigationController && pendingNavigationController.abort();\n    state.fetchers.forEach((_, key) => deleteFetcher(key));\n    state.blockers.forEach((_, key) => deleteBlocker(key));\n  } // Subscribe to state updates for the router\n\n\n  function subscribe(fn) {\n    subscribers.add(fn);\n    return () => subscribers.delete(fn);\n  } // Update our state and notify the calling context of the change\n\n\n  function updateState(newState, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n\n    state = _extends({}, state, newState); // Prep fetcher cleanup so we can tell the UI which fetcher data entries\n    // can be removed\n\n    let completedFetchers = [];\n    let deletedFetchersKeys = [];\n\n    if (future.v7_fetcherPersist) {\n      state.fetchers.forEach((fetcher, key) => {\n        if (fetcher.state === \"idle\") {\n          if (deletedFetchers.has(key)) {\n            // Unmounted from the UI and can be totally removed\n            deletedFetchersKeys.push(key);\n          } else {\n            // Returned to idle but still mounted in the UI, so semi-remains for\n            // revalidations and such\n            completedFetchers.push(key);\n          }\n        }\n      });\n    } // Iterate over a local copy so that if flushSync is used and we end up\n    // removing and adding a new subscriber due to the useCallback dependencies,\n    // we don't get ourselves into a loop calling the new subscriber immediately\n\n\n    [...subscribers].forEach(subscriber => subscriber(state, {\n      deletedFetchers: deletedFetchersKeys,\n      unstable_viewTransitionOpts: opts.viewTransitionOpts,\n      unstable_flushSync: opts.flushSync === true\n    })); // Remove idle fetchers from state since we only care about in-flight fetchers.\n\n    if (future.v7_fetcherPersist) {\n      completedFetchers.forEach(key => state.fetchers.delete(key));\n      deletedFetchersKeys.forEach(key => deleteFetcher(key));\n    }\n  } // Complete a navigation returning the state.navigation back to the IDLE_NAVIGATION\n  // and setting state.[historyAction/location/matches] to the new route.\n  // - Location is a required param\n  // - Navigation will always be set to IDLE_NAVIGATION\n  // - Can pass any other state in newState\n\n\n  function completeNavigation(location, newState, _temp) {\n    var _location$state, _location$state2;\n\n    let {\n      flushSync\n    } = _temp === void 0 ? {} : _temp; // Deduce if we're in a loading/actionReload state:\n    // - We have committed actionData in the store\n    // - The current navigation was a mutation submission\n    // - We're past the submitting state and into the loading state\n    // - The location being loaded is not the result of a redirect\n\n    let isActionReload = state.actionData != null && state.navigation.formMethod != null && isMutationMethod(state.navigation.formMethod) && state.navigation.state === \"loading\" && ((_location$state = location.state) == null ? void 0 : _location$state._isRedirect) !== true;\n    let actionData;\n\n    if (newState.actionData) {\n      if (Object.keys(newState.actionData).length > 0) {\n        actionData = newState.actionData;\n      } else {\n        // Empty actionData -> clear prior actionData due to an action error\n        actionData = null;\n      }\n    } else if (isActionReload) {\n      // Keep the current data if we're wrapping up the action reload\n      actionData = state.actionData;\n    } else {\n      // Clear actionData on any other completed navigations\n      actionData = null;\n    } // Always preserve any existing loaderData from re-used routes\n\n\n    let loaderData = newState.loaderData ? mergeLoaderData(state.loaderData, newState.loaderData, newState.matches || [], newState.errors) : state.loaderData; // On a successful navigation we can assume we got through all blockers\n    // so we can start fresh\n\n    let blockers = state.blockers;\n\n    if (blockers.size > 0) {\n      blockers = new Map(blockers);\n      blockers.forEach((_, k) => blockers.set(k, IDLE_BLOCKER));\n    } // Always respect the user flag.  Otherwise don't reset on mutation\n    // submission navigations unless they redirect\n\n\n    let preventScrollReset = pendingPreventScrollReset === true || state.navigation.formMethod != null && isMutationMethod(state.navigation.formMethod) && ((_location$state2 = location.state) == null ? void 0 : _location$state2._isRedirect) !== true; // Commit any in-flight routes at the end of the HMR revalidation \"navigation\"\n\n    if (inFlightDataRoutes) {\n      dataRoutes = inFlightDataRoutes;\n      inFlightDataRoutes = undefined;\n    }\n\n    if (isUninterruptedRevalidation) ;else if (pendingAction === Action.Pop) ;else if (pendingAction === Action.Push) {\n      init.history.push(location, location.state);\n    } else if (pendingAction === Action.Replace) {\n      init.history.replace(location, location.state);\n    }\n    let viewTransitionOpts; // On POP, enable transitions if they were enabled on the original navigation\n\n    if (pendingAction === Action.Pop) {\n      // Forward takes precedence so they behave like the original navigation\n      let priorPaths = appliedViewTransitions.get(state.location.pathname);\n\n      if (priorPaths && priorPaths.has(location.pathname)) {\n        viewTransitionOpts = {\n          currentLocation: state.location,\n          nextLocation: location\n        };\n      } else if (appliedViewTransitions.has(location.pathname)) {\n        // If we don't have a previous forward nav, assume we're popping back to\n        // the new location and enable if that location previously enabled\n        viewTransitionOpts = {\n          currentLocation: location,\n          nextLocation: state.location\n        };\n      }\n    } else if (pendingViewTransitionEnabled) {\n      // Store the applied transition on PUSH/REPLACE\n      let toPaths = appliedViewTransitions.get(state.location.pathname);\n\n      if (toPaths) {\n        toPaths.add(location.pathname);\n      } else {\n        toPaths = new Set([location.pathname]);\n        appliedViewTransitions.set(state.location.pathname, toPaths);\n      }\n\n      viewTransitionOpts = {\n        currentLocation: state.location,\n        nextLocation: location\n      };\n    }\n\n    updateState(_extends({}, newState, {\n      actionData,\n      loaderData,\n      historyAction: pendingAction,\n      location,\n      initialized: true,\n      navigation: IDLE_NAVIGATION,\n      revalidation: \"idle\",\n      restoreScrollPosition: getSavedScrollPosition(location, newState.matches || state.matches),\n      preventScrollReset,\n      blockers\n    }), {\n      viewTransitionOpts,\n      flushSync: flushSync === true\n    }); // Reset stateful navigation vars\n\n    pendingAction = Action.Pop;\n    pendingPreventScrollReset = false;\n    pendingViewTransitionEnabled = false;\n    isUninterruptedRevalidation = false;\n    isRevalidationRequired = false;\n    cancelledDeferredRoutes = [];\n  } // Trigger a navigation event, which can either be a numerical POP or a PUSH\n  // replace with an optional submission\n\n\n  async function navigate(to, opts) {\n    if (typeof to === \"number\") {\n      init.history.go(to);\n      return;\n    }\n\n    let normalizedPath = normalizeTo(state.location, state.matches, basename, future.v7_prependBasename, to, future.v7_relativeSplatPath, opts == null ? void 0 : opts.fromRouteId, opts == null ? void 0 : opts.relative);\n    let {\n      path,\n      submission,\n      error\n    } = normalizeNavigateOptions(future.v7_normalizeFormMethod, false, normalizedPath, opts);\n    let currentLocation = state.location;\n    let nextLocation = createLocation(state.location, path, opts && opts.state); // When using navigate as a PUSH/REPLACE we aren't reading an already-encoded\n    // URL from window.location, so we need to encode it here so the behavior\n    // remains the same as POP and non-data-router usages.  new URL() does all\n    // the same encoding we'd get from a history.pushState/window.location read\n    // without having to touch history\n\n    nextLocation = _extends({}, nextLocation, init.history.encodeLocation(nextLocation));\n    let userReplace = opts && opts.replace != null ? opts.replace : undefined;\n    let historyAction = Action.Push;\n\n    if (userReplace === true) {\n      historyAction = Action.Replace;\n    } else if (userReplace === false) ;else if (submission != null && isMutationMethod(submission.formMethod) && submission.formAction === state.location.pathname + state.location.search) {\n      // By default on submissions to the current location we REPLACE so that\n      // users don't have to double-click the back button to get to the prior\n      // location.  If the user redirects to a different location from the\n      // action/loader this will be ignored and the redirect will be a PUSH\n      historyAction = Action.Replace;\n    }\n\n    let preventScrollReset = opts && \"preventScrollReset\" in opts ? opts.preventScrollReset === true : undefined;\n    let flushSync = (opts && opts.unstable_flushSync) === true;\n    let blockerKey = shouldBlockNavigation({\n      currentLocation,\n      nextLocation,\n      historyAction\n    });\n\n    if (blockerKey) {\n      // Put the blocker into a blocked state\n      updateBlocker(blockerKey, {\n        state: \"blocked\",\n        location: nextLocation,\n\n        proceed() {\n          updateBlocker(blockerKey, {\n            state: \"proceeding\",\n            proceed: undefined,\n            reset: undefined,\n            location: nextLocation\n          }); // Send the same navigation through\n\n          navigate(to, opts);\n        },\n\n        reset() {\n          let blockers = new Map(state.blockers);\n          blockers.set(blockerKey, IDLE_BLOCKER);\n          updateState({\n            blockers\n          });\n        }\n\n      });\n      return;\n    }\n\n    return await startNavigation(historyAction, nextLocation, {\n      submission,\n      // Send through the formData serialization error if we have one so we can\n      // render at the right error boundary after we match routes\n      pendingError: error,\n      preventScrollReset,\n      replace: opts && opts.replace,\n      enableViewTransition: opts && opts.unstable_viewTransition,\n      flushSync\n    });\n  } // Revalidate all current loaders.  If a navigation is in progress or if this\n  // is interrupted by a navigation, allow this to \"succeed\" by calling all\n  // loaders during the next loader round\n\n\n  function revalidate() {\n    interruptActiveLoads();\n    updateState({\n      revalidation: \"loading\"\n    }); // If we're currently submitting an action, we don't need to start a new\n    // navigation, we'll just let the follow up loader execution call all loaders\n\n    if (state.navigation.state === \"submitting\") {\n      return;\n    } // If we're currently in an idle state, start a new navigation for the current\n    // action/location and mark it as uninterrupted, which will skip the history\n    // update in completeNavigation\n\n\n    if (state.navigation.state === \"idle\") {\n      startNavigation(state.historyAction, state.location, {\n        startUninterruptedRevalidation: true\n      });\n      return;\n    } // Otherwise, if we're currently in a loading state, just start a new\n    // navigation to the navigation.location but do not trigger an uninterrupted\n    // revalidation so that history correctly updates once the navigation completes\n\n\n    startNavigation(pendingAction || state.historyAction, state.navigation.location, {\n      overrideNavigation: state.navigation,\n      // Proxy through any rending view transition\n      enableViewTransition: pendingViewTransitionEnabled === true\n    });\n  } // Start a navigation to the given action/location.  Can optionally provide a\n  // overrideNavigation which will override the normalLoad in the case of a redirect\n  // navigation\n\n\n  async function startNavigation(historyAction, location, opts) {\n    // Abort any in-progress navigations and start a new one. Unset any ongoing\n    // uninterrupted revalidations unless told otherwise, since we want this\n    // new navigation to update history normally\n    pendingNavigationController && pendingNavigationController.abort();\n    pendingNavigationController = null;\n    pendingAction = historyAction;\n    isUninterruptedRevalidation = (opts && opts.startUninterruptedRevalidation) === true; // Save the current scroll position every time we start a new navigation,\n    // and track whether we should reset scroll on completion\n\n    saveScrollPosition(state.location, state.matches);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n    pendingViewTransitionEnabled = (opts && opts.enableViewTransition) === true;\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let loadingNavigation = opts && opts.overrideNavigation;\n    let matches = matchRoutes(routesToUse, location, basename);\n    let flushSync = (opts && opts.flushSync) === true;\n    let fogOfWar = checkFogOfWar(matches, routesToUse, location.pathname);\n\n    if (fogOfWar.active && fogOfWar.matches) {\n      matches = fogOfWar.matches;\n    } // Short circuit with a 404 on the root error boundary if we match nothing\n\n\n    if (!matches) {\n      let {\n        error,\n        notFoundMatches,\n        route\n      } = handleNavigational404(location.pathname);\n      completeNavigation(location, {\n        matches: notFoundMatches,\n        loaderData: {},\n        errors: {\n          [route.id]: error\n        }\n      }, {\n        flushSync\n      });\n      return;\n    } // Short circuit if it's only a hash change and not a revalidation or\n    // mutation submission.\n    //\n    // Ignore on initial page loads because since the initial load will always\n    // be \"same hash\".  For example, on /page#hash and submit a <Form method=\"post\">\n    // which will default to a navigation to /page\n\n\n    if (state.initialized && !isRevalidationRequired && isHashChangeOnly(state.location, location) && !(opts && opts.submission && isMutationMethod(opts.submission.formMethod))) {\n      completeNavigation(location, {\n        matches\n      }, {\n        flushSync\n      });\n      return;\n    } // Create a controller/Request for this navigation\n\n\n    pendingNavigationController = new AbortController();\n    let request = createClientSideRequest(init.history, location, pendingNavigationController.signal, opts && opts.submission);\n    let pendingActionResult;\n\n    if (opts && opts.pendingError) {\n      // If we have a pendingError, it means the user attempted a GET submission\n      // with binary FormData so assign here and skip to handleLoaders.  That\n      // way we handle calling loaders above the boundary etc.  It's not really\n      // different from an actionError in that sense.\n      pendingActionResult = [findNearestBoundary(matches).route.id, {\n        type: ResultType.error,\n        error: opts.pendingError\n      }];\n    } else if (opts && opts.submission && isMutationMethod(opts.submission.formMethod)) {\n      // Call action if we received an action submission\n      let actionResult = await handleAction(request, location, opts.submission, matches, fogOfWar.active, {\n        replace: opts.replace,\n        flushSync\n      });\n\n      if (actionResult.shortCircuited) {\n        return;\n      } // If we received a 404 from handleAction, it's because we couldn't lazily\n      // discover the destination route so we don't want to call loaders\n\n\n      if (actionResult.pendingActionResult) {\n        let [routeId, result] = actionResult.pendingActionResult;\n\n        if (isErrorResult(result) && isRouteErrorResponse(result.error) && result.error.status === 404) {\n          pendingNavigationController = null;\n          completeNavigation(location, {\n            matches: actionResult.matches,\n            loaderData: {},\n            errors: {\n              [routeId]: result.error\n            }\n          });\n          return;\n        }\n      }\n\n      matches = actionResult.matches || matches;\n      pendingActionResult = actionResult.pendingActionResult;\n      loadingNavigation = getLoadingNavigation(location, opts.submission);\n      flushSync = false; // No need to do fog of war matching again on loader execution\n\n      fogOfWar.active = false; // Create a GET request for the loaders\n\n      request = createClientSideRequest(init.history, request.url, request.signal);\n    } // Call loaders\n\n\n    let {\n      shortCircuited,\n      matches: updatedMatches,\n      loaderData,\n      errors\n    } = await handleLoaders(request, location, matches, fogOfWar.active, loadingNavigation, opts && opts.submission, opts && opts.fetcherSubmission, opts && opts.replace, opts && opts.initialHydration === true, flushSync, pendingActionResult);\n\n    if (shortCircuited) {\n      return;\n    } // Clean up now that the action/loaders have completed.  Don't clean up if\n    // we short circuited because pendingNavigationController will have already\n    // been assigned to a new controller for the next navigation\n\n\n    pendingNavigationController = null;\n    completeNavigation(location, _extends({\n      matches: updatedMatches || matches\n    }, getActionDataForCommit(pendingActionResult), {\n      loaderData,\n      errors\n    }));\n  } // Call the action matched by the leaf route for this navigation and handle\n  // redirects/errors\n\n\n  async function handleAction(request, location, submission, matches, isFogOfWar, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n\n    interruptActiveLoads(); // Put us in a submitting state\n\n    let navigation = getSubmittingNavigation(location, submission);\n    updateState({\n      navigation\n    }, {\n      flushSync: opts.flushSync === true\n    });\n\n    if (isFogOfWar) {\n      let discoverResult = await discoverRoutes(matches, location.pathname, request.signal);\n\n      if (discoverResult.type === \"aborted\") {\n        return {\n          shortCircuited: true\n        };\n      } else if (discoverResult.type === \"error\") {\n        let {\n          boundaryId,\n          error\n        } = handleDiscoverRouteError(location.pathname, discoverResult);\n        return {\n          matches: discoverResult.partialMatches,\n          pendingActionResult: [boundaryId, {\n            type: ResultType.error,\n            error\n          }]\n        };\n      } else if (!discoverResult.matches) {\n        let {\n          notFoundMatches,\n          error,\n          route\n        } = handleNavigational404(location.pathname);\n        return {\n          matches: notFoundMatches,\n          pendingActionResult: [route.id, {\n            type: ResultType.error,\n            error\n          }]\n        };\n      } else {\n        matches = discoverResult.matches;\n      }\n    } // Call our action and get the result\n\n\n    let result;\n    let actionMatch = getTargetMatch(matches, location);\n\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      result = {\n        type: ResultType.error,\n        error: getInternalRouterError(405, {\n          method: request.method,\n          pathname: location.pathname,\n          routeId: actionMatch.route.id\n        })\n      };\n    } else {\n      let results = await callDataStrategy(\"action\", state, request, [actionMatch], matches, null);\n      result = results[actionMatch.route.id];\n\n      if (request.signal.aborted) {\n        return {\n          shortCircuited: true\n        };\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      let replace;\n\n      if (opts && opts.replace != null) {\n        replace = opts.replace;\n      } else {\n        // If the user didn't explicity indicate replace behavior, replace if\n        // we redirected to the exact same location we're currently at to avoid\n        // double back-buttons\n        let location = normalizeRedirectLocation(result.response.headers.get(\"Location\"), new URL(request.url), basename);\n        replace = location === state.location.pathname + state.location.search;\n      }\n\n      await startRedirectNavigation(request, result, true, {\n        submission,\n        replace\n      });\n      return {\n        shortCircuited: true\n      };\n    }\n\n    if (isDeferredResult(result)) {\n      throw getInternalRouterError(400, {\n        type: \"defer-action\"\n      });\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id); // By default, all submissions to the current location are REPLACE\n      // navigations, but if the action threw an error that'll be rendered in\n      // an errorElement, we fall back to PUSH so that the user can use the\n      // back button to get back to the pre-submission form location to try\n      // again\n\n      if ((opts && opts.replace) !== true) {\n        pendingAction = Action.Push;\n      }\n\n      return {\n        matches,\n        pendingActionResult: [boundaryMatch.route.id, result]\n      };\n    }\n\n    return {\n      matches,\n      pendingActionResult: [actionMatch.route.id, result]\n    };\n  } // Call all applicable loaders for the given matches, handling redirects,\n  // errors, etc.\n\n\n  async function handleLoaders(request, location, matches, isFogOfWar, overrideNavigation, submission, fetcherSubmission, replace, initialHydration, flushSync, pendingActionResult) {\n    // Figure out the right navigation we want to use for data loading\n    let loadingNavigation = overrideNavigation || getLoadingNavigation(location, submission); // If this was a redirect from an action we don't have a \"submission\" but\n    // we have it on the loading navigation so use that if available\n\n    let activeSubmission = submission || fetcherSubmission || getSubmissionFromNavigation(loadingNavigation); // If this is an uninterrupted revalidation, we remain in our current idle\n    // state.  If not, we need to switch to our loading state and load data,\n    // preserving any new action data or existing action data (in the case of\n    // a revalidation interrupting an actionReload)\n    // If we have partialHydration enabled, then don't update the state for the\n    // initial data load since it's not a \"navigation\"\n\n    let shouldUpdateNavigationState = !isUninterruptedRevalidation && (!future.v7_partialHydration || !initialHydration); // When fog of war is enabled, we enter our `loading` state earlier so we\n    // can discover new routes during the `loading` state.  We skip this if\n    // we've already run actions since we would have done our matching already.\n    // If the children() function threw then, we want to proceed with the\n    // partial matches it discovered.\n\n    if (isFogOfWar) {\n      if (shouldUpdateNavigationState) {\n        let actionData = getUpdatedActionData(pendingActionResult);\n        updateState(_extends({\n          navigation: loadingNavigation\n        }, actionData !== undefined ? {\n          actionData\n        } : {}), {\n          flushSync\n        });\n      }\n\n      let discoverResult = await discoverRoutes(matches, location.pathname, request.signal);\n\n      if (discoverResult.type === \"aborted\") {\n        return {\n          shortCircuited: true\n        };\n      } else if (discoverResult.type === \"error\") {\n        let {\n          boundaryId,\n          error\n        } = handleDiscoverRouteError(location.pathname, discoverResult);\n        return {\n          matches: discoverResult.partialMatches,\n          loaderData: {},\n          errors: {\n            [boundaryId]: error\n          }\n        };\n      } else if (!discoverResult.matches) {\n        let {\n          error,\n          notFoundMatches,\n          route\n        } = handleNavigational404(location.pathname);\n        return {\n          matches: notFoundMatches,\n          loaderData: {},\n          errors: {\n            [route.id]: error\n          }\n        };\n      } else {\n        matches = discoverResult.matches;\n      }\n    }\n\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(init.history, state, matches, activeSubmission, location, future.v7_partialHydration && initialHydration === true, future.v7_skipActionErrorRevalidation, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, deletedFetchers, fetchLoadMatches, fetchRedirectIds, routesToUse, basename, pendingActionResult); // Cancel pending deferreds for no-longer-matched routes or routes we're\n    // about to reload.  Note that if this is an action reload we would have\n    // already cancelled all pending deferreds so this would be a no-op\n\n    cancelActiveDeferreds(routeId => !(matches && matches.some(m => m.route.id === routeId)) || matchesToLoad && matchesToLoad.some(m => m.route.id === routeId));\n    pendingNavigationLoadId = ++incrementingLoadId; // Short circuit if we have no loaders to run\n\n    if (matchesToLoad.length === 0 && revalidatingFetchers.length === 0) {\n      let updatedFetchers = markFetchRedirectsDone();\n      completeNavigation(location, _extends({\n        matches,\n        loaderData: {},\n        // Commit pending error if we're short circuiting\n        errors: pendingActionResult && isErrorResult(pendingActionResult[1]) ? {\n          [pendingActionResult[0]]: pendingActionResult[1].error\n        } : null\n      }, getActionDataForCommit(pendingActionResult), updatedFetchers ? {\n        fetchers: new Map(state.fetchers)\n      } : {}), {\n        flushSync\n      });\n      return {\n        shortCircuited: true\n      };\n    }\n\n    if (shouldUpdateNavigationState) {\n      let updates = {};\n\n      if (!isFogOfWar) {\n        // Only update navigation/actionNData if we didn't already do it above\n        updates.navigation = loadingNavigation;\n        let actionData = getUpdatedActionData(pendingActionResult);\n\n        if (actionData !== undefined) {\n          updates.actionData = actionData;\n        }\n      }\n\n      if (revalidatingFetchers.length > 0) {\n        updates.fetchers = getUpdatedRevalidatingFetchers(revalidatingFetchers);\n      }\n\n      updateState(updates, {\n        flushSync\n      });\n    }\n\n    revalidatingFetchers.forEach(rf => {\n      if (fetchControllers.has(rf.key)) {\n        abortFetcher(rf.key);\n      }\n\n      if (rf.controller) {\n        // Fetchers use an independent AbortController so that aborting a fetcher\n        // (via deleteFetcher) does not abort the triggering navigation that\n        // triggered the revalidation\n        fetchControllers.set(rf.key, rf.controller);\n      }\n    }); // Proxy navigation abort through to revalidation fetchers\n\n    let abortPendingFetchRevalidations = () => revalidatingFetchers.forEach(f => abortFetcher(f.key));\n\n    if (pendingNavigationController) {\n      pendingNavigationController.signal.addEventListener(\"abort\", abortPendingFetchRevalidations);\n    }\n\n    let {\n      loaderResults,\n      fetcherResults\n    } = await callLoadersAndMaybeResolveData(state, matches, matchesToLoad, revalidatingFetchers, request);\n\n    if (request.signal.aborted) {\n      return {\n        shortCircuited: true\n      };\n    } // Clean up _after_ loaders have completed.  Don't clean up if we short\n    // circuited because fetchControllers would have been aborted and\n    // reassigned to new controllers for the next navigation\n\n\n    if (pendingNavigationController) {\n      pendingNavigationController.signal.removeEventListener(\"abort\", abortPendingFetchRevalidations);\n    }\n\n    revalidatingFetchers.forEach(rf => fetchControllers.delete(rf.key)); // If any loaders returned a redirect Response, start a new REPLACE navigation\n\n    let redirect = findRedirect(loaderResults);\n\n    if (redirect) {\n      await startRedirectNavigation(request, redirect.result, true, {\n        replace\n      });\n      return {\n        shortCircuited: true\n      };\n    }\n\n    redirect = findRedirect(fetcherResults);\n\n    if (redirect) {\n      // If this redirect came from a fetcher make sure we mark it in\n      // fetchRedirectIds so it doesn't get revalidated on the next set of\n      // loader executions\n      fetchRedirectIds.add(redirect.key);\n      await startRedirectNavigation(request, redirect.result, true, {\n        replace\n      });\n      return {\n        shortCircuited: true\n      };\n    } // Process and commit output from loaders\n\n\n    let {\n      loaderData,\n      errors\n    } = processLoaderData(state, matches, matchesToLoad, loaderResults, pendingActionResult, revalidatingFetchers, fetcherResults, activeDeferreds); // Wire up subscribers to update loaderData as promises settle\n\n    activeDeferreds.forEach((deferredData, routeId) => {\n      deferredData.subscribe(aborted => {\n        // Note: No need to updateState here since the TrackedPromise on\n        // loaderData is stable across resolve/reject\n        // Remove this instance if we were aborted or if promises have settled\n        if (aborted || deferredData.done) {\n          activeDeferreds.delete(routeId);\n        }\n      });\n    }); // During partial hydration, preserve SSR errors for routes that don't re-run\n\n    if (future.v7_partialHydration && initialHydration && state.errors) {\n      Object.entries(state.errors).filter(_ref2 => {\n        let [id] = _ref2;\n        return !matchesToLoad.some(m => m.route.id === id);\n      }).forEach(_ref3 => {\n        let [routeId, error] = _ref3;\n        errors = Object.assign(errors || {}, {\n          [routeId]: error\n        });\n      });\n    }\n\n    let updatedFetchers = markFetchRedirectsDone();\n    let didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);\n    let shouldUpdateFetchers = updatedFetchers || didAbortFetchLoads || revalidatingFetchers.length > 0;\n    return _extends({\n      matches,\n      loaderData,\n      errors\n    }, shouldUpdateFetchers ? {\n      fetchers: new Map(state.fetchers)\n    } : {});\n  }\n\n  function getUpdatedActionData(pendingActionResult) {\n    if (pendingActionResult && !isErrorResult(pendingActionResult[1])) {\n      // This is cast to `any` currently because `RouteData`uses any and it\n      // would be a breaking change to use any.\n      // TODO: v7 - change `RouteData` to use `unknown` instead of `any`\n      return {\n        [pendingActionResult[0]]: pendingActionResult[1].data\n      };\n    } else if (state.actionData) {\n      if (Object.keys(state.actionData).length === 0) {\n        return null;\n      } else {\n        return state.actionData;\n      }\n    }\n  }\n\n  function getUpdatedRevalidatingFetchers(revalidatingFetchers) {\n    revalidatingFetchers.forEach(rf => {\n      let fetcher = state.fetchers.get(rf.key);\n      let revalidatingFetcher = getLoadingFetcher(undefined, fetcher ? fetcher.data : undefined);\n      state.fetchers.set(rf.key, revalidatingFetcher);\n    });\n    return new Map(state.fetchers);\n  } // Trigger a fetcher load/submit for the given fetcher key\n\n\n  function fetch(key, routeId, href, opts) {\n    if (isServer) {\n      throw new Error(\"router.fetch() was called during the server render, but it shouldn't be. \" + \"You are likely calling a useFetcher() method in the body of your component. \" + \"Try moving it to a useEffect or a callback.\");\n    }\n\n    if (fetchControllers.has(key)) abortFetcher(key);\n    let flushSync = (opts && opts.unstable_flushSync) === true;\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let normalizedPath = normalizeTo(state.location, state.matches, basename, future.v7_prependBasename, href, future.v7_relativeSplatPath, routeId, opts == null ? void 0 : opts.relative);\n    let matches = matchRoutes(routesToUse, normalizedPath, basename);\n    let fogOfWar = checkFogOfWar(matches, routesToUse, normalizedPath);\n\n    if (fogOfWar.active && fogOfWar.matches) {\n      matches = fogOfWar.matches;\n    }\n\n    if (!matches) {\n      setFetcherError(key, routeId, getInternalRouterError(404, {\n        pathname: normalizedPath\n      }), {\n        flushSync\n      });\n      return;\n    }\n\n    let {\n      path,\n      submission,\n      error\n    } = normalizeNavigateOptions(future.v7_normalizeFormMethod, true, normalizedPath, opts);\n\n    if (error) {\n      setFetcherError(key, routeId, error, {\n        flushSync\n      });\n      return;\n    }\n\n    let match = getTargetMatch(matches, path);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n\n    if (submission && isMutationMethod(submission.formMethod)) {\n      handleFetcherAction(key, routeId, path, match, matches, fogOfWar.active, flushSync, submission);\n      return;\n    } // Store off the match so we can call it's shouldRevalidate on subsequent\n    // revalidations\n\n\n    fetchLoadMatches.set(key, {\n      routeId,\n      path\n    });\n    handleFetcherLoader(key, routeId, path, match, matches, fogOfWar.active, flushSync, submission);\n  } // Call the action for the matched fetcher.submit(), and then handle redirects,\n  // errors, and revalidation\n\n\n  async function handleFetcherAction(key, routeId, path, match, requestMatches, isFogOfWar, flushSync, submission) {\n    interruptActiveLoads();\n    fetchLoadMatches.delete(key);\n\n    function detectAndHandle405Error(m) {\n      if (!m.route.action && !m.route.lazy) {\n        let error = getInternalRouterError(405, {\n          method: submission.formMethod,\n          pathname: path,\n          routeId: routeId\n        });\n        setFetcherError(key, routeId, error, {\n          flushSync\n        });\n        return true;\n      }\n\n      return false;\n    }\n\n    if (!isFogOfWar && detectAndHandle405Error(match)) {\n      return;\n    } // Put this fetcher into it's submitting state\n\n\n    let existingFetcher = state.fetchers.get(key);\n    updateFetcherState(key, getSubmittingFetcher(submission, existingFetcher), {\n      flushSync\n    });\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(init.history, path, abortController.signal, submission);\n\n    if (isFogOfWar) {\n      let discoverResult = await discoverRoutes(requestMatches, path, fetchRequest.signal);\n\n      if (discoverResult.type === \"aborted\") {\n        return;\n      } else if (discoverResult.type === \"error\") {\n        let {\n          error\n        } = handleDiscoverRouteError(path, discoverResult);\n        setFetcherError(key, routeId, error, {\n          flushSync\n        });\n        return;\n      } else if (!discoverResult.matches) {\n        setFetcherError(key, routeId, getInternalRouterError(404, {\n          pathname: path\n        }), {\n          flushSync\n        });\n        return;\n      } else {\n        requestMatches = discoverResult.matches;\n        match = getTargetMatch(requestMatches, path);\n\n        if (detectAndHandle405Error(match)) {\n          return;\n        }\n      }\n    } // Call the action for the fetcher\n\n\n    fetchControllers.set(key, abortController);\n    let originatingLoadId = incrementingLoadId;\n    let actionResults = await callDataStrategy(\"action\", state, fetchRequest, [match], requestMatches, key);\n    let actionResult = actionResults[match.route.id];\n\n    if (fetchRequest.signal.aborted) {\n      // We can delete this so long as we weren't aborted by our own fetcher\n      // re-submit which would have put _new_ controller is in fetchControllers\n      if (fetchControllers.get(key) === abortController) {\n        fetchControllers.delete(key);\n      }\n\n      return;\n    } // When using v7_fetcherPersist, we don't want errors bubbling up to the UI\n    // or redirects processed for unmounted fetchers so we just revert them to\n    // idle\n\n\n    if (future.v7_fetcherPersist && deletedFetchers.has(key)) {\n      if (isRedirectResult(actionResult) || isErrorResult(actionResult)) {\n        updateFetcherState(key, getDoneFetcher(undefined));\n        return;\n      } // Let SuccessResult's fall through for revalidation\n\n    } else {\n      if (isRedirectResult(actionResult)) {\n        fetchControllers.delete(key);\n\n        if (pendingNavigationLoadId > originatingLoadId) {\n          // A new navigation was kicked off after our action started, so that\n          // should take precedence over this redirect navigation.  We already\n          // set isRevalidationRequired so all loaders for the new route should\n          // fire unless opted out via shouldRevalidate\n          updateFetcherState(key, getDoneFetcher(undefined));\n          return;\n        } else {\n          fetchRedirectIds.add(key);\n          updateFetcherState(key, getLoadingFetcher(submission));\n          return startRedirectNavigation(fetchRequest, actionResult, false, {\n            fetcherSubmission: submission\n          });\n        }\n      } // Process any non-redirect errors thrown\n\n\n      if (isErrorResult(actionResult)) {\n        setFetcherError(key, routeId, actionResult.error);\n        return;\n      }\n    }\n\n    if (isDeferredResult(actionResult)) {\n      throw getInternalRouterError(400, {\n        type: \"defer-action\"\n      });\n    } // Start the data load for current matches, or the next location if we're\n    // in the middle of a navigation\n\n\n    let nextLocation = state.navigation.location || state.location;\n    let revalidationRequest = createClientSideRequest(init.history, nextLocation, abortController.signal);\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let matches = state.navigation.state !== \"idle\" ? matchRoutes(routesToUse, state.navigation.location, basename) : state.matches;\n    invariant(matches, \"Didn't find any matches after fetcher action\");\n    let loadId = ++incrementingLoadId;\n    fetchReloadIds.set(key, loadId);\n    let loadFetcher = getLoadingFetcher(submission, actionResult.data);\n    state.fetchers.set(key, loadFetcher);\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(init.history, state, matches, submission, nextLocation, false, future.v7_skipActionErrorRevalidation, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, deletedFetchers, fetchLoadMatches, fetchRedirectIds, routesToUse, basename, [match.route.id, actionResult]); // Put all revalidating fetchers into the loading state, except for the\n    // current fetcher which we want to keep in it's current loading state which\n    // contains it's action submission info + action data\n\n    revalidatingFetchers.filter(rf => rf.key !== key).forEach(rf => {\n      let staleKey = rf.key;\n      let existingFetcher = state.fetchers.get(staleKey);\n      let revalidatingFetcher = getLoadingFetcher(undefined, existingFetcher ? existingFetcher.data : undefined);\n      state.fetchers.set(staleKey, revalidatingFetcher);\n\n      if (fetchControllers.has(staleKey)) {\n        abortFetcher(staleKey);\n      }\n\n      if (rf.controller) {\n        fetchControllers.set(staleKey, rf.controller);\n      }\n    });\n    updateState({\n      fetchers: new Map(state.fetchers)\n    });\n\n    let abortPendingFetchRevalidations = () => revalidatingFetchers.forEach(rf => abortFetcher(rf.key));\n\n    abortController.signal.addEventListener(\"abort\", abortPendingFetchRevalidations);\n    let {\n      loaderResults,\n      fetcherResults\n    } = await callLoadersAndMaybeResolveData(state, matches, matchesToLoad, revalidatingFetchers, revalidationRequest);\n\n    if (abortController.signal.aborted) {\n      return;\n    }\n\n    abortController.signal.removeEventListener(\"abort\", abortPendingFetchRevalidations);\n    fetchReloadIds.delete(key);\n    fetchControllers.delete(key);\n    revalidatingFetchers.forEach(r => fetchControllers.delete(r.key));\n    let redirect = findRedirect(loaderResults);\n\n    if (redirect) {\n      return startRedirectNavigation(revalidationRequest, redirect.result, false);\n    }\n\n    redirect = findRedirect(fetcherResults);\n\n    if (redirect) {\n      // If this redirect came from a fetcher make sure we mark it in\n      // fetchRedirectIds so it doesn't get revalidated on the next set of\n      // loader executions\n      fetchRedirectIds.add(redirect.key);\n      return startRedirectNavigation(revalidationRequest, redirect.result, false);\n    } // Process and commit output from loaders\n\n\n    let {\n      loaderData,\n      errors\n    } = processLoaderData(state, matches, matchesToLoad, loaderResults, undefined, revalidatingFetchers, fetcherResults, activeDeferreds); // Since we let revalidations complete even if the submitting fetcher was\n    // deleted, only put it back to idle if it hasn't been deleted\n\n    if (state.fetchers.has(key)) {\n      let doneFetcher = getDoneFetcher(actionResult.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n\n    abortStaleFetchLoads(loadId); // If we are currently in a navigation loading state and this fetcher is\n    // more recent than the navigation, we want the newer data so abort the\n    // navigation and complete it with the fetcher data\n\n    if (state.navigation.state === \"loading\" && loadId > pendingNavigationLoadId) {\n      invariant(pendingAction, \"Expected pending action\");\n      pendingNavigationController && pendingNavigationController.abort();\n      completeNavigation(state.navigation.location, {\n        matches,\n        loaderData,\n        errors,\n        fetchers: new Map(state.fetchers)\n      });\n    } else {\n      // otherwise just update with the fetcher data, preserving any existing\n      // loaderData for loaders that did not need to reload.  We have to\n      // manually merge here since we aren't going through completeNavigation\n      updateState({\n        errors,\n        loaderData: mergeLoaderData(state.loaderData, loaderData, matches, errors),\n        fetchers: new Map(state.fetchers)\n      });\n      isRevalidationRequired = false;\n    }\n  } // Call the matched loader for fetcher.load(), handling redirects, errors, etc.\n\n\n  async function handleFetcherLoader(key, routeId, path, match, matches, isFogOfWar, flushSync, submission) {\n    let existingFetcher = state.fetchers.get(key);\n    updateFetcherState(key, getLoadingFetcher(submission, existingFetcher ? existingFetcher.data : undefined), {\n      flushSync\n    });\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(init.history, path, abortController.signal);\n\n    if (isFogOfWar) {\n      let discoverResult = await discoverRoutes(matches, path, fetchRequest.signal);\n\n      if (discoverResult.type === \"aborted\") {\n        return;\n      } else if (discoverResult.type === \"error\") {\n        let {\n          error\n        } = handleDiscoverRouteError(path, discoverResult);\n        setFetcherError(key, routeId, error, {\n          flushSync\n        });\n        return;\n      } else if (!discoverResult.matches) {\n        setFetcherError(key, routeId, getInternalRouterError(404, {\n          pathname: path\n        }), {\n          flushSync\n        });\n        return;\n      } else {\n        matches = discoverResult.matches;\n        match = getTargetMatch(matches, path);\n      }\n    } // Call the loader for this fetcher route match\n\n\n    fetchControllers.set(key, abortController);\n    let originatingLoadId = incrementingLoadId;\n    let results = await callDataStrategy(\"loader\", state, fetchRequest, [match], matches, key);\n    let result = results[match.route.id]; // Deferred isn't supported for fetcher loads, await everything and treat it\n    // as a normal load.  resolveDeferredData will return undefined if this\n    // fetcher gets aborted, so we just leave result untouched and short circuit\n    // below if that happens\n\n    if (isDeferredResult(result)) {\n      result = (await resolveDeferredData(result, fetchRequest.signal, true)) || result;\n    } // We can delete this so long as we weren't aborted by our our own fetcher\n    // re-load which would have put _new_ controller is in fetchControllers\n\n\n    if (fetchControllers.get(key) === abortController) {\n      fetchControllers.delete(key);\n    }\n\n    if (fetchRequest.signal.aborted) {\n      return;\n    } // We don't want errors bubbling up or redirects followed for unmounted\n    // fetchers, so short circuit here if it was removed from the UI\n\n\n    if (deletedFetchers.has(key)) {\n      updateFetcherState(key, getDoneFetcher(undefined));\n      return;\n    } // If the loader threw a redirect Response, start a new REPLACE navigation\n\n\n    if (isRedirectResult(result)) {\n      if (pendingNavigationLoadId > originatingLoadId) {\n        // A new navigation was kicked off after our loader started, so that\n        // should take precedence over this redirect navigation\n        updateFetcherState(key, getDoneFetcher(undefined));\n        return;\n      } else {\n        fetchRedirectIds.add(key);\n        await startRedirectNavigation(fetchRequest, result, false);\n        return;\n      }\n    } // Process any non-redirect errors thrown\n\n\n    if (isErrorResult(result)) {\n      setFetcherError(key, routeId, result.error);\n      return;\n    }\n\n    invariant(!isDeferredResult(result), \"Unhandled fetcher deferred data\"); // Put the fetcher back into an idle state\n\n    updateFetcherState(key, getDoneFetcher(result.data));\n  }\n  /**\n   * Utility function to handle redirects returned from an action or loader.\n   * Normally, a redirect \"replaces\" the navigation that triggered it.  So, for\n   * example:\n   *\n   *  - user is on /a\n   *  - user clicks a link to /b\n   *  - loader for /b redirects to /c\n   *\n   * In a non-JS app the browser would track the in-flight navigation to /b and\n   * then replace it with /c when it encountered the redirect response.  In\n   * the end it would only ever update the URL bar with /c.\n   *\n   * In client-side routing using pushState/replaceState, we aim to emulate\n   * this behavior and we also do not update history until the end of the\n   * navigation (including processed redirects).  This means that we never\n   * actually touch history until we've processed redirects, so we just use\n   * the history action from the original navigation (PUSH or REPLACE).\n   */\n\n\n  async function startRedirectNavigation(request, redirect, isNavigation, _temp2) {\n    let {\n      submission,\n      fetcherSubmission,\n      replace\n    } = _temp2 === void 0 ? {} : _temp2;\n\n    if (redirect.response.headers.has(\"X-Remix-Revalidate\")) {\n      isRevalidationRequired = true;\n    }\n\n    let location = redirect.response.headers.get(\"Location\");\n    invariant(location, \"Expected a Location header on the redirect Response\");\n    location = normalizeRedirectLocation(location, new URL(request.url), basename);\n    let redirectLocation = createLocation(state.location, location, {\n      _isRedirect: true\n    });\n\n    if (isBrowser) {\n      let isDocumentReload = false;\n\n      if (redirect.response.headers.has(\"X-Remix-Reload-Document\")) {\n        // Hard reload if the response contained X-Remix-Reload-Document\n        isDocumentReload = true;\n      } else if (ABSOLUTE_URL_REGEX.test(location)) {\n        const url = init.history.createURL(location);\n        isDocumentReload = // Hard reload if it's an absolute URL to a new origin\n        url.origin !== routerWindow.location.origin || // Hard reload if it's an absolute URL that does not match our basename\n        stripBasename(url.pathname, basename) == null;\n      }\n\n      if (isDocumentReload) {\n        if (replace) {\n          routerWindow.location.replace(location);\n        } else {\n          routerWindow.location.assign(location);\n        }\n\n        return;\n      }\n    } // There's no need to abort on redirects, since we don't detect the\n    // redirect until the action/loaders have settled\n\n\n    pendingNavigationController = null;\n    let redirectHistoryAction = replace === true || redirect.response.headers.has(\"X-Remix-Replace\") ? Action.Replace : Action.Push; // Use the incoming submission if provided, fallback on the active one in\n    // state.navigation\n\n    let {\n      formMethod,\n      formAction,\n      formEncType\n    } = state.navigation;\n\n    if (!submission && !fetcherSubmission && formMethod && formAction && formEncType) {\n      submission = getSubmissionFromNavigation(state.navigation);\n    } // If this was a 307/308 submission we want to preserve the HTTP method and\n    // re-submit the GET/POST/PUT/PATCH/DELETE as a submission navigation to the\n    // redirected location\n\n\n    let activeSubmission = submission || fetcherSubmission;\n\n    if (redirectPreserveMethodStatusCodes.has(redirect.response.status) && activeSubmission && isMutationMethod(activeSubmission.formMethod)) {\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        submission: _extends({}, activeSubmission, {\n          formAction: location\n        }),\n        // Preserve these flags across redirects\n        preventScrollReset: pendingPreventScrollReset,\n        enableViewTransition: isNavigation ? pendingViewTransitionEnabled : undefined\n      });\n    } else {\n      // If we have a navigation submission, we will preserve it through the\n      // redirect navigation\n      let overrideNavigation = getLoadingNavigation(redirectLocation, submission);\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        overrideNavigation,\n        // Send fetcher submissions through for shouldRevalidate\n        fetcherSubmission,\n        // Preserve these flags across redirects\n        preventScrollReset: pendingPreventScrollReset,\n        enableViewTransition: isNavigation ? pendingViewTransitionEnabled : undefined\n      });\n    }\n  } // Utility wrapper for calling dataStrategy client-side without having to\n  // pass around the manifest, mapRouteProperties, etc.\n\n\n  async function callDataStrategy(type, state, request, matchesToLoad, matches, fetcherKey) {\n    let results;\n    let dataResults = {};\n\n    try {\n      results = await callDataStrategyImpl(dataStrategyImpl, type, state, request, matchesToLoad, matches, fetcherKey, manifest, mapRouteProperties);\n    } catch (e) {\n      // If the outer dataStrategy method throws, just return the error for all\n      // matches - and it'll naturally bubble to the root\n      matchesToLoad.forEach(m => {\n        dataResults[m.route.id] = {\n          type: ResultType.error,\n          error: e\n        };\n      });\n      return dataResults;\n    }\n\n    for (let [routeId, result] of Object.entries(results)) {\n      if (isRedirectDataStrategyResultResult(result)) {\n        let response = result.result;\n        dataResults[routeId] = {\n          type: ResultType.redirect,\n          response: normalizeRelativeRoutingRedirectResponse(response, request, routeId, matches, basename, future.v7_relativeSplatPath)\n        };\n      } else {\n        dataResults[routeId] = await convertDataStrategyResultToDataResult(result);\n      }\n    }\n\n    return dataResults;\n  }\n\n  async function callLoadersAndMaybeResolveData(state, matches, matchesToLoad, fetchersToLoad, request) {\n    let currentMatches = state.matches; // Kick off loaders and fetchers in parallel\n\n    let loaderResultsPromise = callDataStrategy(\"loader\", state, request, matchesToLoad, matches, null);\n    let fetcherResultsPromise = Promise.all(fetchersToLoad.map(async f => {\n      if (f.matches && f.match && f.controller) {\n        let results = await callDataStrategy(\"loader\", state, createClientSideRequest(init.history, f.path, f.controller.signal), [f.match], f.matches, f.key);\n        let result = results[f.match.route.id]; // Fetcher results are keyed by fetcher key from here on out, not routeId\n\n        return {\n          [f.key]: result\n        };\n      } else {\n        return Promise.resolve({\n          [f.key]: {\n            type: ResultType.error,\n            error: getInternalRouterError(404, {\n              pathname: f.path\n            })\n          }\n        });\n      }\n    }));\n    let loaderResults = await loaderResultsPromise;\n    let fetcherResults = (await fetcherResultsPromise).reduce((acc, r) => Object.assign(acc, r), {});\n    await Promise.all([resolveNavigationDeferredResults(matches, loaderResults, request.signal, currentMatches, state.loaderData), resolveFetcherDeferredResults(matches, fetcherResults, fetchersToLoad)]);\n    return {\n      loaderResults,\n      fetcherResults\n    };\n  }\n\n  function interruptActiveLoads() {\n    // Every interruption triggers a revalidation\n    isRevalidationRequired = true; // Cancel pending route-level deferreds and mark cancelled routes for\n    // revalidation\n\n    cancelledDeferredRoutes.push(...cancelActiveDeferreds()); // Abort in-flight fetcher loads\n\n    fetchLoadMatches.forEach((_, key) => {\n      if (fetchControllers.has(key)) {\n        cancelledFetcherLoads.add(key);\n        abortFetcher(key);\n      }\n    });\n  }\n\n  function updateFetcherState(key, fetcher, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n\n    state.fetchers.set(key, fetcher);\n    updateState({\n      fetchers: new Map(state.fetchers)\n    }, {\n      flushSync: (opts && opts.flushSync) === true\n    });\n  }\n\n  function setFetcherError(key, routeId, error, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n\n    let boundaryMatch = findNearestBoundary(state.matches, routeId);\n    deleteFetcher(key);\n    updateState({\n      errors: {\n        [boundaryMatch.route.id]: error\n      },\n      fetchers: new Map(state.fetchers)\n    }, {\n      flushSync: (opts && opts.flushSync) === true\n    });\n  }\n\n  function getFetcher(key) {\n    if (future.v7_fetcherPersist) {\n      activeFetchers.set(key, (activeFetchers.get(key) || 0) + 1); // If this fetcher was previously marked for deletion, unmark it since we\n      // have a new instance\n\n      if (deletedFetchers.has(key)) {\n        deletedFetchers.delete(key);\n      }\n    }\n\n    return state.fetchers.get(key) || IDLE_FETCHER;\n  }\n\n  function deleteFetcher(key) {\n    let fetcher = state.fetchers.get(key); // Don't abort the controller if this is a deletion of a fetcher.submit()\n    // in it's loading phase since - we don't want to abort the corresponding\n    // revalidation and want them to complete and land\n\n    if (fetchControllers.has(key) && !(fetcher && fetcher.state === \"loading\" && fetchReloadIds.has(key))) {\n      abortFetcher(key);\n    }\n\n    fetchLoadMatches.delete(key);\n    fetchReloadIds.delete(key);\n    fetchRedirectIds.delete(key);\n    deletedFetchers.delete(key);\n    cancelledFetcherLoads.delete(key);\n    state.fetchers.delete(key);\n  }\n\n  function deleteFetcherAndUpdateState(key) {\n    if (future.v7_fetcherPersist) {\n      let count = (activeFetchers.get(key) || 0) - 1;\n\n      if (count <= 0) {\n        activeFetchers.delete(key);\n        deletedFetchers.add(key);\n      } else {\n        activeFetchers.set(key, count);\n      }\n    } else {\n      deleteFetcher(key);\n    }\n\n    updateState({\n      fetchers: new Map(state.fetchers)\n    });\n  }\n\n  function abortFetcher(key) {\n    let controller = fetchControllers.get(key);\n    invariant(controller, \"Expected fetch controller: \" + key);\n    controller.abort();\n    fetchControllers.delete(key);\n  }\n\n  function markFetchersDone(keys) {\n    for (let key of keys) {\n      let fetcher = getFetcher(key);\n      let doneFetcher = getDoneFetcher(fetcher.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  function markFetchRedirectsDone() {\n    let doneKeys = [];\n    let updatedFetchers = false;\n\n    for (let key of fetchRedirectIds) {\n      let fetcher = state.fetchers.get(key);\n      invariant(fetcher, \"Expected fetcher: \" + key);\n\n      if (fetcher.state === \"loading\") {\n        fetchRedirectIds.delete(key);\n        doneKeys.push(key);\n        updatedFetchers = true;\n      }\n    }\n\n    markFetchersDone(doneKeys);\n    return updatedFetchers;\n  }\n\n  function abortStaleFetchLoads(landedId) {\n    let yeetedKeys = [];\n\n    for (let [key, id] of fetchReloadIds) {\n      if (id < landedId) {\n        let fetcher = state.fetchers.get(key);\n        invariant(fetcher, \"Expected fetcher: \" + key);\n\n        if (fetcher.state === \"loading\") {\n          abortFetcher(key);\n          fetchReloadIds.delete(key);\n          yeetedKeys.push(key);\n        }\n      }\n    }\n\n    markFetchersDone(yeetedKeys);\n    return yeetedKeys.length > 0;\n  }\n\n  function getBlocker(key, fn) {\n    let blocker = state.blockers.get(key) || IDLE_BLOCKER;\n\n    if (blockerFunctions.get(key) !== fn) {\n      blockerFunctions.set(key, fn);\n    }\n\n    return blocker;\n  }\n\n  function deleteBlocker(key) {\n    state.blockers.delete(key);\n    blockerFunctions.delete(key);\n  } // Utility function to update blockers, ensuring valid state transitions\n\n\n  function updateBlocker(key, newBlocker) {\n    let blocker = state.blockers.get(key) || IDLE_BLOCKER; // Poor mans state machine :)\n    // https://mermaid.live/edit#pako:eNqVkc9OwzAMxl8l8nnjAYrEtDIOHEBIgwvKJTReGy3_lDpIqO27k6awMG0XcrLlnz87nwdonESogKXXBuE79rq75XZO3-yHds0RJVuv70YrPlUrCEe2HfrORS3rubqZfuhtpg5C9wk5tZ4VKcRUq88q9Z8RS0-48cE1iHJkL0ugbHuFLus9L6spZy8nX9MP2CNdomVaposqu3fGayT8T8-jJQwhepo_UtpgBQaDEUom04dZhAN1aJBDlUKJBxE1ceB2Smj0Mln-IBW5AFU2dwUiktt_2Qaq2dBfaKdEup85UV7Yd-dKjlnkabl2Pvr0DTkTreM\n\n    invariant(blocker.state === \"unblocked\" && newBlocker.state === \"blocked\" || blocker.state === \"blocked\" && newBlocker.state === \"blocked\" || blocker.state === \"blocked\" && newBlocker.state === \"proceeding\" || blocker.state === \"blocked\" && newBlocker.state === \"unblocked\" || blocker.state === \"proceeding\" && newBlocker.state === \"unblocked\", \"Invalid blocker state transition: \" + blocker.state + \" -> \" + newBlocker.state);\n    let blockers = new Map(state.blockers);\n    blockers.set(key, newBlocker);\n    updateState({\n      blockers\n    });\n  }\n\n  function shouldBlockNavigation(_ref4) {\n    let {\n      currentLocation,\n      nextLocation,\n      historyAction\n    } = _ref4;\n\n    if (blockerFunctions.size === 0) {\n      return;\n    } // We ony support a single active blocker at the moment since we don't have\n    // any compelling use cases for multi-blocker yet\n\n\n    if (blockerFunctions.size > 1) {\n      warning(false, \"A router only supports one blocker at a time\");\n    }\n\n    let entries = Array.from(blockerFunctions.entries());\n    let [blockerKey, blockerFunction] = entries[entries.length - 1];\n    let blocker = state.blockers.get(blockerKey);\n\n    if (blocker && blocker.state === \"proceeding\") {\n      // If the blocker is currently proceeding, we don't need to re-check\n      // it and can let this navigation continue\n      return;\n    } // At this point, we know we're unblocked/blocked so we need to check the\n    // user-provided blocker function\n\n\n    if (blockerFunction({\n      currentLocation,\n      nextLocation,\n      historyAction\n    })) {\n      return blockerKey;\n    }\n  }\n\n  function handleNavigational404(pathname) {\n    let error = getInternalRouterError(404, {\n      pathname\n    });\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let {\n      matches,\n      route\n    } = getShortCircuitMatches(routesToUse); // Cancel all pending deferred on 404s since we don't keep any routes\n\n    cancelActiveDeferreds();\n    return {\n      notFoundMatches: matches,\n      route,\n      error\n    };\n  }\n\n  function handleDiscoverRouteError(pathname, discoverResult) {\n    return {\n      boundaryId: findNearestBoundary(discoverResult.partialMatches).route.id,\n      error: getInternalRouterError(400, {\n        type: \"route-discovery\",\n        pathname,\n        message: discoverResult.error != null && \"message\" in discoverResult.error ? discoverResult.error : String(discoverResult.error)\n      })\n    };\n  }\n\n  function cancelActiveDeferreds(predicate) {\n    let cancelledRouteIds = [];\n    activeDeferreds.forEach((dfd, routeId) => {\n      if (!predicate || predicate(routeId)) {\n        // Cancel the deferred - but do not remove from activeDeferreds here -\n        // we rely on the subscribers to do that so our tests can assert proper\n        // cleanup via _internalActiveDeferreds\n        dfd.cancel();\n        cancelledRouteIds.push(routeId);\n        activeDeferreds.delete(routeId);\n      }\n    });\n    return cancelledRouteIds;\n  } // Opt in to capturing and reporting scroll positions during navigations,\n  // used by the <ScrollRestoration> component\n\n\n  function enableScrollRestoration(positions, getPosition, getKey) {\n    savedScrollPositions = positions;\n    getScrollPosition = getPosition;\n    getScrollRestorationKey = getKey || null; // Perform initial hydration scroll restoration, since we miss the boat on\n    // the initial updateState() because we've not yet rendered <ScrollRestoration/>\n    // and therefore have no savedScrollPositions available\n\n    if (!initialScrollRestored && state.navigation === IDLE_NAVIGATION) {\n      initialScrollRestored = true;\n      let y = getSavedScrollPosition(state.location, state.matches);\n\n      if (y != null) {\n        updateState({\n          restoreScrollPosition: y\n        });\n      }\n    }\n\n    return () => {\n      savedScrollPositions = null;\n      getScrollPosition = null;\n      getScrollRestorationKey = null;\n    };\n  }\n\n  function getScrollKey(location, matches) {\n    if (getScrollRestorationKey) {\n      let key = getScrollRestorationKey(location, matches.map(m => convertRouteMatchToUiMatch(m, state.loaderData)));\n      return key || location.key;\n    }\n\n    return location.key;\n  }\n\n  function saveScrollPosition(location, matches) {\n    if (savedScrollPositions && getScrollPosition) {\n      let key = getScrollKey(location, matches);\n      savedScrollPositions[key] = getScrollPosition();\n    }\n  }\n\n  function getSavedScrollPosition(location, matches) {\n    if (savedScrollPositions) {\n      let key = getScrollKey(location, matches);\n      let y = savedScrollPositions[key];\n\n      if (typeof y === \"number\") {\n        return y;\n      }\n    }\n\n    return null;\n  }\n\n  function checkFogOfWar(matches, routesToUse, pathname) {\n    if (patchRoutesOnNavigationImpl) {\n      // Don't bother re-calling patchRouteOnMiss for a path we've already\n      // processed.  the last execution would have patched the route tree\n      // accordingly so `matches` here are already accurate.\n      if (discoveredRoutes.has(pathname)) {\n        return {\n          active: false,\n          matches\n        };\n      }\n\n      if (!matches) {\n        let fogMatches = matchRoutesImpl(routesToUse, pathname, basename, true);\n        return {\n          active: true,\n          matches: fogMatches || []\n        };\n      } else {\n        if (Object.keys(matches[0].params).length > 0) {\n          // If we matched a dynamic param or a splat, it might only be because\n          // we haven't yet discovered other routes that would match with a\n          // higher score.  Call patchRoutesOnNavigation just to be sure\n          let partialMatches = matchRoutesImpl(routesToUse, pathname, basename, true);\n          return {\n            active: true,\n            matches: partialMatches\n          };\n        }\n      }\n    }\n\n    return {\n      active: false,\n      matches: null\n    };\n  }\n\n  async function discoverRoutes(matches, pathname, signal) {\n    let partialMatches = matches;\n\n    while (true) {\n      let isNonHMR = inFlightDataRoutes == null;\n      let routesToUse = inFlightDataRoutes || dataRoutes;\n\n      try {\n        await loadLazyRouteChildren(patchRoutesOnNavigationImpl, pathname, partialMatches, routesToUse, manifest, mapRouteProperties, pendingPatchRoutes, signal);\n      } catch (e) {\n        return {\n          type: \"error\",\n          error: e,\n          partialMatches\n        };\n      } finally {\n        // If we are not in the middle of an HMR revalidation and we changed the\n        // routes, provide a new identity so when we `updateState` at the end of\n        // this navigation/fetch `router.routes` will be a new identity and\n        // trigger a re-run of memoized `router.routes` dependencies.\n        // HMR will already update the identity and reflow when it lands\n        // `inFlightDataRoutes` in `completeNavigation`\n        if (isNonHMR) {\n          dataRoutes = [...dataRoutes];\n        }\n      }\n\n      if (signal.aborted) {\n        return {\n          type: \"aborted\"\n        };\n      }\n\n      let newMatches = matchRoutes(routesToUse, pathname, basename);\n\n      if (newMatches) {\n        addToFifoQueue(pathname, discoveredRoutes);\n        return {\n          type: \"success\",\n          matches: newMatches\n        };\n      }\n\n      let newPartialMatches = matchRoutesImpl(routesToUse, pathname, basename, true); // Avoid loops if the second pass results in the same partial matches\n\n      if (!newPartialMatches || partialMatches.length === newPartialMatches.length && partialMatches.every((m, i) => m.route.id === newPartialMatches[i].route.id)) {\n        addToFifoQueue(pathname, discoveredRoutes);\n        return {\n          type: \"success\",\n          matches: null\n        };\n      }\n\n      partialMatches = newPartialMatches;\n    }\n  }\n\n  function addToFifoQueue(path, queue) {\n    if (queue.size >= discoveredRoutesMaxSize) {\n      let first = queue.values().next().value;\n      queue.delete(first);\n    }\n\n    queue.add(path);\n  }\n\n  function _internalSetRoutes(newRoutes) {\n    manifest = {};\n    inFlightDataRoutes = convertRoutesToDataRoutes(newRoutes, mapRouteProperties, undefined, manifest);\n  }\n\n  function patchRoutes(routeId, children) {\n    let isNonHMR = inFlightDataRoutes == null;\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    patchRoutesImpl(routeId, children, routesToUse, manifest, mapRouteProperties); // If we are not in the middle of an HMR revalidation and we changed the\n    // routes, provide a new identity and trigger a reflow via `updateState`\n    // to re-run memoized `router.routes` dependencies.\n    // HMR will already update the identity and reflow when it lands\n    // `inFlightDataRoutes` in `completeNavigation`\n\n    if (isNonHMR) {\n      dataRoutes = [...dataRoutes];\n      updateState({});\n    }\n  }\n\n  router = {\n    get basename() {\n      return basename;\n    },\n\n    get future() {\n      return future;\n    },\n\n    get state() {\n      return state;\n    },\n\n    get routes() {\n      return dataRoutes;\n    },\n\n    get window() {\n      return routerWindow;\n    },\n\n    initialize,\n    subscribe,\n    enableScrollRestoration,\n    navigate,\n    fetch,\n    revalidate,\n    // Passthrough to history-aware createHref used by useHref so we get proper\n    // hash-aware URLs in DOM paths\n    createHref: to => init.history.createHref(to),\n    encodeLocation: to => init.history.encodeLocation(to),\n    getFetcher,\n    deleteFetcher: deleteFetcherAndUpdateState,\n    dispose,\n    getBlocker,\n    deleteBlocker,\n    patchRoutes,\n    _internalFetchControllers: fetchControllers,\n    _internalActiveDeferreds: activeDeferreds,\n    // TODO: Remove setRoutes, it's temporary to avoid dealing with\n    // updating the tree while validating the update algorithm.\n    _internalSetRoutes\n  };\n  return router;\n} //#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region createStaticHandler\n////////////////////////////////////////////////////////////////////////////////\n\n\nconst UNSAFE_DEFERRED_SYMBOL = Symbol(\"deferred\");\n\nfunction createStaticHandler(routes, opts) {\n  invariant(routes.length > 0, \"You must provide a non-empty routes array to createStaticHandler\");\n  let manifest = {};\n  let basename = (opts ? opts.basename : null) || \"/\";\n  let mapRouteProperties;\n\n  if (opts != null && opts.mapRouteProperties) {\n    mapRouteProperties = opts.mapRouteProperties;\n  } else if (opts != null && opts.detectErrorBoundary) {\n    // If they are still using the deprecated version, wrap it with the new API\n    let detectErrorBoundary = opts.detectErrorBoundary;\n\n    mapRouteProperties = route => ({\n      hasErrorBoundary: detectErrorBoundary(route)\n    });\n  } else {\n    mapRouteProperties = defaultMapRouteProperties;\n  } // Config driven behavior flags\n\n\n  let future = _extends({\n    v7_relativeSplatPath: false,\n    v7_throwAbortReason: false\n  }, opts ? opts.future : null);\n\n  let dataRoutes = convertRoutesToDataRoutes(routes, mapRouteProperties, undefined, manifest);\n  /**\n   * The query() method is intended for document requests, in which we want to\n   * call an optional action and potentially multiple loaders for all nested\n   * routes.  It returns a StaticHandlerContext object, which is very similar\n   * to the router state (location, loaderData, actionData, errors, etc.) and\n   * also adds SSR-specific information such as the statusCode and headers\n   * from action/loaders Responses.\n   *\n   * It _should_ never throw and should report all errors through the\n   * returned context.errors object, properly associating errors to their error\n   * boundary.  Additionally, it tracks _deepestRenderedBoundaryId which can be\n   * used to emulate React error boundaries during SSr by performing a second\n   * pass only down to the boundaryId.\n   *\n   * The one exception where we do not return a StaticHandlerContext is when a\n   * redirect response is returned or thrown from any action/loader.  We\n   * propagate that out and return the raw Response so the HTTP server can\n   * return it directly.\n   *\n   * - `opts.requestContext` is an optional server context that will be passed\n   *   to actions/loaders in the `context` parameter\n   * - `opts.skipLoaderErrorBubbling` is an optional parameter that will prevent\n   *   the bubbling of errors which allows single-fetch-type implementations\n   *   where the client will handle the bubbling and we may need to return data\n   *   for the handling route\n   */\n\n  async function query(request, _temp3) {\n    let {\n      requestContext,\n      skipLoaderErrorBubbling,\n      unstable_dataStrategy\n    } = _temp3 === void 0 ? {} : _temp3;\n    let url = new URL(request.url);\n    let method = request.method;\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename); // SSR supports HEAD requests while SPA doesn't\n\n    if (!isValidMethod(method) && method !== \"HEAD\") {\n      let error = getInternalRouterError(405, {\n        method\n      });\n      let {\n        matches: methodNotAllowedMatches,\n        route\n      } = getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: methodNotAllowedMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null\n      };\n    } else if (!matches) {\n      let error = getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n      let {\n        matches: notFoundMatches,\n        route\n      } = getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: notFoundMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null\n      };\n    }\n\n    let result = await queryImpl(request, location, matches, requestContext, unstable_dataStrategy || null, skipLoaderErrorBubbling === true, null);\n\n    if (isResponse(result)) {\n      return result;\n    } // When returning StaticHandlerContext, we patch back in the location here\n    // since we need it for React Context.  But this helps keep our submit and\n    // loadRouteData operating on a Request instead of a Location\n\n\n    return _extends({\n      location,\n      basename\n    }, result);\n  }\n  /**\n   * The queryRoute() method is intended for targeted route requests, either\n   * for fetch ?_data requests or resource route requests.  In this case, we\n   * are only ever calling a single action or loader, and we are returning the\n   * returned value directly.  In most cases, this will be a Response returned\n   * from the action/loader, but it may be a primitive or other value as well -\n   * and in such cases the calling context should handle that accordingly.\n   *\n   * We do respect the throw/return differentiation, so if an action/loader\n   * throws, then this method will throw the value.  This is important so we\n   * can do proper boundary identification in Remix where a thrown Response\n   * must go to the Catch Boundary but a returned Response is happy-path.\n   *\n   * One thing to note is that any Router-initiated Errors that make sense\n   * to associate with a status code will be thrown as an ErrorResponse\n   * instance which include the raw Error, such that the calling context can\n   * serialize the error as they see fit while including the proper response\n   * code.  Examples here are 404 and 405 errors that occur prior to reaching\n   * any user-defined loaders.\n   *\n   * - `opts.routeId` allows you to specify the specific route handler to call.\n   *   If not provided the handler will determine the proper route by matching\n   *   against `request.url`\n   * - `opts.requestContext` is an optional server context that will be passed\n   *    to actions/loaders in the `context` parameter\n   */\n\n\n  async function queryRoute(request, _temp4) {\n    let {\n      routeId,\n      requestContext,\n      unstable_dataStrategy\n    } = _temp4 === void 0 ? {} : _temp4;\n    let url = new URL(request.url);\n    let method = request.method;\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename); // SSR supports HEAD requests while SPA doesn't\n\n    if (!isValidMethod(method) && method !== \"HEAD\" && method !== \"OPTIONS\") {\n      throw getInternalRouterError(405, {\n        method\n      });\n    } else if (!matches) {\n      throw getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n    }\n\n    let match = routeId ? matches.find(m => m.route.id === routeId) : getTargetMatch(matches, location);\n\n    if (routeId && !match) {\n      throw getInternalRouterError(403, {\n        pathname: location.pathname,\n        routeId\n      });\n    } else if (!match) {\n      // This should never hit I don't think?\n      throw getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n    }\n\n    let result = await queryImpl(request, location, matches, requestContext, unstable_dataStrategy || null, false, match);\n\n    if (isResponse(result)) {\n      return result;\n    }\n\n    let error = result.errors ? Object.values(result.errors)[0] : undefined;\n\n    if (error !== undefined) {\n      // If we got back result.errors, that means the loader/action threw\n      // _something_ that wasn't a Response, but it's not guaranteed/required\n      // to be an `instanceof Error` either, so we have to use throw here to\n      // preserve the \"error\" state outside of queryImpl.\n      throw error;\n    } // Pick off the right state value to return\n\n\n    if (result.actionData) {\n      return Object.values(result.actionData)[0];\n    }\n\n    if (result.loaderData) {\n      var _result$activeDeferre;\n\n      let data = Object.values(result.loaderData)[0];\n\n      if ((_result$activeDeferre = result.activeDeferreds) != null && _result$activeDeferre[match.route.id]) {\n        data[UNSAFE_DEFERRED_SYMBOL] = result.activeDeferreds[match.route.id];\n      }\n\n      return data;\n    }\n\n    return undefined;\n  }\n\n  async function queryImpl(request, location, matches, requestContext, unstable_dataStrategy, skipLoaderErrorBubbling, routeMatch) {\n    invariant(request.signal, \"query()/queryRoute() requests must contain an AbortController signal\");\n\n    try {\n      if (isMutationMethod(request.method.toLowerCase())) {\n        let result = await submit(request, matches, routeMatch || getTargetMatch(matches, location), requestContext, unstable_dataStrategy, skipLoaderErrorBubbling, routeMatch != null);\n        return result;\n      }\n\n      let result = await loadRouteData(request, matches, requestContext, unstable_dataStrategy, skipLoaderErrorBubbling, routeMatch);\n      return isResponse(result) ? result : _extends({}, result, {\n        actionData: null,\n        actionHeaders: {}\n      });\n    } catch (e) {\n      // If the user threw/returned a Response in callLoaderOrAction for a\n      // `queryRoute` call, we throw the `DataStrategyResult` to bail out early\n      // and then return or throw the raw Response here accordingly\n      if (isDataStrategyResult(e) && isResponse(e.result)) {\n        if (e.type === ResultType.error) {\n          throw e.result;\n        }\n\n        return e.result;\n      } // Redirects are always returned since they don't propagate to catch\n      // boundaries\n\n\n      if (isRedirectResponse(e)) {\n        return e;\n      }\n\n      throw e;\n    }\n  }\n\n  async function submit(request, matches, actionMatch, requestContext, unstable_dataStrategy, skipLoaderErrorBubbling, isRouteRequest) {\n    let result;\n\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      let error = getInternalRouterError(405, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: actionMatch.route.id\n      });\n\n      if (isRouteRequest) {\n        throw error;\n      }\n\n      result = {\n        type: ResultType.error,\n        error\n      };\n    } else {\n      let results = await callDataStrategy(\"action\", request, [actionMatch], matches, isRouteRequest, requestContext, unstable_dataStrategy);\n      result = results[actionMatch.route.id];\n\n      if (request.signal.aborted) {\n        throwStaticHandlerAbortedError(request, isRouteRequest, future);\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      // Uhhhh - this should never happen, we should always throw these from\n      // callLoaderOrAction, but the type narrowing here keeps TS happy and we\n      // can get back on the \"throw all redirect responses\" train here should\n      // this ever happen :/\n      throw new Response(null, {\n        status: result.response.status,\n        headers: {\n          Location: result.response.headers.get(\"Location\")\n        }\n      });\n    }\n\n    if (isDeferredResult(result)) {\n      let error = getInternalRouterError(400, {\n        type: \"defer-action\"\n      });\n\n      if (isRouteRequest) {\n        throw error;\n      }\n\n      result = {\n        type: ResultType.error,\n        error\n      };\n    }\n\n    if (isRouteRequest) {\n      // Note: This should only be non-Response values if we get here, since\n      // isRouteRequest should throw any Response received in callLoaderOrAction\n      if (isErrorResult(result)) {\n        throw result.error;\n      }\n\n      return {\n        matches: [actionMatch],\n        loaderData: {},\n        actionData: {\n          [actionMatch.route.id]: result.data\n        },\n        errors: null,\n        // Note: statusCode + headers are unused here since queryRoute will\n        // return the raw Response or value\n        statusCode: 200,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null\n      };\n    } // Create a GET request for the loaders\n\n\n    let loaderRequest = new Request(request.url, {\n      headers: request.headers,\n      redirect: request.redirect,\n      signal: request.signal\n    });\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = skipLoaderErrorBubbling ? actionMatch : findNearestBoundary(matches, actionMatch.route.id);\n      let context = await loadRouteData(loaderRequest, matches, requestContext, unstable_dataStrategy, skipLoaderErrorBubbling, null, [boundaryMatch.route.id, result]); // action status codes take precedence over loader status codes\n\n      return _extends({}, context, {\n        statusCode: isRouteErrorResponse(result.error) ? result.error.status : result.statusCode != null ? result.statusCode : 500,\n        actionData: null,\n        actionHeaders: _extends({}, result.headers ? {\n          [actionMatch.route.id]: result.headers\n        } : {})\n      });\n    }\n\n    let context = await loadRouteData(loaderRequest, matches, requestContext, unstable_dataStrategy, skipLoaderErrorBubbling, null);\n    return _extends({}, context, {\n      actionData: {\n        [actionMatch.route.id]: result.data\n      }\n    }, result.statusCode ? {\n      statusCode: result.statusCode\n    } : {}, {\n      actionHeaders: result.headers ? {\n        [actionMatch.route.id]: result.headers\n      } : {}\n    });\n  }\n\n  async function loadRouteData(request, matches, requestContext, unstable_dataStrategy, skipLoaderErrorBubbling, routeMatch, pendingActionResult) {\n    let isRouteRequest = routeMatch != null; // Short circuit if we have no loaders to run (queryRoute())\n\n    if (isRouteRequest && !(routeMatch != null && routeMatch.route.loader) && !(routeMatch != null && routeMatch.route.lazy)) {\n      throw getInternalRouterError(400, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: routeMatch == null ? void 0 : routeMatch.route.id\n      });\n    }\n\n    let requestMatches = routeMatch ? [routeMatch] : pendingActionResult && isErrorResult(pendingActionResult[1]) ? getLoaderMatchesUntilBoundary(matches, pendingActionResult[0]) : matches;\n    let matchesToLoad = requestMatches.filter(m => m.route.loader || m.route.lazy); // Short circuit if we have no loaders to run (query())\n\n    if (matchesToLoad.length === 0) {\n      return {\n        matches,\n        // Add a null for all matched routes for proper revalidation on the client\n        loaderData: matches.reduce((acc, m) => Object.assign(acc, {\n          [m.route.id]: null\n        }), {}),\n        errors: pendingActionResult && isErrorResult(pendingActionResult[1]) ? {\n          [pendingActionResult[0]]: pendingActionResult[1].error\n        } : null,\n        statusCode: 200,\n        loaderHeaders: {},\n        activeDeferreds: null\n      };\n    }\n\n    let results = await callDataStrategy(\"loader\", request, matchesToLoad, matches, isRouteRequest, requestContext, unstable_dataStrategy);\n\n    if (request.signal.aborted) {\n      throwStaticHandlerAbortedError(request, isRouteRequest, future);\n    } // Process and commit output from loaders\n\n\n    let activeDeferreds = new Map();\n    let context = processRouteLoaderData(matches, results, pendingActionResult, activeDeferreds, skipLoaderErrorBubbling); // Add a null for any non-loader matches for proper revalidation on the client\n\n    let executedLoaders = new Set(matchesToLoad.map(match => match.route.id));\n    matches.forEach(match => {\n      if (!executedLoaders.has(match.route.id)) {\n        context.loaderData[match.route.id] = null;\n      }\n    });\n    return _extends({}, context, {\n      matches,\n      activeDeferreds: activeDeferreds.size > 0 ? Object.fromEntries(activeDeferreds.entries()) : null\n    });\n  } // Utility wrapper for calling dataStrategy server-side without having to\n  // pass around the manifest, mapRouteProperties, etc.\n\n\n  async function callDataStrategy(type, request, matchesToLoad, matches, isRouteRequest, requestContext, unstable_dataStrategy) {\n    let results = await callDataStrategyImpl(unstable_dataStrategy || defaultDataStrategy, type, null, request, matchesToLoad, matches, null, manifest, mapRouteProperties, requestContext);\n    let dataResults = {};\n    await Promise.all(matches.map(async match => {\n      if (!(match.route.id in results)) {\n        return;\n      }\n\n      let result = results[match.route.id];\n\n      if (isRedirectDataStrategyResultResult(result)) {\n        let response = result.result; // Throw redirects and let the server handle them with an HTTP redirect\n\n        throw normalizeRelativeRoutingRedirectResponse(response, request, match.route.id, matches, basename, future.v7_relativeSplatPath);\n      }\n\n      if (isResponse(result.result) && isRouteRequest) {\n        // For SSR single-route requests, we want to hand Responses back\n        // directly without unwrapping\n        throw result;\n      }\n\n      dataResults[match.route.id] = await convertDataStrategyResultToDataResult(result);\n    }));\n    return dataResults;\n  }\n\n  return {\n    dataRoutes,\n    query,\n    queryRoute\n  };\n} //#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region Helpers\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Given an existing StaticHandlerContext and an error thrown at render time,\n * provide an updated StaticHandlerContext suitable for a second SSR render\n */\n\n\nfunction getStaticContextFromError(routes, context, error) {\n  let newContext = _extends({}, context, {\n    statusCode: isRouteErrorResponse(error) ? error.status : 500,\n    errors: {\n      [context._deepestRenderedBoundaryId || routes[0].id]: error\n    }\n  });\n\n  return newContext;\n}\n\nfunction throwStaticHandlerAbortedError(request, isRouteRequest, future) {\n  if (future.v7_throwAbortReason && request.signal.reason !== undefined) {\n    throw request.signal.reason;\n  }\n\n  let method = isRouteRequest ? \"queryRoute\" : \"query\";\n  throw new Error(method + \"() call aborted: \" + request.method + \" \" + request.url);\n}\n\nfunction isSubmissionNavigation(opts) {\n  return opts != null && (\"formData\" in opts && opts.formData != null || \"body\" in opts && opts.body !== undefined);\n}\n\nfunction normalizeTo(location, matches, basename, prependBasename, to, v7_relativeSplatPath, fromRouteId, relative) {\n  let contextualMatches;\n  let activeRouteMatch;\n\n  if (fromRouteId) {\n    // Grab matches up to the calling route so our route-relative logic is\n    // relative to the correct source route\n    contextualMatches = [];\n\n    for (let match of matches) {\n      contextualMatches.push(match);\n\n      if (match.route.id === fromRouteId) {\n        activeRouteMatch = match;\n        break;\n      }\n    }\n  } else {\n    contextualMatches = matches;\n    activeRouteMatch = matches[matches.length - 1];\n  } // Resolve the relative path\n\n\n  let path = resolveTo(to ? to : \".\", getResolveToMatches(contextualMatches, v7_relativeSplatPath), stripBasename(location.pathname, basename) || location.pathname, relative === \"path\"); // When `to` is not specified we inherit search/hash from the current\n  // location, unlike when to=\".\" and we just inherit the path.\n  // See https://github.com/remix-run/remix/issues/927\n\n  if (to == null) {\n    path.search = location.search;\n    path.hash = location.hash;\n  } // Add an ?index param for matched index routes if we don't already have one\n\n\n  if ((to == null || to === \"\" || to === \".\") && activeRouteMatch && activeRouteMatch.route.index && !hasNakedIndexQuery(path.search)) {\n    path.search = path.search ? path.search.replace(/^\\?/, \"?index&\") : \"?index\";\n  } // If we're operating within a basename, prepend it to the pathname.  If\n  // this is a root navigation, then just use the raw basename which allows\n  // the basename to have full control over the presence of a trailing slash\n  // on root actions\n\n\n  if (prependBasename && basename !== \"/\") {\n    path.pathname = path.pathname === \"/\" ? basename : joinPaths([basename, path.pathname]);\n  }\n\n  return createPath(path);\n} // Normalize navigation options by converting formMethod=GET formData objects to\n// URLSearchParams so they behave identically to links with query params\n\n\nfunction normalizeNavigateOptions(normalizeFormMethod, isFetcher, path, opts) {\n  // Return location verbatim on non-submission navigations\n  if (!opts || !isSubmissionNavigation(opts)) {\n    return {\n      path\n    };\n  }\n\n  if (opts.formMethod && !isValidMethod(opts.formMethod)) {\n    return {\n      path,\n      error: getInternalRouterError(405, {\n        method: opts.formMethod\n      })\n    };\n  }\n\n  let getInvalidBodyError = () => ({\n    path,\n    error: getInternalRouterError(400, {\n      type: \"invalid-body\"\n    })\n  }); // Create a Submission on non-GET navigations\n\n\n  let rawFormMethod = opts.formMethod || \"get\";\n  let formMethod = normalizeFormMethod ? rawFormMethod.toUpperCase() : rawFormMethod.toLowerCase();\n  let formAction = stripHashFromPath(path);\n\n  if (opts.body !== undefined) {\n    if (opts.formEncType === \"text/plain\") {\n      // text only support POST/PUT/PATCH/DELETE submissions\n      if (!isMutationMethod(formMethod)) {\n        return getInvalidBodyError();\n      }\n\n      let text = typeof opts.body === \"string\" ? opts.body : opts.body instanceof FormData || opts.body instanceof URLSearchParams ? // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#plain-text-form-data\n      Array.from(opts.body.entries()).reduce((acc, _ref5) => {\n        let [name, value] = _ref5;\n        return \"\" + acc + name + \"=\" + value + \"\\n\";\n      }, \"\") : String(opts.body);\n      return {\n        path,\n        submission: {\n          formMethod,\n          formAction,\n          formEncType: opts.formEncType,\n          formData: undefined,\n          json: undefined,\n          text\n        }\n      };\n    } else if (opts.formEncType === \"application/json\") {\n      // json only supports POST/PUT/PATCH/DELETE submissions\n      if (!isMutationMethod(formMethod)) {\n        return getInvalidBodyError();\n      }\n\n      try {\n        let json = typeof opts.body === \"string\" ? JSON.parse(opts.body) : opts.body;\n        return {\n          path,\n          submission: {\n            formMethod,\n            formAction,\n            formEncType: opts.formEncType,\n            formData: undefined,\n            json,\n            text: undefined\n          }\n        };\n      } catch (e) {\n        return getInvalidBodyError();\n      }\n    }\n  }\n\n  invariant(typeof FormData === \"function\", \"FormData is not available in this environment\");\n  let searchParams;\n  let formData;\n\n  if (opts.formData) {\n    searchParams = convertFormDataToSearchParams(opts.formData);\n    formData = opts.formData;\n  } else if (opts.body instanceof FormData) {\n    searchParams = convertFormDataToSearchParams(opts.body);\n    formData = opts.body;\n  } else if (opts.body instanceof URLSearchParams) {\n    searchParams = opts.body;\n    formData = convertSearchParamsToFormData(searchParams);\n  } else if (opts.body == null) {\n    searchParams = new URLSearchParams();\n    formData = new FormData();\n  } else {\n    try {\n      searchParams = new URLSearchParams(opts.body);\n      formData = convertSearchParamsToFormData(searchParams);\n    } catch (e) {\n      return getInvalidBodyError();\n    }\n  }\n\n  let submission = {\n    formMethod,\n    formAction,\n    formEncType: opts && opts.formEncType || \"application/x-www-form-urlencoded\",\n    formData,\n    json: undefined,\n    text: undefined\n  };\n\n  if (isMutationMethod(submission.formMethod)) {\n    return {\n      path,\n      submission\n    };\n  } // Flatten submission onto URLSearchParams for GET submissions\n\n\n  let parsedPath = parsePath(path); // On GET navigation submissions we can drop the ?index param from the\n  // resulting location since all loaders will run.  But fetcher GET submissions\n  // only run a single loader so we need to preserve any incoming ?index params\n\n  if (isFetcher && parsedPath.search && hasNakedIndexQuery(parsedPath.search)) {\n    searchParams.append(\"index\", \"\");\n  }\n\n  parsedPath.search = \"?\" + searchParams;\n  return {\n    path: createPath(parsedPath),\n    submission\n  };\n} // Filter out all routes below any caught error as they aren't going to\n// render so we don't need to load them\n\n\nfunction getLoaderMatchesUntilBoundary(matches, boundaryId) {\n  let boundaryMatches = matches;\n\n  if (boundaryId) {\n    let index = matches.findIndex(m => m.route.id === boundaryId);\n\n    if (index >= 0) {\n      boundaryMatches = matches.slice(0, index);\n    }\n  }\n\n  return boundaryMatches;\n}\n\nfunction getMatchesToLoad(history, state, matches, submission, location, isInitialLoad, skipActionErrorRevalidation, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, deletedFetchers, fetchLoadMatches, fetchRedirectIds, routesToUse, basename, pendingActionResult) {\n  let actionResult = pendingActionResult ? isErrorResult(pendingActionResult[1]) ? pendingActionResult[1].error : pendingActionResult[1].data : undefined;\n  let currentUrl = history.createURL(state.location);\n  let nextUrl = history.createURL(location); // Pick navigation matches that are net-new or qualify for revalidation\n\n  let boundaryId = pendingActionResult && isErrorResult(pendingActionResult[1]) ? pendingActionResult[0] : undefined;\n  let boundaryMatches = boundaryId ? getLoaderMatchesUntilBoundary(matches, boundaryId) : matches; // Don't revalidate loaders by default after action 4xx/5xx responses\n  // when the flag is enabled.  They can still opt-into revalidation via\n  // `shouldRevalidate` via `actionResult`\n\n  let actionStatus = pendingActionResult ? pendingActionResult[1].statusCode : undefined;\n  let shouldSkipRevalidation = skipActionErrorRevalidation && actionStatus && actionStatus >= 400;\n  let navigationMatches = boundaryMatches.filter((match, index) => {\n    let {\n      route\n    } = match;\n\n    if (route.lazy) {\n      // We haven't loaded this route yet so we don't know if it's got a loader!\n      return true;\n    }\n\n    if (route.loader == null) {\n      return false;\n    }\n\n    if (isInitialLoad) {\n      if (typeof route.loader !== \"function\" || route.loader.hydrate) {\n        return true;\n      }\n\n      return state.loaderData[route.id] === undefined && ( // Don't re-run if the loader ran and threw an error\n      !state.errors || state.errors[route.id] === undefined);\n    } // Always call the loader on new route instances and pending defer cancellations\n\n\n    if (isNewLoader(state.loaderData, state.matches[index], match) || cancelledDeferredRoutes.some(id => id === match.route.id)) {\n      return true;\n    } // This is the default implementation for when we revalidate.  If the route\n    // provides it's own implementation, then we give them full control but\n    // provide this value so they can leverage it if needed after they check\n    // their own specific use cases\n\n\n    let currentRouteMatch = state.matches[index];\n    let nextRouteMatch = match;\n    return shouldRevalidateLoader(match, _extends({\n      currentUrl,\n      currentParams: currentRouteMatch.params,\n      nextUrl,\n      nextParams: nextRouteMatch.params\n    }, submission, {\n      actionResult,\n      actionStatus,\n      defaultShouldRevalidate: shouldSkipRevalidation ? false : // Forced revalidation due to submission, useRevalidator, or X-Remix-Revalidate\n      isRevalidationRequired || currentUrl.pathname + currentUrl.search === nextUrl.pathname + nextUrl.search || // Search params affect all loaders\n      currentUrl.search !== nextUrl.search || isNewRouteInstance(currentRouteMatch, nextRouteMatch)\n    }));\n  }); // Pick fetcher.loads that need to be revalidated\n\n  let revalidatingFetchers = [];\n  fetchLoadMatches.forEach((f, key) => {\n    // Don't revalidate:\n    //  - on initial load (shouldn't be any fetchers then anyway)\n    //  - if fetcher won't be present in the subsequent render\n    //    - no longer matches the URL (v7_fetcherPersist=false)\n    //    - was unmounted but persisted due to v7_fetcherPersist=true\n    if (isInitialLoad || !matches.some(m => m.route.id === f.routeId) || deletedFetchers.has(key)) {\n      return;\n    }\n\n    let fetcherMatches = matchRoutes(routesToUse, f.path, basename); // If the fetcher path no longer matches, push it in with null matches so\n    // we can trigger a 404 in callLoadersAndMaybeResolveData.  Note this is\n    // currently only a use-case for Remix HMR where the route tree can change\n    // at runtime and remove a route previously loaded via a fetcher\n\n    if (!fetcherMatches) {\n      revalidatingFetchers.push({\n        key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: null,\n        match: null,\n        controller: null\n      });\n      return;\n    } // Revalidating fetchers are decoupled from the route matches since they\n    // load from a static href.  They revalidate based on explicit revalidation\n    // (submission, useRevalidator, or X-Remix-Revalidate)\n\n\n    let fetcher = state.fetchers.get(key);\n    let fetcherMatch = getTargetMatch(fetcherMatches, f.path);\n    let shouldRevalidate = false;\n\n    if (fetchRedirectIds.has(key)) {\n      // Never trigger a revalidation of an actively redirecting fetcher\n      shouldRevalidate = false;\n    } else if (cancelledFetcherLoads.has(key)) {\n      // Always mark for revalidation if the fetcher was cancelled\n      cancelledFetcherLoads.delete(key);\n      shouldRevalidate = true;\n    } else if (fetcher && fetcher.state !== \"idle\" && fetcher.data === undefined) {\n      // If the fetcher hasn't ever completed loading yet, then this isn't a\n      // revalidation, it would just be a brand new load if an explicit\n      // revalidation is required\n      shouldRevalidate = isRevalidationRequired;\n    } else {\n      // Otherwise fall back on any user-defined shouldRevalidate, defaulting\n      // to explicit revalidations only\n      shouldRevalidate = shouldRevalidateLoader(fetcherMatch, _extends({\n        currentUrl,\n        currentParams: state.matches[state.matches.length - 1].params,\n        nextUrl,\n        nextParams: matches[matches.length - 1].params\n      }, submission, {\n        actionResult,\n        actionStatus,\n        defaultShouldRevalidate: shouldSkipRevalidation ? false : isRevalidationRequired\n      }));\n    }\n\n    if (shouldRevalidate) {\n      revalidatingFetchers.push({\n        key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: fetcherMatches,\n        match: fetcherMatch,\n        controller: new AbortController()\n      });\n    }\n  });\n  return [navigationMatches, revalidatingFetchers];\n}\n\nfunction isNewLoader(currentLoaderData, currentMatch, match) {\n  let isNew = // [a] -> [a, b]\n  !currentMatch || // [a, b] -> [a, c]\n  match.route.id !== currentMatch.route.id; // Handle the case that we don't have data for a re-used route, potentially\n  // from a prior error or from a cancelled pending deferred\n\n  let isMissingData = currentLoaderData[match.route.id] === undefined; // Always load if this is a net-new route or we don't yet have data\n\n  return isNew || isMissingData;\n}\n\nfunction isNewRouteInstance(currentMatch, match) {\n  let currentPath = currentMatch.route.path;\n  return (// param change for this match, /users/123 -> /users/456\n    currentMatch.pathname !== match.pathname || // splat param changed, which is not present in match.path\n    // e.g. /files/images/avatar.jpg -> files/finances.xls\n    currentPath != null && currentPath.endsWith(\"*\") && currentMatch.params[\"*\"] !== match.params[\"*\"]\n  );\n}\n\nfunction shouldRevalidateLoader(loaderMatch, arg) {\n  if (loaderMatch.route.shouldRevalidate) {\n    let routeChoice = loaderMatch.route.shouldRevalidate(arg);\n\n    if (typeof routeChoice === \"boolean\") {\n      return routeChoice;\n    }\n  }\n\n  return arg.defaultShouldRevalidate;\n}\n/**\n * Idempotent utility to execute patchRoutesOnNavigation() to lazily load route\n * definitions and update the routes/routeManifest\n */\n\n\nasync function loadLazyRouteChildren(patchRoutesOnNavigationImpl, path, matches, routes, manifest, mapRouteProperties, pendingRouteChildren, signal) {\n  let key = [path, ...matches.map(m => m.route.id)].join(\"-\");\n\n  try {\n    let pending = pendingRouteChildren.get(key);\n\n    if (!pending) {\n      pending = patchRoutesOnNavigationImpl({\n        path,\n        matches,\n        patch: (routeId, children) => {\n          if (!signal.aborted) {\n            patchRoutesImpl(routeId, children, routes, manifest, mapRouteProperties);\n          }\n        }\n      });\n      pendingRouteChildren.set(key, pending);\n    }\n\n    if (pending && isPromise(pending)) {\n      await pending;\n    }\n  } finally {\n    pendingRouteChildren.delete(key);\n  }\n}\n\nfunction patchRoutesImpl(routeId, children, routesToUse, manifest, mapRouteProperties) {\n  if (routeId) {\n    var _route$children;\n\n    let route = manifest[routeId];\n    invariant(route, \"No route found to patch children into: routeId = \" + routeId);\n    let dataChildren = convertRoutesToDataRoutes(children, mapRouteProperties, [routeId, \"patch\", String(((_route$children = route.children) == null ? void 0 : _route$children.length) || \"0\")], manifest);\n\n    if (route.children) {\n      route.children.push(...dataChildren);\n    } else {\n      route.children = dataChildren;\n    }\n  } else {\n    let dataChildren = convertRoutesToDataRoutes(children, mapRouteProperties, [\"patch\", String(routesToUse.length || \"0\")], manifest);\n    routesToUse.push(...dataChildren);\n  }\n}\n/**\n * Execute route.lazy() methods to lazily load route modules (loader, action,\n * shouldRevalidate) and update the routeManifest in place which shares objects\n * with dataRoutes so those get updated as well.\n */\n\n\nasync function loadLazyRouteModule(route, mapRouteProperties, manifest) {\n  if (!route.lazy) {\n    return;\n  }\n\n  let lazyRoute = await route.lazy(); // If the lazy route function was executed and removed by another parallel\n  // call then we can return - first lazy() to finish wins because the return\n  // value of lazy is expected to be static\n\n  if (!route.lazy) {\n    return;\n  }\n\n  let routeToUpdate = manifest[route.id];\n  invariant(routeToUpdate, \"No route found in manifest\"); // Update the route in place.  This should be safe because there's no way\n  // we could yet be sitting on this route as we can't get there without\n  // resolving lazy() first.\n  //\n  // This is different than the HMR \"update\" use-case where we may actively be\n  // on the route being updated.  The main concern boils down to \"does this\n  // mutation affect any ongoing navigations or any current state.matches\n  // values?\".  If not, it should be safe to update in place.\n\n  let routeUpdates = {};\n\n  for (let lazyRouteProperty in lazyRoute) {\n    let staticRouteValue = routeToUpdate[lazyRouteProperty];\n    let isPropertyStaticallyDefined = staticRouteValue !== undefined && // This property isn't static since it should always be updated based\n    // on the route updates\n    lazyRouteProperty !== \"hasErrorBoundary\";\n    warning(!isPropertyStaticallyDefined, \"Route \\\"\" + routeToUpdate.id + \"\\\" has a static property \\\"\" + lazyRouteProperty + \"\\\" \" + \"defined but its lazy function is also returning a value for this property. \" + (\"The lazy route property \\\"\" + lazyRouteProperty + \"\\\" will be ignored.\"));\n\n    if (!isPropertyStaticallyDefined && !immutableRouteKeys.has(lazyRouteProperty)) {\n      routeUpdates[lazyRouteProperty] = lazyRoute[lazyRouteProperty];\n    }\n  } // Mutate the route with the provided updates.  Do this first so we pass\n  // the updated version to mapRouteProperties\n\n\n  Object.assign(routeToUpdate, routeUpdates); // Mutate the `hasErrorBoundary` property on the route based on the route\n  // updates and remove the `lazy` function so we don't resolve the lazy\n  // route again.\n\n  Object.assign(routeToUpdate, _extends({}, mapRouteProperties(routeToUpdate), {\n    lazy: undefined\n  }));\n} // Default implementation of `dataStrategy` which fetches all loaders in parallel\n\n\nasync function defaultDataStrategy(_ref6) {\n  let {\n    matches\n  } = _ref6;\n  let matchesToLoad = matches.filter(m => m.shouldLoad);\n  let results = await Promise.all(matchesToLoad.map(m => m.resolve()));\n  return results.reduce((acc, result, i) => Object.assign(acc, {\n    [matchesToLoad[i].route.id]: result\n  }), {});\n}\n\nasync function callDataStrategyImpl(dataStrategyImpl, type, state, request, matchesToLoad, matches, fetcherKey, manifest, mapRouteProperties, requestContext) {\n  let loadRouteDefinitionsPromises = matches.map(m => m.route.lazy ? loadLazyRouteModule(m.route, mapRouteProperties, manifest) : undefined);\n  let dsMatches = matches.map((match, i) => {\n    let loadRoutePromise = loadRouteDefinitionsPromises[i];\n    let shouldLoad = matchesToLoad.some(m => m.route.id === match.route.id); // `resolve` encapsulates route.lazy(), executing the loader/action,\n    // and mapping return values/thrown errors to a `DataStrategyResult`.  Users\n    // can pass a callback to take fine-grained control over the execution\n    // of the loader/action\n\n    let resolve = async handlerOverride => {\n      if (handlerOverride && request.method === \"GET\" && (match.route.lazy || match.route.loader)) {\n        shouldLoad = true;\n      }\n\n      return shouldLoad ? callLoaderOrAction(type, request, match, loadRoutePromise, handlerOverride, requestContext) : Promise.resolve({\n        type: ResultType.data,\n        result: undefined\n      });\n    };\n\n    return _extends({}, match, {\n      shouldLoad,\n      resolve\n    });\n  }); // Send all matches here to allow for a middleware-type implementation.\n  // handler will be a no-op for unneeded routes and we filter those results\n  // back out below.\n\n  let results = await dataStrategyImpl({\n    matches: dsMatches,\n    request,\n    params: matches[0].params,\n    fetcherKey,\n    context: requestContext\n  }); // Wait for all routes to load here but 'swallow the error since we want\n  // it to bubble up from the `await loadRoutePromise` in `callLoaderOrAction` -\n  // called from `match.resolve()`\n\n  try {\n    await Promise.all(loadRouteDefinitionsPromises);\n  } catch (e) {// No-op\n  }\n\n  return results;\n} // Default logic for calling a loader/action is the user has no specified a dataStrategy\n\n\nasync function callLoaderOrAction(type, request, match, loadRoutePromise, handlerOverride, staticContext) {\n  let result;\n  let onReject;\n\n  let runHandler = handler => {\n    // Setup a promise we can race against so that abort signals short circuit\n    let reject; // This will never resolve so safe to type it as Promise<DataStrategyResult> to\n    // satisfy the function return value\n\n    let abortPromise = new Promise((_, r) => reject = r);\n\n    onReject = () => reject();\n\n    request.signal.addEventListener(\"abort\", onReject);\n\n    let actualHandler = ctx => {\n      if (typeof handler !== \"function\") {\n        return Promise.reject(new Error(\"You cannot call the handler for a route which defines a boolean \" + (\"\\\"\" + type + \"\\\" [routeId: \" + match.route.id + \"]\")));\n      }\n\n      return handler({\n        request,\n        params: match.params,\n        context: staticContext\n      }, ...(ctx !== undefined ? [ctx] : []));\n    };\n\n    let handlerPromise = (async () => {\n      try {\n        let val = await (handlerOverride ? handlerOverride(ctx => actualHandler(ctx)) : actualHandler());\n        return {\n          type: \"data\",\n          result: val\n        };\n      } catch (e) {\n        return {\n          type: \"error\",\n          result: e\n        };\n      }\n    })();\n\n    return Promise.race([handlerPromise, abortPromise]);\n  };\n\n  try {\n    let handler = match.route[type]; // If we have a route.lazy promise, await that first\n\n    if (loadRoutePromise) {\n      if (handler) {\n        // Run statically defined handler in parallel with lazy()\n        let handlerError;\n        let [value] = await Promise.all([// If the handler throws, don't let it immediately bubble out,\n        // since we need to let the lazy() execution finish so we know if this\n        // route has a boundary that can handle the error\n        runHandler(handler).catch(e => {\n          handlerError = e;\n        }), loadRoutePromise]);\n\n        if (handlerError !== undefined) {\n          throw handlerError;\n        }\n\n        result = value;\n      } else {\n        // Load lazy route module, then run any returned handler\n        await loadRoutePromise;\n        handler = match.route[type];\n\n        if (handler) {\n          // Handler still runs even if we got interrupted to maintain consistency\n          // with un-abortable behavior of handler execution on non-lazy or\n          // previously-lazy-loaded routes\n          result = await runHandler(handler);\n        } else if (type === \"action\") {\n          let url = new URL(request.url);\n          let pathname = url.pathname + url.search;\n          throw getInternalRouterError(405, {\n            method: request.method,\n            pathname,\n            routeId: match.route.id\n          });\n        } else {\n          // lazy() route has no loader to run.  Short circuit here so we don't\n          // hit the invariant below that errors on returning undefined.\n          return {\n            type: ResultType.data,\n            result: undefined\n          };\n        }\n      }\n    } else if (!handler) {\n      let url = new URL(request.url);\n      let pathname = url.pathname + url.search;\n      throw getInternalRouterError(404, {\n        pathname\n      });\n    } else {\n      result = await runHandler(handler);\n    }\n\n    invariant(result.result !== undefined, \"You defined \" + (type === \"action\" ? \"an action\" : \"a loader\") + \" for route \" + (\"\\\"\" + match.route.id + \"\\\" but didn't return anything from your `\" + type + \"` \") + \"function. Please return a value or `null`.\");\n  } catch (e) {\n    // We should already be catching and converting normal handler executions to\n    // DataStrategyResults and returning them, so anything that throws here is an\n    // unexpected error we still need to wrap\n    return {\n      type: ResultType.error,\n      result: e\n    };\n  } finally {\n    if (onReject) {\n      request.signal.removeEventListener(\"abort\", onReject);\n    }\n  }\n\n  return result;\n}\n\nasync function convertDataStrategyResultToDataResult(dataStrategyResult) {\n  let {\n    result,\n    type\n  } = dataStrategyResult;\n\n  if (isResponse(result)) {\n    let data;\n\n    try {\n      let contentType = result.headers.get(\"Content-Type\"); // Check between word boundaries instead of startsWith() due to the last\n      // paragraph of https://httpwg.org/specs/rfc9110.html#field.content-type\n\n      if (contentType && /\\bapplication\\/json\\b/.test(contentType)) {\n        if (result.body == null) {\n          data = null;\n        } else {\n          data = await result.json();\n        }\n      } else {\n        data = await result.text();\n      }\n    } catch (e) {\n      return {\n        type: ResultType.error,\n        error: e\n      };\n    }\n\n    if (type === ResultType.error) {\n      return {\n        type: ResultType.error,\n        error: new ErrorResponseImpl(result.status, result.statusText, data),\n        statusCode: result.status,\n        headers: result.headers\n      };\n    }\n\n    return {\n      type: ResultType.data,\n      data,\n      statusCode: result.status,\n      headers: result.headers\n    };\n  }\n\n  if (type === ResultType.error) {\n    if (isDataWithResponseInit(result)) {\n      var _result$init2;\n\n      if (result.data instanceof Error) {\n        var _result$init;\n\n        return {\n          type: ResultType.error,\n          error: result.data,\n          statusCode: (_result$init = result.init) == null ? void 0 : _result$init.status\n        };\n      } // Convert thrown unstable_data() to ErrorResponse instances\n\n\n      result = new ErrorResponseImpl(((_result$init2 = result.init) == null ? void 0 : _result$init2.status) || 500, undefined, result.data);\n    }\n\n    return {\n      type: ResultType.error,\n      error: result,\n      statusCode: isRouteErrorResponse(result) ? result.status : undefined\n    };\n  }\n\n  if (isDeferredData(result)) {\n    var _result$init3, _result$init4;\n\n    return {\n      type: ResultType.deferred,\n      deferredData: result,\n      statusCode: (_result$init3 = result.init) == null ? void 0 : _result$init3.status,\n      headers: ((_result$init4 = result.init) == null ? void 0 : _result$init4.headers) && new Headers(result.init.headers)\n    };\n  }\n\n  if (isDataWithResponseInit(result)) {\n    var _result$init5, _result$init6;\n\n    return {\n      type: ResultType.data,\n      data: result.data,\n      statusCode: (_result$init5 = result.init) == null ? void 0 : _result$init5.status,\n      headers: (_result$init6 = result.init) != null && _result$init6.headers ? new Headers(result.init.headers) : undefined\n    };\n  }\n\n  return {\n    type: ResultType.data,\n    data: result\n  };\n} // Support relative routing in internal redirects\n\n\nfunction normalizeRelativeRoutingRedirectResponse(response, request, routeId, matches, basename, v7_relativeSplatPath) {\n  let location = response.headers.get(\"Location\");\n  invariant(location, \"Redirects returned/thrown from loaders/actions must have a Location header\");\n\n  if (!ABSOLUTE_URL_REGEX.test(location)) {\n    let trimmedMatches = matches.slice(0, matches.findIndex(m => m.route.id === routeId) + 1);\n    location = normalizeTo(new URL(request.url), trimmedMatches, basename, true, location, v7_relativeSplatPath);\n    response.headers.set(\"Location\", location);\n  }\n\n  return response;\n}\n\nfunction normalizeRedirectLocation(location, currentUrl, basename) {\n  if (ABSOLUTE_URL_REGEX.test(location)) {\n    // Strip off the protocol+origin for same-origin + same-basename absolute redirects\n    let normalizedLocation = location;\n    let url = normalizedLocation.startsWith(\"//\") ? new URL(currentUrl.protocol + normalizedLocation) : new URL(normalizedLocation);\n    let isSameBasename = stripBasename(url.pathname, basename) != null;\n\n    if (url.origin === currentUrl.origin && isSameBasename) {\n      return url.pathname + url.search + url.hash;\n    }\n  }\n\n  return location;\n} // Utility method for creating the Request instances for loaders/actions during\n// client-side navigations and fetches.  During SSR we will always have a\n// Request instance from the static handler (query/queryRoute)\n\n\nfunction createClientSideRequest(history, location, signal, submission) {\n  let url = history.createURL(stripHashFromPath(location)).toString();\n  let init = {\n    signal\n  };\n\n  if (submission && isMutationMethod(submission.formMethod)) {\n    let {\n      formMethod,\n      formEncType\n    } = submission; // Didn't think we needed this but it turns out unlike other methods, patch\n    // won't be properly normalized to uppercase and results in a 405 error.\n    // See: https://fetch.spec.whatwg.org/#concept-method\n\n    init.method = formMethod.toUpperCase();\n\n    if (formEncType === \"application/json\") {\n      init.headers = new Headers({\n        \"Content-Type\": formEncType\n      });\n      init.body = JSON.stringify(submission.json);\n    } else if (formEncType === \"text/plain\") {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = submission.text;\n    } else if (formEncType === \"application/x-www-form-urlencoded\" && submission.formData) {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = convertFormDataToSearchParams(submission.formData);\n    } else {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = submission.formData;\n    }\n  }\n\n  return new Request(url, init);\n}\n\nfunction convertFormDataToSearchParams(formData) {\n  let searchParams = new URLSearchParams();\n\n  for (let [key, value] of formData.entries()) {\n    // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#converting-an-entry-list-to-a-list-of-name-value-pairs\n    searchParams.append(key, typeof value === \"string\" ? value : value.name);\n  }\n\n  return searchParams;\n}\n\nfunction convertSearchParamsToFormData(searchParams) {\n  let formData = new FormData();\n\n  for (let [key, value] of searchParams.entries()) {\n    formData.append(key, value);\n  }\n\n  return formData;\n}\n\nfunction processRouteLoaderData(matches, results, pendingActionResult, activeDeferreds, skipLoaderErrorBubbling) {\n  // Fill in loaderData/errors from our loaders\n  let loaderData = {};\n  let errors = null;\n  let statusCode;\n  let foundError = false;\n  let loaderHeaders = {};\n  let pendingError = pendingActionResult && isErrorResult(pendingActionResult[1]) ? pendingActionResult[1].error : undefined; // Process loader results into state.loaderData/state.errors\n\n  matches.forEach(match => {\n    if (!(match.route.id in results)) {\n      return;\n    }\n\n    let id = match.route.id;\n    let result = results[id];\n    invariant(!isRedirectResult(result), \"Cannot handle redirect results in processLoaderData\");\n\n    if (isErrorResult(result)) {\n      let error = result.error; // If we have a pending action error, we report it at the highest-route\n      // that throws a loader error, and then clear it out to indicate that\n      // it was consumed\n\n      if (pendingError !== undefined) {\n        error = pendingError;\n        pendingError = undefined;\n      }\n\n      errors = errors || {};\n\n      if (skipLoaderErrorBubbling) {\n        errors[id] = error;\n      } else {\n        // Look upwards from the matched route for the closest ancestor error\n        // boundary, defaulting to the root match.  Prefer higher error values\n        // if lower errors bubble to the same boundary\n        let boundaryMatch = findNearestBoundary(matches, id);\n\n        if (errors[boundaryMatch.route.id] == null) {\n          errors[boundaryMatch.route.id] = error;\n        }\n      } // Clear our any prior loaderData for the throwing route\n\n\n      loaderData[id] = undefined; // Once we find our first (highest) error, we set the status code and\n      // prevent deeper status codes from overriding\n\n      if (!foundError) {\n        foundError = true;\n        statusCode = isRouteErrorResponse(result.error) ? result.error.status : 500;\n      }\n\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    } else {\n      if (isDeferredResult(result)) {\n        activeDeferreds.set(id, result.deferredData);\n        loaderData[id] = result.deferredData.data; // Error status codes always override success status codes, but if all\n        // loaders are successful we take the deepest status code.\n\n        if (result.statusCode != null && result.statusCode !== 200 && !foundError) {\n          statusCode = result.statusCode;\n        }\n\n        if (result.headers) {\n          loaderHeaders[id] = result.headers;\n        }\n      } else {\n        loaderData[id] = result.data; // Error status codes always override success status codes, but if all\n        // loaders are successful we take the deepest status code.\n\n        if (result.statusCode && result.statusCode !== 200 && !foundError) {\n          statusCode = result.statusCode;\n        }\n\n        if (result.headers) {\n          loaderHeaders[id] = result.headers;\n        }\n      }\n    }\n  }); // If we didn't consume the pending action error (i.e., all loaders\n  // resolved), then consume it here.  Also clear out any loaderData for the\n  // throwing route\n\n  if (pendingError !== undefined && pendingActionResult) {\n    errors = {\n      [pendingActionResult[0]]: pendingError\n    };\n    loaderData[pendingActionResult[0]] = undefined;\n  }\n\n  return {\n    loaderData,\n    errors,\n    statusCode: statusCode || 200,\n    loaderHeaders\n  };\n}\n\nfunction processLoaderData(state, matches, matchesToLoad, results, pendingActionResult, revalidatingFetchers, fetcherResults, activeDeferreds) {\n  let {\n    loaderData,\n    errors\n  } = processRouteLoaderData(matches, results, pendingActionResult, activeDeferreds, false // This method is only called client side so we always want to bubble\n  ); // Process results from our revalidating fetchers\n\n  revalidatingFetchers.forEach(rf => {\n    let {\n      key,\n      match,\n      controller\n    } = rf;\n    let result = fetcherResults[key];\n    invariant(result, \"Did not find corresponding fetcher result\"); // Process fetcher non-redirect errors\n\n    if (controller && controller.signal.aborted) {\n      // Nothing to do for aborted fetchers\n      return;\n    } else if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, match == null ? void 0 : match.route.id);\n\n      if (!(errors && errors[boundaryMatch.route.id])) {\n        errors = _extends({}, errors, {\n          [boundaryMatch.route.id]: result.error\n        });\n      }\n\n      state.fetchers.delete(key);\n    } else if (isRedirectResult(result)) {\n      // Should never get here, redirects should get processed above, but we\n      // keep this to type narrow to a success result in the else\n      invariant(false, \"Unhandled fetcher revalidation redirect\");\n    } else if (isDeferredResult(result)) {\n      // Should never get here, deferred data should be awaited for fetchers\n      // in resolveDeferredResults\n      invariant(false, \"Unhandled fetcher deferred data\");\n    } else {\n      let doneFetcher = getDoneFetcher(result.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n  });\n  return {\n    loaderData,\n    errors\n  };\n}\n\nfunction mergeLoaderData(loaderData, newLoaderData, matches, errors) {\n  let mergedLoaderData = _extends({}, newLoaderData);\n\n  for (let match of matches) {\n    let id = match.route.id;\n\n    if (newLoaderData.hasOwnProperty(id)) {\n      if (newLoaderData[id] !== undefined) {\n        mergedLoaderData[id] = newLoaderData[id];\n      }\n    } else if (loaderData[id] !== undefined && match.route.loader) {\n      // Preserve existing keys not included in newLoaderData and where a loader\n      // wasn't removed by HMR\n      mergedLoaderData[id] = loaderData[id];\n    }\n\n    if (errors && errors.hasOwnProperty(id)) {\n      // Don't keep any loader data below the boundary\n      break;\n    }\n  }\n\n  return mergedLoaderData;\n}\n\nfunction getActionDataForCommit(pendingActionResult) {\n  if (!pendingActionResult) {\n    return {};\n  }\n\n  return isErrorResult(pendingActionResult[1]) ? {\n    // Clear out prior actionData on errors\n    actionData: {}\n  } : {\n    actionData: {\n      [pendingActionResult[0]]: pendingActionResult[1].data\n    }\n  };\n} // Find the nearest error boundary, looking upwards from the leaf route (or the\n// route specified by routeId) for the closest ancestor error boundary,\n// defaulting to the root match\n\n\nfunction findNearestBoundary(matches, routeId) {\n  let eligibleMatches = routeId ? matches.slice(0, matches.findIndex(m => m.route.id === routeId) + 1) : [...matches];\n  return eligibleMatches.reverse().find(m => m.route.hasErrorBoundary === true) || matches[0];\n}\n\nfunction getShortCircuitMatches(routes) {\n  // Prefer a root layout route if present, otherwise shim in a route object\n  let route = routes.length === 1 ? routes[0] : routes.find(r => r.index || !r.path || r.path === \"/\") || {\n    id: \"__shim-error-route__\"\n  };\n  return {\n    matches: [{\n      params: {},\n      pathname: \"\",\n      pathnameBase: \"\",\n      route\n    }],\n    route\n  };\n}\n\nfunction getInternalRouterError(status, _temp5) {\n  let {\n    pathname,\n    routeId,\n    method,\n    type,\n    message\n  } = _temp5 === void 0 ? {} : _temp5;\n  let statusText = \"Unknown Server Error\";\n  let errorMessage = \"Unknown @remix-run/router error\";\n\n  if (status === 400) {\n    statusText = \"Bad Request\";\n\n    if (type === \"route-discovery\") {\n      errorMessage = \"Unable to match URL \\\"\" + pathname + \"\\\" - the `unstable_patchRoutesOnNavigation()` \" + (\"function threw the following error:\\n\" + message);\n    } else if (method && pathname && routeId) {\n      errorMessage = \"You made a \" + method + \" request to \\\"\" + pathname + \"\\\" but \" + (\"did not provide a `loader` for route \\\"\" + routeId + \"\\\", \") + \"so there is no way to handle the request.\";\n    } else if (type === \"defer-action\") {\n      errorMessage = \"defer() is not supported in actions\";\n    } else if (type === \"invalid-body\") {\n      errorMessage = \"Unable to encode submission body\";\n    }\n  } else if (status === 403) {\n    statusText = \"Forbidden\";\n    errorMessage = \"Route \\\"\" + routeId + \"\\\" does not match URL \\\"\" + pathname + \"\\\"\";\n  } else if (status === 404) {\n    statusText = \"Not Found\";\n    errorMessage = \"No route matches URL \\\"\" + pathname + \"\\\"\";\n  } else if (status === 405) {\n    statusText = \"Method Not Allowed\";\n\n    if (method && pathname && routeId) {\n      errorMessage = \"You made a \" + method.toUpperCase() + \" request to \\\"\" + pathname + \"\\\" but \" + (\"did not provide an `action` for route \\\"\" + routeId + \"\\\", \") + \"so there is no way to handle the request.\";\n    } else if (method) {\n      errorMessage = \"Invalid request method \\\"\" + method.toUpperCase() + \"\\\"\";\n    }\n  }\n\n  return new ErrorResponseImpl(status || 500, statusText, new Error(errorMessage), true);\n} // Find any returned redirect errors, starting from the lowest match\n\n\nfunction findRedirect(results) {\n  let entries = Object.entries(results);\n\n  for (let i = entries.length - 1; i >= 0; i--) {\n    let [key, result] = entries[i];\n\n    if (isRedirectResult(result)) {\n      return {\n        key,\n        result\n      };\n    }\n  }\n}\n\nfunction stripHashFromPath(path) {\n  let parsedPath = typeof path === \"string\" ? parsePath(path) : path;\n  return createPath(_extends({}, parsedPath, {\n    hash: \"\"\n  }));\n}\n\nfunction isHashChangeOnly(a, b) {\n  if (a.pathname !== b.pathname || a.search !== b.search) {\n    return false;\n  }\n\n  if (a.hash === \"\") {\n    // /page -> /page#hash\n    return b.hash !== \"\";\n  } else if (a.hash === b.hash) {\n    // /page#hash -> /page#hash\n    return true;\n  } else if (b.hash !== \"\") {\n    // /page#hash -> /page#other\n    return true;\n  } // If the hash is removed the browser will re-perform a request to the server\n  // /page#hash -> /page\n\n\n  return false;\n}\n\nfunction isPromise(val) {\n  return typeof val === \"object\" && val != null && \"then\" in val;\n}\n\nfunction isDataStrategyResult(result) {\n  return result != null && typeof result === \"object\" && \"type\" in result && \"result\" in result && (result.type === ResultType.data || result.type === ResultType.error);\n}\n\nfunction isRedirectDataStrategyResultResult(result) {\n  return isResponse(result.result) && redirectStatusCodes.has(result.result.status);\n}\n\nfunction isDeferredResult(result) {\n  return result.type === ResultType.deferred;\n}\n\nfunction isErrorResult(result) {\n  return result.type === ResultType.error;\n}\n\nfunction isRedirectResult(result) {\n  return (result && result.type) === ResultType.redirect;\n}\n\nfunction isDataWithResponseInit(value) {\n  return typeof value === \"object\" && value != null && \"type\" in value && \"data\" in value && \"init\" in value && value.type === \"DataWithResponseInit\";\n}\n\nfunction isDeferredData(value) {\n  let deferred = value;\n  return deferred && typeof deferred === \"object\" && typeof deferred.data === \"object\" && typeof deferred.subscribe === \"function\" && typeof deferred.cancel === \"function\" && typeof deferred.resolveData === \"function\";\n}\n\nfunction isResponse(value) {\n  return value != null && typeof value.status === \"number\" && typeof value.statusText === \"string\" && typeof value.headers === \"object\" && typeof value.body !== \"undefined\";\n}\n\nfunction isRedirectResponse(result) {\n  if (!isResponse(result)) {\n    return false;\n  }\n\n  let status = result.status;\n  let location = result.headers.get(\"Location\");\n  return status >= 300 && status <= 399 && location != null;\n}\n\nfunction isValidMethod(method) {\n  return validRequestMethods.has(method.toLowerCase());\n}\n\nfunction isMutationMethod(method) {\n  return validMutationMethods.has(method.toLowerCase());\n}\n\nasync function resolveNavigationDeferredResults(matches, results, signal, currentMatches, currentLoaderData) {\n  let entries = Object.entries(results);\n\n  for (let index = 0; index < entries.length; index++) {\n    let [routeId, result] = entries[index];\n    let match = matches.find(m => (m == null ? void 0 : m.route.id) === routeId); // If we don't have a match, then we can have a deferred result to do\n    // anything with.  This is for revalidating fetchers where the route was\n    // removed during HMR\n\n    if (!match) {\n      continue;\n    }\n\n    let currentMatch = currentMatches.find(m => m.route.id === match.route.id);\n    let isRevalidatingLoader = currentMatch != null && !isNewRouteInstance(currentMatch, match) && (currentLoaderData && currentLoaderData[match.route.id]) !== undefined;\n\n    if (isDeferredResult(result) && isRevalidatingLoader) {\n      // Note: we do not have to touch activeDeferreds here since we race them\n      // against the signal in resolveDeferredData and they'll get aborted\n      // there if needed\n      await resolveDeferredData(result, signal, false).then(result => {\n        if (result) {\n          results[routeId] = result;\n        }\n      });\n    }\n  }\n}\n\nasync function resolveFetcherDeferredResults(matches, results, revalidatingFetchers) {\n  for (let index = 0; index < revalidatingFetchers.length; index++) {\n    let {\n      key,\n      routeId,\n      controller\n    } = revalidatingFetchers[index];\n    let result = results[key];\n    let match = matches.find(m => (m == null ? void 0 : m.route.id) === routeId); // If we don't have a match, then we can have a deferred result to do\n    // anything with.  This is for revalidating fetchers where the route was\n    // removed during HMR\n\n    if (!match) {\n      continue;\n    }\n\n    if (isDeferredResult(result)) {\n      // Note: we do not have to touch activeDeferreds here since we race them\n      // against the signal in resolveDeferredData and they'll get aborted\n      // there if needed\n      invariant(controller, \"Expected an AbortController for revalidating fetcher deferred result\");\n      await resolveDeferredData(result, controller.signal, true).then(result => {\n        if (result) {\n          results[key] = result;\n        }\n      });\n    }\n  }\n}\n\nasync function resolveDeferredData(result, signal, unwrap) {\n  if (unwrap === void 0) {\n    unwrap = false;\n  }\n\n  let aborted = await result.deferredData.resolveData(signal);\n\n  if (aborted) {\n    return;\n  }\n\n  if (unwrap) {\n    try {\n      return {\n        type: ResultType.data,\n        data: result.deferredData.unwrappedData\n      };\n    } catch (e) {\n      // Handle any TrackedPromise._error values encountered while unwrapping\n      return {\n        type: ResultType.error,\n        error: e\n      };\n    }\n  }\n\n  return {\n    type: ResultType.data,\n    data: result.deferredData.data\n  };\n}\n\nfunction hasNakedIndexQuery(search) {\n  return new URLSearchParams(search).getAll(\"index\").some(v => v === \"\");\n}\n\nfunction getTargetMatch(matches, location) {\n  let search = typeof location === \"string\" ? parsePath(location).search : location.search;\n\n  if (matches[matches.length - 1].route.index && hasNakedIndexQuery(search || \"\")) {\n    // Return the leaf index route when index is present\n    return matches[matches.length - 1];\n  } // Otherwise grab the deepest \"path contributing\" match (ignoring index and\n  // pathless layout routes)\n\n\n  let pathMatches = getPathContributingMatches(matches);\n  return pathMatches[pathMatches.length - 1];\n}\n\nfunction getSubmissionFromNavigation(navigation) {\n  let {\n    formMethod,\n    formAction,\n    formEncType,\n    text,\n    formData,\n    json\n  } = navigation;\n\n  if (!formMethod || !formAction || !formEncType) {\n    return;\n  }\n\n  if (text != null) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData: undefined,\n      json: undefined,\n      text\n    };\n  } else if (formData != null) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData,\n      json: undefined,\n      text: undefined\n    };\n  } else if (json !== undefined) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData: undefined,\n      json,\n      text: undefined\n    };\n  }\n}\n\nfunction getLoadingNavigation(location, submission) {\n  if (submission) {\n    let navigation = {\n      state: \"loading\",\n      location,\n      formMethod: submission.formMethod,\n      formAction: submission.formAction,\n      formEncType: submission.formEncType,\n      formData: submission.formData,\n      json: submission.json,\n      text: submission.text\n    };\n    return navigation;\n  } else {\n    let navigation = {\n      state: \"loading\",\n      location,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      json: undefined,\n      text: undefined\n    };\n    return navigation;\n  }\n}\n\nfunction getSubmittingNavigation(location, submission) {\n  let navigation = {\n    state: \"submitting\",\n    location,\n    formMethod: submission.formMethod,\n    formAction: submission.formAction,\n    formEncType: submission.formEncType,\n    formData: submission.formData,\n    json: submission.json,\n    text: submission.text\n  };\n  return navigation;\n}\n\nfunction getLoadingFetcher(submission, data) {\n  if (submission) {\n    let fetcher = {\n      state: \"loading\",\n      formMethod: submission.formMethod,\n      formAction: submission.formAction,\n      formEncType: submission.formEncType,\n      formData: submission.formData,\n      json: submission.json,\n      text: submission.text,\n      data\n    };\n    return fetcher;\n  } else {\n    let fetcher = {\n      state: \"loading\",\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      json: undefined,\n      text: undefined,\n      data\n    };\n    return fetcher;\n  }\n}\n\nfunction getSubmittingFetcher(submission, existingFetcher) {\n  let fetcher = {\n    state: \"submitting\",\n    formMethod: submission.formMethod,\n    formAction: submission.formAction,\n    formEncType: submission.formEncType,\n    formData: submission.formData,\n    json: submission.json,\n    text: submission.text,\n    data: existingFetcher ? existingFetcher.data : undefined\n  };\n  return fetcher;\n}\n\nfunction getDoneFetcher(data) {\n  let fetcher = {\n    state: \"idle\",\n    formMethod: undefined,\n    formAction: undefined,\n    formEncType: undefined,\n    formData: undefined,\n    json: undefined,\n    text: undefined,\n    data\n  };\n  return fetcher;\n}\n\nfunction restoreAppliedTransitions(_window, transitions) {\n  try {\n    let sessionPositions = _window.sessionStorage.getItem(TRANSITIONS_STORAGE_KEY);\n\n    if (sessionPositions) {\n      let json = JSON.parse(sessionPositions);\n\n      for (let [k, v] of Object.entries(json || {})) {\n        if (v && Array.isArray(v)) {\n          transitions.set(k, new Set(v || []));\n        }\n      }\n    }\n  } catch (e) {// no-op, use default empty object\n  }\n}\n\nfunction persistAppliedTransitions(_window, transitions) {\n  if (transitions.size > 0) {\n    let json = {};\n\n    for (let [k, v] of transitions) {\n      json[k] = [...v];\n    }\n\n    try {\n      _window.sessionStorage.setItem(TRANSITIONS_STORAGE_KEY, JSON.stringify(json));\n    } catch (error) {\n      warning(false, \"Failed to save applied view transitions in sessionStorage (\" + error + \").\");\n    }\n  }\n} //#endregion\n\n\nexport { AbortedDeferredError, Action, IDLE_BLOCKER, IDLE_FETCHER, IDLE_NAVIGATION, UNSAFE_DEFERRED_SYMBOL, DeferredData as UNSAFE_DeferredData, ErrorResponseImpl as UNSAFE_ErrorResponseImpl, convertRouteMatchToUiMatch as UNSAFE_convertRouteMatchToUiMatch, convertRoutesToDataRoutes as UNSAFE_convertRoutesToDataRoutes, decodePath as UNSAFE_decodePath, getResolveToMatches as UNSAFE_getResolveToMatches, invariant as UNSAFE_invariant, warning as UNSAFE_warning, createBrowserHistory, createHashHistory, createMemoryHistory, createPath, createRouter, createStaticHandler, defer, generatePath, getStaticContextFromError, getToPathname, isDataWithResponseInit, isDeferredData, isRouteErrorResponse, joinPaths, json, matchPath, matchRoutes, normalizePathname, parsePath, redirect, redirectDocument, replace, resolvePath, resolveTo, stripBasename, data as unstable_data };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;EAAA;AACA;AACA;;AAEA;;AAEG;;;IACSA;;AAAZ,WAAYA,MAAZ,EAAkB;EAChB;;;;;;AAMG;EACHA;EAEA;;;;AAIG;;EACHA;EAEA;;;AAGG;;EACHA;AACD,CAtBD,EAAYA,MAAM,KAANA,MAAM,GAsBjB,EAtBiB,CAAlB;;AA2LA,MAAMC,iBAAiB,GAAG,UAA1B;AA+BA;;;AAGG;;AACa,6BACdC,OADc,EACoB;EAAA,IAAlCA,kBAAkC,EAAlC;IAAAA,UAAgC,EAAhCA;EAAkC;;EAElC,IAAI;IAAEC,cAAc,GAAG,CAAC,GAAD,CAAnB;IAA0BC,YAA1B;IAAwCC,QAAQ,GAAG;EAAnD,IAA6DH,OAAjE;EACA,IAAII,OAAJ,CAHkC,CAGV;;EACxBA,OAAO,GAAGH,cAAc,CAACI,GAAfJ,CAAmB,CAACK,KAAD,EAAQC,KAAR,KAC3BC,oBAAoB,CAClBF,KADkB,EAElB,OAAOA,KAAP,KAAiB,QAAjB,GAA4B,IAA5B,GAAmCA,KAAK,CAACG,KAFvB,EAGlBF,KAAK,KAAK,CAAVA,GAAc,SAAdA,GAA0BG,SAHR,CADZT,CAAVG;EAOA,IAAIG,KAAK,GAAGI,UAAU,CACpBT,YAAY,IAAI,IAAhBA,GAAuBE,OAAO,CAACQ,MAARR,GAAiB,CAAxCF,GAA4CA,YADxB,CAAtB;EAGA,IAAIW,MAAM,GAAGf,MAAM,CAACgB,GAApB;EACA,IAAIC,QAAQ,GAAoB,IAAhC;;EAEA,SAASJ,UAAT,CAAoBK,CAApB,EAA6B;IAC3B,OAAOC,IAAI,CAACC,GAALD,CAASA,IAAI,CAACE,GAALF,CAASD,CAATC,EAAY,CAAZA,CAATA,EAAyBb,OAAO,CAACQ,MAARR,GAAiB,CAA1Ca,CAAP;EACF;;EACA,SAASG,kBAAT,GAA2B;IACzB,OAAOhB,OAAO,CAACG,KAAD,CAAd;EACF;;EACA,SAASC,oBAAT,CACEa,EADF,EAEEZ,KAFF,EAGEa,GAHF,EAGc;IAAA,IADZb,KAAa,WACD,EADC;MAAbA,KAAa,OAAbA;IAAiB;;IAGjB,IAAIc,QAAQ,GAAGC,cAAc,CAC3BpB,OAAO,GAAGgB,kBAAkB,GAAGK,QAAxB,GAAmC,GADf,EAE3BJ,EAF2B,EAG3BZ,KAH2B,EAI3Ba,GAJ2B,CAA7B;IAMAI,OAAO,CACLH,QAAQ,CAACE,QAATF,CAAkBI,MAAlBJ,CAAyB,CAAzBA,MAAgC,GAD3B,EAC8B,6DACwBK,IAAI,CAACC,SAALD,CACzDP,EADyDO,CAFtD,CAAPF;IAMA,OAAOH,QAAP;EACF;;EAEA,SAASO,UAAT,CAAoBT,EAApB,EAA0B;IACxB,OAAO,OAAOA,EAAP,KAAc,QAAd,GAAyBA,EAAzB,GAA8BU,UAAU,CAACV,EAAD,CAA/C;EACF;;EAEA,IAAIW,OAAO,GAAkB;IAC3B,IAAIzB,KAAJ,GAAS;MACP,OAAOA,KAAP;IACD,CAH0B;;IAI3B,IAAIM,MAAJ,GAAU;MACR,OAAOA,MAAP;IACD,CAN0B;;IAO3B,IAAIU,QAAJ,GAAY;MACV,OAAOH,kBAAkB,EAAzB;IACD,CAT0B;;IAU3BU,UAV2B;;IAW3BG,SAASA,CAACZ,EAADY,EAAG;MACV,OAAO,IAAIC,GAAJ,CAAQJ,UAAU,CAACT,EAAD,CAAlB,EAAwB,kBAAxB,CAAP;IACD,CAb0B;;IAc3Bc,cAAcA,CAACd,EAADc,EAAO;MACnB,IAAIC,IAAI,GAAG,OAAOf,EAAP,KAAc,QAAd,GAAyBgB,SAAS,CAAChB,EAAD,CAAlC,GAAyCA,EAApD;MACA,OAAO;QACLI,QAAQ,EAAEW,IAAI,CAACX,QAALW,IAAiB,EADtB;QAELE,MAAM,EAAEF,IAAI,CAACE,MAALF,IAAe,EAFlB;QAGLG,IAAI,EAAEH,IAAI,CAACG,IAALH,IAAa;MAHd,CAAP;IAKD,CArB0B;;IAsB3BI,IAAIA,CAACnB,EAADmB,EAAK/B,KAAL+B,EAAU;MACZ3B,MAAM,GAAGf,MAAM,CAAC2C,IAAhB5B;MACA,IAAI6B,YAAY,GAAGlC,oBAAoB,CAACa,EAAD,EAAKZ,KAAL,CAAvC;MACAF,KAAK,IAAI,CAATA;MACAH,OAAO,CAACuC,MAARvC,CAAeG,KAAfH,EAAsBA,OAAO,CAACQ,MAA9BR,EAAsCsC,YAAtCtC;;MACA,IAAID,QAAQ,IAAIY,QAAhB,EAA0B;QACxBA,QAAQ,CAAC;UAAEF,MAAF;UAAUU,QAAQ,EAAEmB,YAApB;UAAkCE,KAAK,EAAE;QAAzC,CAAD,CAAR7B;MACD;IACF,CA9B0B;;IA+B3B8B,OAAOA,CAACxB,EAADwB,EAAKpC,KAALoC,EAAU;MACfhC,MAAM,GAAGf,MAAM,CAACgD,OAAhBjC;MACA,IAAI6B,YAAY,GAAGlC,oBAAoB,CAACa,EAAD,EAAKZ,KAAL,CAAvC;MACAL,OAAO,CAACG,KAAD,CAAPH,GAAiBsC,YAAjBtC;;MACA,IAAID,QAAQ,IAAIY,QAAhB,EAA0B;QACxBA,QAAQ,CAAC;UAAEF,MAAF;UAAUU,QAAQ,EAAEmB,YAApB;UAAkCE,KAAK,EAAE;QAAzC,CAAD,CAAR7B;MACD;IACF,CAtC0B;;IAuC3BgC,EAAEA,CAACH,KAADG,EAAM;MACNlC,MAAM,GAAGf,MAAM,CAACgB,GAAhBD;MACA,IAAImC,SAAS,GAAGrC,UAAU,CAACJ,KAAK,GAAGqC,KAAT,CAA1B;MACA,IAAIF,YAAY,GAAGtC,OAAO,CAAC4C,SAAD,CAA1B;MACAzC,KAAK,GAAGyC,SAARzC;;MACA,IAAIQ,QAAJ,EAAc;QACZA,QAAQ,CAAC;UAAEF,MAAF;UAAUU,QAAQ,EAAEmB,YAApB;UAAkCE;QAAlC,CAAD,CAAR7B;MACD;IACF,CA/C0B;;IAgD3BkC,MAAMA,CAACC,EAADD,EAAa;MACjBlC,QAAQ,GAAGmC,EAAXnC;MACA,OAAO,MAAK;QACVA,QAAQ,GAAG,IAAXA;MACD,CAFD;IAGF;;EArD2B,CAA7B;EAwDA,OAAOiB,OAAP;AACF;AAkBA;;;;;;AAMG;;;AACa,8BACdhC,OADc,EACqB;EAAA,IAAnCA,kBAAmC,EAAnC;IAAAA,UAAiC,EAAjCA;EAAmC;;EAEnC,SAASmD,qBAAT,CACEC,MADF,EAEEC,aAFF,EAEkC;IAEhC,IAAI;MAAE5B,QAAF;MAAYa,MAAZ;MAAoBC;IAApB,IAA6Ba,MAAM,CAAC7B,QAAxC;IACA,OAAOC,cAAc,CACnB,EADmB,EAEnB;MAAEC,QAAF;MAAYa,MAAZ;MAAoBC;IAApB,CAFmB,EAGnB;IACCc,aAAa,CAAC5C,KAAd4C,IAAuBA,aAAa,CAAC5C,KAAd4C,CAAoBC,GAA3CD,IAAmD,IAJjC,EAKlBA,aAAa,CAAC5C,KAAd4C,IAAuBA,aAAa,CAAC5C,KAAd4C,CAAoB/B,GAA3C+B,IAAmD,SALjC,CAArB;EAOF;;EAEA,SAASE,iBAAT,CAA2BH,MAA3B,EAA2C/B,EAA3C,EAAiD;IAC/C,OAAO,OAAOA,EAAP,KAAc,QAAd,GAAyBA,EAAzB,GAA8BU,UAAU,CAACV,EAAD,CAA/C;EACF;;EAEA,OAAOmC,kBAAkB,CACvBL,qBADuB,EAEvBI,iBAFuB,EAGvB,IAHuB,EAIvBvD,OAJuB,CAAzB;AAMF;AAsBA;;;;;;;AAOG;;;AACa,2BACdA,OADc,EACkB;EAAA,IAAhCA,kBAAgC,EAAhC;IAAAA,UAA8B,EAA9BA;EAAgC;;EAEhC,SAASyD,kBAAT,CACEL,MADF,EAEEC,aAFF,EAEkC;IAEhC,IAAI;MACF5B,QAAQ,GAAG,GADT;MAEFa,MAAM,GAAG,EAFP;MAGFC,IAAI,GAAG;IAHL,IAIAF,SAAS,CAACe,MAAM,CAAC7B,QAAP6B,CAAgBb,IAAhBa,CAAqBM,MAArBN,CAA4B,CAA5BA,CAAD,CAJb,CAFgC,CAQhC;IACA;IACA;IACA;IACA;IACA;;IACA,IAAI,CAAC3B,QAAQ,CAACkC,UAATlC,CAAoB,GAApBA,CAAD,IAA6B,CAACA,QAAQ,CAACkC,UAATlC,CAAoB,GAApBA,CAAlC,EAA4D;MAC1DA,QAAQ,GAAG,MAAMA,QAAjBA;IACD;;IAED,OAAOD,cAAc,CACnB,EADmB,EAEnB;MAAEC,QAAF;MAAYa,MAAZ;MAAoBC;IAApB,CAFmB,EAGnB;IACCc,aAAa,CAAC5C,KAAd4C,IAAuBA,aAAa,CAAC5C,KAAd4C,CAAoBC,GAA3CD,IAAmD,IAJjC,EAKlBA,aAAa,CAAC5C,KAAd4C,IAAuBA,aAAa,CAAC5C,KAAd4C,CAAoB/B,GAA3C+B,IAAmD,SALjC,CAArB;EAOF;;EAEA,SAASO,cAAT,CAAwBR,MAAxB,EAAwC/B,EAAxC,EAA8C;IAC5C,IAAIwC,IAAI,GAAGT,MAAM,CAACU,QAAPV,CAAgBW,aAAhBX,CAA8B,MAA9BA,CAAX;IACA,IAAIY,IAAI,GAAG,EAAX;;IAEA,IAAIH,IAAI,IAAIA,IAAI,CAACI,YAALJ,CAAkB,MAAlBA,CAAZ,EAAuC;MACrC,IAAIK,GAAG,GAAGd,MAAM,CAAC7B,QAAP6B,CAAgBY,IAA1B;MACA,IAAIG,SAAS,GAAGD,GAAG,CAACE,OAAJF,CAAY,GAAZA,CAAhB;MACAF,IAAI,GAAGG,SAAS,KAAK,CAAC,CAAfA,GAAmBD,GAAnBC,GAAyBD,GAAG,CAACG,KAAJH,CAAU,CAAVA,EAAaC,SAAbD,CAAhCF;IACD;;IAED,OAAOA,IAAI,GAAG,GAAPA,IAAc,OAAO3C,EAAP,KAAc,QAAd,GAAyBA,EAAzB,GAA8BU,UAAU,CAACV,EAAD,CAAtD2C,CAAP;EACF;;EAEA,SAASM,oBAAT,CAA8B/C,QAA9B,EAAkDF,EAAlD,EAAwD;IACtDK,OAAO,CACLH,QAAQ,CAACE,QAATF,CAAkBI,MAAlBJ,CAAyB,CAAzBA,MAAgC,GAD3B,EAC8B,+DAC0BK,IAAI,CAACC,SAALD,CAC3DP,EAD2DO,CAD1B,GAGlC,GAJI,CAAPF;EAMF;;EAEA,OAAO8B,kBAAkB,CACvBC,kBADuB,EAEvBG,cAFuB,EAGvBU,oBAHuB,EAIvBtE,OAJuB,CAAzB;AAMF;;AAegB,mBAAUuE,KAAV,EAAsBC,OAAtB,EAAsC;EACpD,IAAID,KAAK,KAAK,KAAVA,IAAmBA,KAAK,KAAK,IAA7BA,IAAqC,OAAOA,KAAP,KAAiB,WAA1D,EAAuE;IACrE,MAAM,IAAIE,KAAJ,CAAUD,OAAV,CAAN;EACD;AACH;;AAEgB,iBAAQE,IAAR,EAAmBF,OAAnB,EAAkC;EAChD,IAAI,CAACE,IAAL,EAAW;IACT;IACA,IAAI,OAAOC,OAAP,KAAmB,WAAvB,EAAoCA,OAAO,CAACC,IAARD,CAAaH,OAAbG;;IAEpC,IAAI;MACF;MACA;MACA;MACA;MACA;MACA,MAAM,IAAIF,KAAJ,CAAUD,OAAV,CAAN,CANE,CAOF;IACD,CARD,CAQE,OAAOK,CAAP,EAAU,CAAE;EACf;AACH;;AAEA,SAASC,SAAT,GAAkB;EAChB,OAAO7D,IAAI,CAAC8D,MAAL9D,GAAc+D,QAAd/D,CAAuB,EAAvBA,EAA2ByC,MAA3BzC,CAAkC,CAAlCA,EAAqC,CAArCA,CAAP;AACF;AAEA;;AAEG;;;AACH,SAASgE,eAAT,CAAyB1D,QAAzB,EAA6ChB,KAA7C,EAA0D;EACxD,OAAO;IACL+C,GAAG,EAAE/B,QAAQ,CAACd,KADT;IAELa,GAAG,EAAEC,QAAQ,CAACD,GAFT;IAGL4D,GAAG,EAAE3E;EAHA,CAAP;AAKF;AAEA;;AAEG;;;AACG,SAAUiB,cAAV,CACJ2D,OADI,EAEJ9D,EAFI,EAGJZ,KAHI,EAIJa,GAJI,EAIQ;EAAA,IADZb,gBACY,EADZ;IAAAA,QAAa,IAAbA;EAAiB;;EAGjB,IAAIc,QAAQ;IACVE,QAAQ,EAAE,OAAO0D,OAAP,KAAmB,QAAnB,GAA8BA,OAA9B,GAAwCA,OAAO,CAAC1D,QADhD;IAEVa,MAAM,EAAE,EAFE;IAGVC,IAAI,EAAE;EAHI,GAIN,OAAOlB,EAAP,KAAc,QAAd,GAAyBgB,SAAS,CAAChB,EAAD,CAAlC,GAAyCA,EAJnC,EAIqC;IAC/CZ,KAD+C;IAE/C;IACA;IACA;IACA;IACAa,GAAG,EAAGD,EAAE,IAAKA,EAAe,CAACC,GAAvBD,IAA+BC,GAA/BD,IAAsCyD,SAAS;EANN,CAJrC,CAAZ;;EAYA,OAAOvD,QAAP;AACF;AAEA;;AAEG;;;AACa,oBAAU6D,IAAV,EAIA;EAAA,IAJW;IACzB3D,QAAQ,GAAG,GADc;IAEzBa,MAAM,GAAG,EAFgB;IAGzBC,IAAI,GAAG;EAHkB,IAIX6C;EACd,IAAI9C,MAAM,IAAIA,MAAM,KAAK,GAAzB,EACEb,QAAQ,IAAIa,MAAM,CAACX,MAAPW,CAAc,CAAdA,MAAqB,GAArBA,GAA2BA,MAA3BA,GAAoC,MAAMA,MAAtDb;EACF,IAAIc,IAAI,IAAIA,IAAI,KAAK,GAArB,EACEd,QAAQ,IAAIc,IAAI,CAACZ,MAALY,CAAY,CAAZA,MAAmB,GAAnBA,GAAyBA,IAAzBA,GAAgC,MAAMA,IAAlDd;EACF,OAAOA,QAAP;AACF;AAEA;;AAEG;;;AACG,SAAUY,SAAV,CAAoBD,IAApB,EAAgC;EACpC,IAAIiD,UAAU,GAAkB,EAAhC;;EAEA,IAAIjD,IAAJ,EAAU;IACR,IAAI+B,SAAS,GAAG/B,IAAI,CAACgC,OAALhC,CAAa,GAAbA,CAAhB;;IACA,IAAI+B,SAAS,IAAI,CAAjB,EAAoB;MAClBkB,UAAU,CAAC9C,IAAX8C,GAAkBjD,IAAI,CAACsB,MAALtB,CAAY+B,SAAZ/B,CAAlBiD;MACAjD,IAAI,GAAGA,IAAI,CAACsB,MAALtB,CAAY,CAAZA,EAAe+B,SAAf/B,CAAPA;IACD;;IAED,IAAIkD,WAAW,GAAGlD,IAAI,CAACgC,OAALhC,CAAa,GAAbA,CAAlB;;IACA,IAAIkD,WAAW,IAAI,CAAnB,EAAsB;MACpBD,UAAU,CAAC/C,MAAX+C,GAAoBjD,IAAI,CAACsB,MAALtB,CAAYkD,WAAZlD,CAApBiD;MACAjD,IAAI,GAAGA,IAAI,CAACsB,MAALtB,CAAY,CAAZA,EAAekD,WAAflD,CAAPA;IACD;;IAED,IAAIA,IAAJ,EAAU;MACRiD,UAAU,CAAC5D,QAAX4D,GAAsBjD,IAAtBiD;IACD;EACF;;EAED,OAAOA,UAAP;AACF;;AASA,SAAS7B,kBAAT,CACE+B,WADF,EAEEzD,UAFF,EAGE0D,gBAHF,EAIExF,OAJF,EAIiC;EAAA,IAA/BA,kBAA+B,EAA/B;IAAAA,UAA6B,EAA7BA;EAA+B;;EAE/B,IAAI;IAAEoD,MAAM,GAAGU,QAAQ,CAAC2B,WAApB;IAAkCtF,QAAQ,GAAG;EAA7C,IAAuDH,OAA3D;EACA,IAAIqD,aAAa,GAAGD,MAAM,CAACpB,OAA3B;EACA,IAAInB,MAAM,GAAGf,MAAM,CAACgB,GAApB;EACA,IAAIC,QAAQ,GAAoB,IAAhC;EAEA,IAAIR,KAAK,GAAGmF,QAAQ,EAApB,CAP+B,CAQ/B;EACA;EACA;;EACA,IAAInF,KAAK,IAAI,IAAb,EAAmB;IACjBA,KAAK,GAAG,CAARA;IACA8C,aAAa,CAACsC,YAAdtC,CAA0BuC,SAAMvC,EAAN,EAAMA,aAAa,CAAC5C,KAApB,EAAyB;MAAEyE,GAAG,EAAE3E;IAAP,CAAzB,CAA1B8C,EAAmE,EAAnEA;EACD;;EAED,SAASqC,QAAT,GAAiB;IACf,IAAIjF,KAAK,GAAG4C,aAAa,CAAC5C,KAAd4C,IAAuB;MAAE6B,GAAG,EAAE;IAAP,CAAnC;IACA,OAAOzE,KAAK,CAACyE,GAAb;EACF;;EAEA,SAASW,SAAT,GAAkB;IAChBhF,MAAM,GAAGf,MAAM,CAACgB,GAAhBD;IACA,IAAImC,SAAS,GAAG0C,QAAQ,EAAxB;IACA,IAAI9C,KAAK,GAAGI,SAAS,IAAI,IAAbA,GAAoB,IAApBA,GAA2BA,SAAS,GAAGzC,KAAnD;IACAA,KAAK,GAAGyC,SAARzC;;IACA,IAAIQ,QAAJ,EAAc;MACZA,QAAQ,CAAC;QAAEF,MAAF;QAAUU,QAAQ,EAAES,OAAO,CAACT,QAA5B;QAAsCqB;MAAtC,CAAD,CAAR7B;IACD;EACH;;EAEA,SAASyB,IAAT,CAAcnB,EAAd,EAAsBZ,KAAtB,EAAiC;IAC/BI,MAAM,GAAGf,MAAM,CAAC2C,IAAhB5B;IACA,IAAIU,QAAQ,GAAGC,cAAc,CAACQ,OAAO,CAACT,QAAT,EAAmBF,EAAnB,EAAuBZ,KAAvB,CAA7B;IACA,IAAI+E,gBAAJ,EAAsBA,gBAAgB,CAACjE,QAAD,EAAWF,EAAX,CAAhBmE;IAEtBjF,KAAK,GAAGmF,QAAQ,KAAK,CAArBnF;IACA,IAAIuF,YAAY,GAAGb,eAAe,CAAC1D,QAAD,EAAWhB,KAAX,CAAlC;IACA,IAAI2D,GAAG,GAAGlC,OAAO,CAACF,UAARE,CAAmBT,QAAnBS,CAAV,CAP+B,CAS/B;;IACA,IAAI;MACFqB,aAAa,CAAC0C,SAAd1C,CAAwByC,YAAxBzC,EAAsC,EAAtCA,EAA0Ca,GAA1Cb;IACD,CAFD,CAEE,OAAO2C,KAAP,EAAc;MACd;MACA;MACA;MACA;MACA,IAAIA,KAAK,YAAYC,YAAjBD,IAAiCA,KAAK,CAACE,IAANF,KAAe,gBAApD,EAAsE;QACpE,MAAMA,KAAN;MACD,CAPa,CAQd;MACA;;;MACA5C,MAAM,CAAC7B,QAAP6B,CAAgB+C,MAAhB/C,CAAuBc,GAAvBd;IACD;;IAED,IAAIjD,QAAQ,IAAIY,QAAhB,EAA0B;MACxBA,QAAQ,CAAC;QAAEF,MAAF;QAAUU,QAAQ,EAAES,OAAO,CAACT,QAA5B;QAAsCqB,KAAK,EAAE;MAA7C,CAAD,CAAR7B;IACD;EACH;;EAEA,SAAS8B,OAAT,CAAiBxB,EAAjB,EAAyBZ,KAAzB,EAAoC;IAClCI,MAAM,GAAGf,MAAM,CAACgD,OAAhBjC;IACA,IAAIU,QAAQ,GAAGC,cAAc,CAACQ,OAAO,CAACT,QAAT,EAAmBF,EAAnB,EAAuBZ,KAAvB,CAA7B;IACA,IAAI+E,gBAAJ,EAAsBA,gBAAgB,CAACjE,QAAD,EAAWF,EAAX,CAAhBmE;IAEtBjF,KAAK,GAAGmF,QAAQ,EAAhBnF;IACA,IAAIuF,YAAY,GAAGb,eAAe,CAAC1D,QAAD,EAAWhB,KAAX,CAAlC;IACA,IAAI2D,GAAG,GAAGlC,OAAO,CAACF,UAARE,CAAmBT,QAAnBS,CAAV;IACAqB,aAAa,CAACsC,YAAdtC,CAA2ByC,YAA3BzC,EAAyC,EAAzCA,EAA6Ca,GAA7Cb;;IAEA,IAAIlD,QAAQ,IAAIY,QAAhB,EAA0B;MACxBA,QAAQ,CAAC;QAAEF,MAAF;QAAUU,QAAQ,EAAES,OAAO,CAACT,QAA5B;QAAsCqB,KAAK,EAAE;MAA7C,CAAD,CAAR7B;IACD;EACH;;EAEA,SAASkB,SAAT,CAAmBZ,EAAnB,EAAyB;IACvB;IACA;IACA;IACA,IAAIwC,IAAI,GACNT,MAAM,CAAC7B,QAAP6B,CAAgBgD,MAAhBhD,KAA2B,MAA3BA,GACIA,MAAM,CAAC7B,QAAP6B,CAAgBgD,MADpBhD,GAEIA,MAAM,CAAC7B,QAAP6B,CAAgBY,IAHtB;IAKA,IAAIA,IAAI,GAAG,OAAO3C,EAAP,KAAc,QAAd,GAAyBA,EAAzB,GAA8BU,UAAU,CAACV,EAAD,CAAnD,CATuB,CAUvB;IACA;IACA;;IACA2C,IAAI,GAAGA,IAAI,CAACnB,OAALmB,CAAa,IAAbA,EAAmB,KAAnBA,CAAPA;IACAqC,SAAS,CACPxC,IADO,EAE+DG,4EAF/D,CAATqC;IAIA,OAAO,IAAInE,GAAJ,CAAQ8B,IAAR,EAAcH,IAAd,CAAP;EACF;;EAEA,IAAI7B,OAAO,GAAY;IACrB,IAAInB,MAAJ,GAAU;MACR,OAAOA,MAAP;IACD,CAHoB;;IAIrB,IAAIU,QAAJ,GAAY;MACV,OAAOgE,WAAW,CAACnC,MAAD,EAASC,aAAT,CAAlB;IACD,CANoB;;IAOrBJ,MAAMA,CAACC,EAADD,EAAa;MACjB,IAAIlC,QAAJ,EAAc;QACZ,MAAM,IAAI0D,KAAJ,CAAU,4CAAV,CAAN;MACD;;MACDrB,MAAM,CAACkD,gBAAPlD,CAAwBrD,iBAAxBqD,EAA2CyC,SAA3CzC;MACArC,QAAQ,GAAGmC,EAAXnC;MAEA,OAAO,MAAK;QACVqC,MAAM,CAACmD,mBAAPnD,CAA2BrD,iBAA3BqD,EAA8CyC,SAA9CzC;QACArC,QAAQ,GAAG,IAAXA;MACD,CAHD;IAID,CAlBoB;;IAmBrBe,UAAUA,CAACT,EAADS,EAAG;MACX,OAAOA,UAAU,CAACsB,MAAD,EAAS/B,EAAT,CAAjB;IACD,CArBoB;;IAsBrBY,SAtBqB;;IAuBrBE,cAAcA,CAACd,EAADc,EAAG;MACf;MACA,IAAI+B,GAAG,GAAGjC,SAAS,CAACZ,EAAD,CAAnB;MACA,OAAO;QACLI,QAAQ,EAAEyC,GAAG,CAACzC,QADT;QAELa,MAAM,EAAE4B,GAAG,CAAC5B,MAFP;QAGLC,IAAI,EAAE2B,GAAG,CAAC3B;MAHL,CAAP;IAKD,CA/BoB;;IAgCrBC,IAhCqB;IAiCrBK,OAjCqB;;IAkCrBE,EAAEA,CAAC/B,CAAD+B,EAAE;MACF,OAAOM,aAAa,CAACN,EAAdM,CAAiBrC,CAAjBqC,CAAP;IACF;;EApCqB,CAAvB;EAuCA,OAAOrB,OAAP;AACF,C,CAEA;;;AC/tBA,IAAYwE,UAAZ;;AAAA,WAAYA,UAAZ,EAAsB;EACpBA;EACAA;EACAA;EACAA;AACD,CALD,EAAYA,UAAU,KAAVA,UAAU,GAKrB,EALqB,CAAtB;;AAwRO,MAAMC,kBAAkB,GAAG,IAAIC,GAAJ,CAA2B,CAC3D,MAD2D,EAE3D,eAF2D,EAG3D,MAH2D,EAI3D,IAJ2D,EAK3D,OAL2D,EAM3D,UAN2D,CAA3B,CAA3B;;AA2JP,SAASC,YAAT,CACEC,KADF,EAC4B;EAE1B,OAAOA,KAAK,CAACrG,KAANqG,KAAgB,IAAvB;AACF,C,CAEA;AACA;;;AACM,SAAUC,yBAAV,CACJC,MADI,EAEJC,kBAFI,EAGJC,UAHI,EAIJC,QAJI,EAIwB;EAAA,IAD5BD,UAAuB,WACK,EADL;IAAvBA,UAAuB,KAAvBA;EAAyB;;EAAA,IACzBC,mBADyB,EACzB;IAAAA,WAA0B,EAA1BA;EAA4B;;EAE5B,OAAOH,MAAM,CAACzG,GAAPyG,CAAW,CAACF,KAAD,EAAQrG,KAAR,KAAiB;IACjC,IAAI2G,QAAQ,GAAG,CAAC,GAAGF,UAAJ,EAAgBG,MAAM,CAAC5G,KAAD,CAAtB,CAAf;IACA,IAAI6G,EAAE,GAAG,OAAOR,KAAK,CAACQ,EAAb,KAAoB,QAApB,GAA+BR,KAAK,CAACQ,EAArC,GAA0CF,QAAQ,CAACG,IAATH,CAAc,GAAdA,CAAnD;IACAb,SAAS,CACPO,KAAK,CAACrG,KAANqG,KAAgB,IAAhBA,IAAwB,CAACA,KAAK,CAACU,QADxB,EACgC,2CADhC,CAATjB;IAIAA,SAAS,CACP,CAACY,QAAQ,CAACG,EAAD,CADF,EAEP,wCAAqCA,EAArC,GACE,aADF,GACE,wDAHK,CAATf;;IAMA,IAAIM,YAAY,CAACC,KAAD,CAAhB,EAAyB;MACvB,IAAIW,UAAU,gBACTX,KADS,EAETG,kBAAkB,CAACH,KAAD,CAFT,EAEgB;QAC5BQ;MAD4B,CAFhB,CAAd;;MAKAH,QAAQ,CAACG,EAAD,CAARH,GAAeM,UAAfN;MACA,OAAOM,UAAP;IACD,CARD,MAQO;MACL,IAAIC,iBAAiB,gBAChBZ,KADgB,EAEhBG,kBAAkB,CAACH,KAAD,CAFF,EAES;QAC5BQ,EAD4B;QAE5BE,QAAQ,EAAE5G;MAFkB,CAFT,CAArB;;MAMAuG,QAAQ,CAACG,EAAD,CAARH,GAAeO,iBAAfP;;MAEA,IAAIL,KAAK,CAACU,QAAV,EAAoB;QAClBE,iBAAiB,CAACF,QAAlBE,GAA6BX,yBAAyB,CACpDD,KAAK,CAACU,QAD8C,EAEpDP,kBAFoD,EAGpDG,QAHoD,EAIpDD,QAJoD,CAAtDO;MAMD;;MAED,OAAOA,iBAAP;IACD;EACF,CAzCMV,CAAP;AA0CF;AAEA;;;;AAIG;;;AACG,SAAUW,WAAV,CAGJX,MAHI,EAIJY,WAJI,EAKJC,QALI,EAKU;EAAA,IAAdA,QAAQ,WAAM,EAAN;IAARA,QAAQ,GAAG,GAAXA;EAAc;;EAEd,OAAOC,eAAe,CAACd,MAAD,EAASY,WAAT,EAAsBC,QAAtB,EAAgC,KAAhC,CAAtB;AACF;;AAEM,SAAUC,eAAV,CAGJd,MAHI,EAIJY,WAJI,EAKJC,QALI,EAMJE,YANI,EAMiB;EAErB,IAAItG,QAAQ,GACV,OAAOmG,WAAP,KAAuB,QAAvB,GAAkCrF,SAAS,CAACqF,WAAD,CAA3C,GAA2DA,WAD7D;EAGA,IAAIjG,QAAQ,GAAGqG,aAAa,CAACvG,QAAQ,CAACE,QAATF,IAAqB,GAAtB,EAA2BoG,QAA3B,CAA5B;;EAEA,IAAIlG,QAAQ,IAAI,IAAhB,EAAsB;IACpB,OAAO,IAAP;EACD;;EAED,IAAIsG,QAAQ,GAAGC,aAAa,CAAClB,MAAD,CAA5B;EACAmB,iBAAiB,CAACF,QAAD,CAAjBE;EAEA,IAAIC,OAAO,GAAG,IAAd;;EACA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBD,OAAO,IAAI,IAAXA,IAAmBC,CAAC,GAAGJ,QAAQ,CAACnH,MAAhD,EAAwD,EAAEuH,CAA1D,EAA6D;IAC3D;IACA;IACA;IACA;IACA;IACA;IACA,IAAIC,OAAO,GAAGC,UAAU,CAAC5G,QAAD,CAAxB;IACAyG,OAAO,GAAGI,gBAAgB,CACxBP,QAAQ,CAACI,CAAD,CADgB,EAExBC,OAFwB,EAGxBP,YAHwB,CAA1BK;EAKD;;EAED,OAAOA,OAAP;AACF;;AAUgB,oCACdK,KADc,EAEdC,UAFc,EAEO;EAErB,IAAI;IAAE5B,KAAF;IAASnF,QAAT;IAAmBgH;EAAnB,IAA8BF,KAAlC;EACA,OAAO;IACLnB,EAAE,EAAER,KAAK,CAACQ,EADL;IAEL3F,QAFK;IAGLgH,MAHK;IAILC,IAAI,EAAEF,UAAU,CAAC5B,KAAK,CAACQ,EAAP,CAJX;IAKLuB,MAAM,EAAE/B,KAAK,CAAC+B;EALT,CAAP;AAOF;;AAmBA,SAASX,aAAT,CAGElB,MAHF,EAIEiB,QAJF,EAKEa,WALF,EAME5B,UANF,EAMiB;EAAA,IAFfe,QAA2C,WAE5B,EAF4B;IAA3CA,QAA2C,KAA3CA;EAA6C;;EAAA,IAC7Ca,sBAD6C,EAC7C;IAAAA,cAA4C,EAA5CA;EAA8C;;EAAA,IAC9C5B,UAAU,WADoC,EACpC;IAAVA,UAAU,GAAG,EAAbA;EAAe;;EAEf,IAAI6B,YAAY,GAAGA,CACjBjC,KADiBiC,EAEjBtI,KAFiBsI,EAGjBC,YAHiBD,KAIf;IACF,IAAIE,IAAI,GAA+B;MACrCD,YAAY,EACVA,YAAY,KAAKpI,SAAjBoI,GAA6BlC,KAAK,CAACxE,IAANwE,IAAc,EAA3CkC,GAAgDA,YAFb;MAGrCE,aAAa,EAAEpC,KAAK,CAACoC,aAANpC,KAAwB,IAHF;MAIrCqC,aAAa,EAAE1I,KAJsB;MAKrCqG;IALqC,CAAvC;;IAQA,IAAImC,IAAI,CAACD,YAALC,CAAkBpF,UAAlBoF,CAA6B,GAA7BA,CAAJ,EAAuC;MACrC1C,SAAS,CACP0C,IAAI,CAACD,YAALC,CAAkBpF,UAAlBoF,CAA6B/B,UAA7B+B,CADO,EAEP,2BAAwBA,IAAI,CAACD,YAA7B,GAAyC,uBAAzC,IAAyC,OACnC9B,UADmC,GACzB,gDADhB,IAC+D,6DAHxD,CAATX;MAOA0C,IAAI,CAACD,YAALC,GAAoBA,IAAI,CAACD,YAALC,CAAkB1E,KAAlB0E,CAAwB/B,UAAU,CAACpG,MAAnCmI,CAApBA;IACD;;IAED,IAAI3G,IAAI,GAAG8G,SAAS,CAAC,CAAClC,UAAD,EAAa+B,IAAI,CAACD,YAAlB,CAAD,CAApB;IACA,IAAIK,UAAU,GAAGP,WAAW,CAACQ,MAAZR,CAAmBG,IAAnBH,CAAjB,CArBE,CAuBF;IACA;IACA;;IACA,IAAIhC,KAAK,CAACU,QAANV,IAAkBA,KAAK,CAACU,QAANV,CAAehG,MAAfgG,GAAwB,CAA9C,EAAiD;MAC/CP,SAAS,EACP;MACA;MACAO,KAAK,CAACrG,KAANqG,KAAgB,IAHT,EAIP,6DACuCxE,+CAAI,KAD3C,CAJO,CAATiE;MAOA2B,aAAa,CAACpB,KAAK,CAACU,QAAP,EAAiBS,QAAjB,EAA2BoB,UAA3B,EAAuC/G,IAAvC,CAAb4F;IACD,CAnCC,CAqCF;IACA;;;IACA,IAAIpB,KAAK,CAACxE,IAANwE,IAAc,IAAdA,IAAsB,CAACA,KAAK,CAACrG,KAAjC,EAAwC;MACtC;IACD;;IAEDwH,QAAQ,CAACvF,IAATuF,CAAc;MACZ3F,IADY;MAEZiH,KAAK,EAAEC,YAAY,CAAClH,IAAD,EAAOwE,KAAK,CAACrG,KAAb,CAFP;MAGZ4I;IAHY,CAAdpB;EAKD,CApDD;;EAqDAjB,MAAM,CAACyC,OAAPzC,CAAe,CAACF,KAAD,EAAQrG,KAAR,KAAiB;IAAA,iBAC9B;;;IACA,IAAIqG,KAAK,CAACxE,IAANwE,KAAe,EAAfA,IAAqB,iBAACA,KAAK,CAACxE,IAAP,KAAW,IAAX,IAACoH,YAAYC,QAAZD,CAAqB,GAArBA,CAAD,CAAzB,EAAqD;MACnDX,YAAY,CAACjC,KAAD,EAAQrG,KAAR,CAAZsI;IACD,CAFD,MAEO;MACL,KAAK,IAAIa,QAAT,IAAqBC,uBAAuB,CAAC/C,KAAK,CAACxE,IAAP,CAA5C,EAA0D;QACxDyG,YAAY,CAACjC,KAAD,EAAQrG,KAAR,EAAemJ,QAAf,CAAZb;MACD;IACF;EACF,CATD/B;EAWA,OAAOiB,QAAP;AACF;AAEA;;;;;;;;;;;;;AAaG;;;AACH,SAAS4B,uBAAT,CAAiCvH,IAAjC,EAA6C;EAC3C,IAAIwH,QAAQ,GAAGxH,IAAI,CAACyH,KAALzH,CAAW,GAAXA,CAAf;EACA,IAAIwH,QAAQ,CAAChJ,MAATgJ,KAAoB,CAAxB,EAA2B,OAAO,EAAP;EAE3B,IAAI,CAACE,KAAD,EAAQ,GAAGC,IAAX,IAAmBH,QAAvB,CAJ2C,CAM3C;;EACA,IAAII,UAAU,GAAGF,KAAK,CAACG,QAANH,CAAe,GAAfA,CAAjB,CAP2C,CAQ3C;;EACA,IAAII,QAAQ,GAAGJ,KAAK,CAACjH,OAANiH,CAAc,KAAdA,EAAqB,EAArBA,CAAf;;EAEA,IAAIC,IAAI,CAACnJ,MAALmJ,KAAgB,CAApB,EAAuB;IACrB;IACA;IACA,OAAOC,UAAU,GAAG,CAACE,QAAD,EAAW,EAAX,CAAH,GAAoB,CAACA,QAAD,CAArC;EACD;;EAED,IAAIC,YAAY,GAAGR,uBAAuB,CAACI,IAAI,CAAC1C,IAAL0C,CAAU,GAAVA,CAAD,CAA1C;EAEA,IAAIK,MAAM,GAAa,EAAvB,CAnB2C,CAqB3C;EACA;EACA;EACA;EACA;EACA;EACA;;EACAA,MAAM,CAAC5H,IAAP4H,CACE,GAAGD,YAAY,CAAC9J,GAAb8J,CAAkBE,OAAO,IAC1BA,OAAO,KAAK,EAAZA,GAAiBH,QAAjBG,GAA4B,CAACH,QAAD,EAAWG,OAAX,EAAoBhD,IAApB,CAAyB,GAAzB,CAD3B8C,CADLC,EA5B2C,CAkC3C;;EACA,IAAIJ,UAAJ,EAAgB;IACdI,MAAM,CAAC5H,IAAP4H,CAAY,GAAGD,YAAfC;EACD,CArC0C,CAuC3C;;;EACA,OAAOA,MAAM,CAAC/J,GAAP+J,CAAYV,QAAQ,IACzBtH,IAAI,CAACuB,UAALvB,CAAgB,GAAhBA,KAAwBsH,QAAQ,KAAK,EAArCtH,GAA0C,GAA1CA,GAAgDsH,QAD3CU,CAAP;AAGF;;AAEA,SAASnC,iBAAT,CAA2BF,QAA3B,EAAkD;EAChDA,QAAQ,CAACuC,IAATvC,CAAc,CAACwC,CAAD,EAAIC,CAAJ,KACZD,CAAC,CAAClB,KAAFkB,KAAYC,CAAC,CAACnB,KAAdkB,GACIC,CAAC,CAACnB,KAAFmB,GAAUD,CAAC,CAAClB,KADhBkB,CACqB;EADrBA,EAEIE,cAAc,CACZF,CAAC,CAACpB,UAAFoB,CAAalK,GAAbkK,CAAkBxB,IAAI,IAAKA,IAAI,CAACE,aAAhCsB,CADY,EAEZC,CAAC,CAACrB,UAAFqB,CAAanK,GAAbmK,CAAkBzB,IAAI,IAAKA,IAAI,CAACE,aAAhCuB,CAFY,CAHpBzC;AAQF;;AAEA,MAAM2C,OAAO,GAAG,WAAhB;AACA,MAAMC,mBAAmB,GAAG,CAA5B;AACA,MAAMC,eAAe,GAAG,CAAxB;AACA,MAAMC,iBAAiB,GAAG,CAA1B;AACA,MAAMC,kBAAkB,GAAG,EAA3B;AACA,MAAMC,YAAY,GAAG,CAAC,CAAtB;;AACA,MAAMC,OAAO,GAAIC,CAAS,IAAKA,CAAC,KAAK,GAArC;;AAEA,SAAS3B,YAAT,CAAsBlH,IAAtB,EAAoC7B,KAApC,EAA8D;EAC5D,IAAIqJ,QAAQ,GAAGxH,IAAI,CAACyH,KAALzH,CAAW,GAAXA,CAAf;EACA,IAAI8I,YAAY,GAAGtB,QAAQ,CAAChJ,MAA5B;;EACA,IAAIgJ,QAAQ,CAACuB,IAATvB,CAAcoB,OAAdpB,CAAJ,EAA4B;IAC1BsB,YAAY,IAAIH,YAAhBG;EACD;;EAED,IAAI3K,KAAJ,EAAW;IACT2K,YAAY,IAAIN,eAAhBM;EACD;;EAED,OAAOtB,QAAQ,CACZwB,MADIxB,CACIqB,CAAC,IAAK,CAACD,OAAO,CAACC,CAAD,CADlBrB,EAEJyB,MAFIzB,CAGH,CAACP,KAAD,EAAQiC,OAAR,KACEjC,KAAK,IACJqB,OAAO,CAACa,IAARb,CAAaY,OAAbZ,IACGC,mBADHD,GAEGY,OAAO,KAAK,EAAZA,GACAT,iBADAS,GAEAR,kBALC,CAJJlB,EAUHsB,YAVGtB,CAAP;AAYF;;AAEA,SAASa,cAAT,CAAwBF,CAAxB,EAAqCC,CAArC,EAAgD;EAC9C,IAAIgB,QAAQ,GACVjB,CAAC,CAAC3J,MAAF2J,KAAaC,CAAC,CAAC5J,MAAf2J,IAAyBA,CAAC,CAAClG,KAAFkG,CAAQ,CAARA,EAAW,CAAC,CAAZA,EAAekB,KAAflB,CAAqB,CAACvJ,CAAD,EAAImH,CAAJ,KAAUnH,CAAC,KAAKwJ,CAAC,CAACrC,CAAD,CAAtCoC,CAD3B;EAGA,OAAOiB,QAAQ,GACX;EACA;EACA;EACA;EACAjB,CAAC,CAACA,CAAC,CAAC3J,MAAF2J,GAAW,CAAZ,CAADA,GAAkBC,CAAC,CAACA,CAAC,CAAC5J,MAAF4J,GAAW,CAAZ,CALR,GAMX;EACA;EACA,CARJ;AASF;;AAEA,SAASlC,gBAAT,CAIEoD,MAJF,EAKEjK,QALF,EAMEoG,YANF,EAMsB;EAAA,IAApBA,YAAY,WAAQ,EAAR;IAAZA,YAAY,GAAG,KAAfA;EAAoB;;EAEpB,IAAI;IAAEsB;EAAF,IAAiBuC,MAArB;EAEA,IAAIC,aAAa,GAAG,EAApB;EACA,IAAIC,eAAe,GAAG,GAAtB;EACA,IAAI1D,OAAO,GAAoD,EAA/D;;EACA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGgB,UAAU,CAACvI,MAA/B,EAAuC,EAAEuH,CAAzC,EAA4C;IAC1C,IAAIY,IAAI,GAAGI,UAAU,CAAChB,CAAD,CAArB;IACA,IAAI0D,GAAG,GAAG1D,CAAC,KAAKgB,UAAU,CAACvI,MAAXuI,GAAoB,CAApC;IACA,IAAI2C,iBAAiB,GACnBF,eAAe,KAAK,GAApBA,GACInK,QADJmK,GAEInK,QAAQ,CAAC4C,KAAT5C,CAAemK,eAAe,CAAChL,MAA/Ba,KAA0C,GAHhD;IAIA,IAAI8G,KAAK,GAAGwD,SAAS,CACnB;MAAE3J,IAAI,EAAE2G,IAAI,CAACD,YAAb;MAA2BE,aAAa,EAAED,IAAI,CAACC,aAA/C;MAA8D6C;IAA9D,CADmB,EAEnBC,iBAFmB,CAArB;IAKA,IAAIlF,KAAK,GAAGmC,IAAI,CAACnC,KAAjB;;IAEA,IACE,CAAC2B,KAAD,IACAsD,GADA,IAEAhE,YAFA,IAGA,CAACsB,UAAU,CAACA,UAAU,CAACvI,MAAXuI,GAAoB,CAArB,CAAVA,CAAkCvC,KAAlCuC,CAAwC5I,KAJ3C,EAKE;MACAgI,KAAK,GAAGwD,SAAS,CACf;QACE3J,IAAI,EAAE2G,IAAI,CAACD,YADb;QAEEE,aAAa,EAAED,IAAI,CAACC,aAFtB;QAGE6C,GAAG,EAAE;MAHP,CADe,EAMfC,iBANe,CAAjBvD;IAQD;;IAED,IAAI,CAACA,KAAL,EAAY;MACV,OAAO,IAAP;IACD;;IAEDyD,MAAM,CAAC7F,MAAP6F,CAAcL,aAAdK,EAA6BzD,KAAK,CAACE,MAAnCuD;IAEA9D,OAAO,CAAC1F,IAAR0F,CAAa;MACX;MACAO,MAAM,EAAEkD,aAFG;MAGXlK,QAAQ,EAAEyH,SAAS,CAAC,CAAC0C,eAAD,EAAkBrD,KAAK,CAAC9G,QAAxB,CAAD,CAHR;MAIXwK,YAAY,EAAEC,iBAAiB,CAC7BhD,SAAS,CAAC,CAAC0C,eAAD,EAAkBrD,KAAK,CAAC0D,YAAxB,CAAD,CADoB,CAJpB;MAOXrF;IAPW,CAAbsB;;IAUA,IAAIK,KAAK,CAAC0D,YAAN1D,KAAuB,GAA3B,EAAgC;MAC9BqD,eAAe,GAAG1C,SAAS,CAAC,CAAC0C,eAAD,EAAkBrD,KAAK,CAAC0D,YAAxB,CAAD,CAA3BL;IACD;EACF;;EAED,OAAO1D,OAAP;AACF;AAEA;;;;AAIG;;;SACaiE,aACdC,cACA3D,QAEa;EAAA,IAFbA,iBAEa,EAFbA;IAAAA,SAEI,EAFJA;EAEa;;EAEb,IAAIrG,IAAI,GAAWgK,YAAnB;;EACA,IAAIhK,IAAI,CAAC6H,QAAL7H,CAAc,GAAdA,KAAsBA,IAAI,KAAK,GAA/BA,IAAsC,CAACA,IAAI,CAAC6H,QAAL7H,CAAc,IAAdA,CAA3C,EAAgE;IAC9DV,OAAO,CACL,KADK,EAEL,kBAAeU,IAAf,GACMA,mCADN,IACMA,WAAI,CAACS,OAALT,CAAa,KAAbA,EAAoB,IAApBA,IAA8D,oCADpE,IACoE,kEADpE,IAGsCA,2CAAI,CAACS,OAALT,CAAa,KAAbA,EAAoB,IAApBA,IAAyB,KAH/D,CAFK,CAAPV;IAOAU,IAAI,GAAGA,IAAI,CAACS,OAALT,CAAa,KAAbA,EAAoB,IAApBA,CAAPA;EACD,CAZY,CAcb;;;EACA,MAAMiK,MAAM,GAAGjK,IAAI,CAACuB,UAALvB,CAAgB,GAAhBA,IAAuB,GAAvBA,GAA6B,EAA5C;;EAEA,MAAMP,SAAS,GAAIyK,CAAM,IACvBA,CAAC,IAAI,IAALA,GAAY,EAAZA,GAAiB,OAAOA,CAAP,KAAa,QAAb,GAAwBA,CAAxB,GAA4BnF,MAAM,CAACmF,CAAD,CADrD;;EAGA,MAAM1C,QAAQ,GAAGxH,IAAI,CAClByH,KADczH,CACR,KADQA,EAEd/B,GAFc+B,CAEV,CAACkJ,OAAD,EAAU/K,KAAV,EAAiBgM,KAAjB,KAA0B;IAC7B,MAAMC,aAAa,GAAGjM,KAAK,KAAKgM,KAAK,CAAC3L,MAAN2L,GAAe,CAA/C,CAD6B,CAG7B;;IACA,IAAIC,aAAa,IAAIlB,OAAO,KAAK,GAAjC,EAAsC;MACpC,MAAMmB,IAAI,GAAG,GAAb,CADoC,CAEpC;;MACA,OAAO5K,SAAS,CAAC4G,MAAM,CAACgE,IAAD,CAAP,CAAhB;IACD;;IAED,MAAMC,QAAQ,GAAGpB,OAAO,CAAC/C,KAAR+C,CAAc,kBAAdA,CAAjB;;IACA,IAAIoB,QAAJ,EAAc;MACZ,MAAM,GAAGpL,GAAH,EAAQqL,QAAR,IAAoBD,QAA1B;MACA,IAAIE,KAAK,GAAGnE,MAAM,CAACnH,GAAD,CAAlB;MACA+E,SAAS,CAACsG,QAAQ,KAAK,GAAbA,IAAoBC,KAAK,IAAI,IAA9B,EAAkC,gBAAetL,GAAf,GAAkB,UAApD,CAAT+E;MACA,OAAOxE,SAAS,CAAC+K,KAAD,CAAhB;IACD,CAhB4B,CAkB7B;;;IACA,OAAOtB,OAAO,CAACzI,OAARyI,CAAgB,MAAhBA,EAAwB,EAAxBA,CAAP;EACD,CAtBclJ,EAuBf;EAvBeA,CAwBdgJ,MAxBchJ,CAwBNkJ,OAAO,IAAK,CAAC,CAACA,OAxBRlJ,CAAjB;EA0BA,OAAOiK,MAAM,GAAGzC,QAAQ,CAACvC,IAATuC,CAAc,GAAdA,CAAhB;AACF;AAiDA;;;;;AAKG;;;AACa,mBAIdiD,OAJc,EAKdpL,QALc,EAKE;EAEhB,IAAI,OAAOoL,OAAP,KAAmB,QAAvB,EAAiC;IAC/BA,OAAO,GAAG;MAAEzK,IAAI,EAAEyK,OAAR;MAAiB7D,aAAa,EAAE,KAAhC;MAAuC6C,GAAG,EAAE;IAA5C,CAAVgB;EACD;;EAED,IAAI,CAACC,OAAD,EAAUC,cAAV,IAA4BC,WAAW,CACzCH,OAAO,CAACzK,IADiC,EAEzCyK,OAAO,CAAC7D,aAFiC,EAGzC6D,OAAO,CAAChB,GAHiC,CAA3C;EAMA,IAAItD,KAAK,GAAG9G,QAAQ,CAAC8G,KAAT9G,CAAeqL,OAAfrL,CAAZ;EACA,IAAI,CAAC8G,KAAL,EAAY,OAAO,IAAP;EAEZ,IAAIqD,eAAe,GAAGrD,KAAK,CAAC,CAAD,CAA3B;EACA,IAAI0D,YAAY,GAAGL,eAAe,CAAC/I,OAAhB+I,CAAwB,SAAxBA,EAAmC,IAAnCA,CAAnB;EACA,IAAIqB,aAAa,GAAG1E,KAAK,CAAClE,KAANkE,CAAY,CAAZA,CAApB;EACA,IAAIE,MAAM,GAAWsE,cAAc,CAAC1B,MAAf0B,CACnB,CAACG,IAAD,EAAK9H,IAAL,EAAkC7E,KAAlC,KAA2C;IAAA,IAApC;MAAE4M,SAAF;MAAanD;IAAb,IAAyB5E,IAAW,EACzC;IACA;;IACA,IAAI+H,SAAS,KAAK,GAAlB,EAAuB;MACrB,IAAIC,UAAU,GAAGH,aAAa,CAAC1M,KAAD,CAAb0M,IAAwB,EAAzC;MACAhB,YAAY,GAAGL,eAAe,CAC3BvH,KADYuH,CACN,CADMA,EACHA,eAAe,CAAChL,MAAhBgL,GAAyBwB,UAAU,CAACxM,MADjCgL,EAEZ/I,OAFY+I,CAEJ,SAFIA,EAEO,IAFPA,CAAfK;IAGD;;IAED,MAAM1H,KAAK,GAAG0I,aAAa,CAAC1M,KAAD,CAA3B;;IACA,IAAIyJ,UAAU,IAAI,CAACzF,KAAnB,EAA0B;MACxB2I,IAAI,CAACC,SAAD,CAAJD,GAAkBxM,SAAlBwM;IACD,CAFD,MAEO;MACLA,IAAI,CAACC,SAAD,CAAJD,GAAkB,CAAC3I,KAAK,IAAI,EAAV,EAAc1B,OAAd,CAAsB,MAAtB,EAA8B,GAA9B,CAAlBqK;IACD;;IACD,OAAOA,IAAP;EACD,CAlBkBH,EAmBnB,EAnBmBA,CAArB;EAsBA,OAAO;IACLtE,MADK;IAELhH,QAAQ,EAAEmK,eAFL;IAGLK,YAHK;IAILY;EAJK,CAAP;AAMF;;AAIA,SAASG,WAAT,CACE5K,IADF,EAEE4G,aAFF,EAGE6C,GAHF,EAGY;EAAA,IADV7C,aAAa,WACH,EADG;IAAbA,aAAa,GAAG,KAAhBA;EAAqB;;EAAA,IACrB6C,GAAG,WADkB,EAClB;IAAHA,GAAG,GAAG,IAANA;EAAU;;EAEVnK,OAAO,CACLU,IAAI,KAAK,GAATA,IAAgB,CAACA,IAAI,CAAC6H,QAAL7H,CAAc,GAAdA,CAAjBA,IAAuCA,IAAI,CAAC6H,QAAL7H,CAAc,IAAdA,CADlC,EAEL,kBAAeA,IAAf,GACMA,mCADN,IACMA,WAAI,CAACS,OAALT,CAAa,KAAbA,EAAoB,IAApBA,IAA8D,oCADpE,IACoE,kEADpE,IAEsE,uCAChCA,IAAI,CAACS,OAALT,CAAa,KAAbA,EAAoB,IAApBA,CADgC,GACP,KAH/D,CAFK,CAAPV;EAQA,IAAI+G,MAAM,GAAwB,EAAlC;EACA,IAAI4E,YAAY,GACd,MACAjL,IAAI,CACDS,OADHT,CACW,SADXA,EACsB,EADtBA,EACyB;EADzBA,CAEGS,OAFHT,CAEW,MAFXA,EAEmB,GAFnBA,EAEuB;EAFvBA,CAGGS,OAHHT,CAGW,oBAHXA,EAGiC,MAHjCA,EAGwC;EAHxCA,CAIGS,OAJHT,CAKI,mBALJA,EAMI,CAACkL,CAAD,EAAYH,SAAZ,EAA+BnD,UAA/B,KAA6C;IAC3CvB,MAAM,CAACjG,IAAPiG,CAAY;MAAE0E,SAAF;MAAanD,UAAU,EAAEA,UAAU,IAAI;IAAvC,CAAZvB;IACA,OAAOuB,UAAU,GAAG,cAAH,GAAoB,YAArC;EACD,CATL5H,CAFF;;EAcA,IAAIA,IAAI,CAAC6H,QAAL7H,CAAc,GAAdA,CAAJ,EAAwB;IACtBqG,MAAM,CAACjG,IAAPiG,CAAY;MAAE0E,SAAS,EAAE;IAAb,CAAZ1E;IACA4E,YAAY,IACVjL,IAAI,KAAK,GAATA,IAAgBA,IAAI,KAAK,IAAzBA,GACI,OADJA,CACW;IADXA,EAEI,mBAHNiL,CAFsB,CAKI;EAC3B,CAND,MAMO,IAAIxB,GAAJ,EAAS;IACd;IACAwB,YAAY,IAAI,OAAhBA;EACD,CAHM,MAGA,IAAIjL,IAAI,KAAK,EAATA,IAAeA,IAAI,KAAK,GAA5B,EAAiC;IACtC;IACA;IACA;IACA;IACA;IACA;IACA;IACAiL,YAAY,IAAI,eAAhBA;EACD,CATM,MASA;;EAIP,IAAIP,OAAO,GAAG,IAAIS,MAAJ,CAAWF,YAAX,EAAyBrE,aAAa,GAAGtI,SAAH,GAAe,GAArD,CAAd;EAEA,OAAO,CAACoM,OAAD,EAAUrE,MAAV,CAAP;AACF;;AAEM,SAAUJ,UAAV,CAAqB9D,KAArB,EAAkC;EACtC,IAAI;IACF,OAAOA,KAAK,CACTsF,KADItF,CACE,GADFA,EAEJlE,GAFIkE,CAECiJ,CAAC,IAAKC,kBAAkB,CAACD,CAAD,CAAlBC,CAAsB5K,OAAtB4K,CAA8B,KAA9BA,EAAqC,KAArCA,CAFPlJ,EAGJ8C,IAHI9C,CAGC,GAHDA,CAAP;EAID,CALD,CAKE,OAAOyB,KAAP,EAAc;IACdtE,OAAO,CACL,KADK,EAEL,oBAAiB6C,KAAjB,GACiE,6CADjE,GACiE,+DADjE,IACiE,eAClDyB,KADkD,GAC7C,IAFpB,CAFK,CAAPtE;IAOA,OAAO6C,KAAP;EACD;AACH;AAEA;;AAEG;;;AACa,uBACd9C,QADc,EAEdkG,QAFc,EAEE;EAEhB,IAAIA,QAAQ,KAAK,GAAjB,EAAsB,OAAOlG,QAAP;;EAEtB,IAAI,CAACA,QAAQ,CAACiM,WAATjM,GAAuBkC,UAAvBlC,CAAkCkG,QAAQ,CAAC+F,WAAT/F,EAAlClG,CAAL,EAAgE;IAC9D,OAAO,IAAP;EACD,CANe,CAQhB;EACA;;;EACA,IAAIkM,UAAU,GAAGhG,QAAQ,CAACsC,QAATtC,CAAkB,GAAlBA,IACbA,QAAQ,CAAC/G,MAAT+G,GAAkB,CADLA,GAEbA,QAAQ,CAAC/G,MAFb;EAGA,IAAIgN,QAAQ,GAAGnM,QAAQ,CAACE,MAATF,CAAgBkM,UAAhBlM,CAAf;;EACA,IAAImM,QAAQ,IAAIA,QAAQ,KAAK,GAA7B,EAAkC;IAChC;IACA,OAAO,IAAP;EACD;;EAED,OAAOnM,QAAQ,CAAC4C,KAAT5C,CAAekM,UAAflM,KAA8B,GAArC;AACF;AAEA;;;;AAIG;;;SACaoM,YAAYxM,IAAQyM,cAAkB;EAAA,IAAlBA,YAAY,WAAM,EAAN;IAAZA,YAAY,GAAG,GAAfA;EAAkB;;EACpD,IAAI;IACFrM,QAAQ,EAAEsM,UADR;IAEFzL,MAAM,GAAG,EAFP;IAGFC,IAAI,GAAG;EAHL,IAIA,OAAOlB,EAAP,KAAc,QAAd,GAAyBgB,SAAS,CAAChB,EAAD,CAAlC,GAAyCA,EAJ7C;EAMA,IAAII,QAAQ,GAAGsM,UAAU,GACrBA,UAAU,CAACpK,UAAXoK,CAAsB,GAAtBA,IACEA,UADFA,GAEEC,eAAe,CAACD,UAAD,EAAaD,YAAb,CAHI,GAIrBA,YAJJ;EAMA,OAAO;IACLrM,QADK;IAELa,MAAM,EAAE2L,eAAe,CAAC3L,MAAD,CAFlB;IAGLC,IAAI,EAAE2L,aAAa,CAAC3L,IAAD;EAHd,CAAP;AAKF;;AAEA,SAASyL,eAAT,CAAyBlF,YAAzB,EAA+CgF,YAA/C,EAAmE;EACjE,IAAIlE,QAAQ,GAAGkE,YAAY,CAACjL,OAAbiL,CAAqB,MAArBA,EAA6B,EAA7BA,EAAiCjE,KAAjCiE,CAAuC,GAAvCA,CAAf;EACA,IAAIK,gBAAgB,GAAGrF,YAAY,CAACe,KAAbf,CAAmB,GAAnBA,CAAvB;EAEAqF,gBAAgB,CAAC5E,OAAjB4E,CAA0B7C,OAAO,IAAI;IACnC,IAAIA,OAAO,KAAK,IAAhB,EAAsB;MACpB;MACA,IAAI1B,QAAQ,CAAChJ,MAATgJ,GAAkB,CAAtB,EAAyBA,QAAQ,CAACwE,GAATxE;IAC1B,CAHD,MAGO,IAAI0B,OAAO,KAAK,GAAhB,EAAqB;MAC1B1B,QAAQ,CAACpH,IAAToH,CAAc0B,OAAd1B;IACD;EACF,CAPDuE;EASA,OAAOvE,QAAQ,CAAChJ,MAATgJ,GAAkB,CAAlBA,GAAsBA,QAAQ,CAACvC,IAATuC,CAAc,GAAdA,CAAtBA,GAA2C,GAAlD;AACF;;AAEA,SAASyE,mBAAT,CACEC,IADF,EAEEC,KAFF,EAGEC,IAHF,EAIEpM,IAJF,EAIqB;EAEnB,OACE,uBAAqBkM,IAArB,GACQC,sCADR,IACQA,iBAAK,WAALA,GAAkB3M,IAAI,CAACC,SAALD,CACxBQ,IADwBR,CAAlB2M,GAEP,oCAHD,KAIQC,gBAAI,0DAJZ,IAKmE,qEANrE;AAQF;AAEA;;;;;;;;;;;;;;;;;;;;;;AAsBG;;;AACG,SAAUC,0BAAV,CAEJvG,OAFI,EAEQ;EACZ,OAAOA,OAAO,CAACkD,MAARlD,CACL,CAACK,KAAD,EAAQhI,KAAR,KACEA,KAAK,KAAK,CAAVA,IAAgBgI,KAAK,CAAC3B,KAAN2B,CAAYnG,IAAZmG,IAAoBA,KAAK,CAAC3B,KAAN2B,CAAYnG,IAAZmG,CAAiB3H,MAAjB2H,GAA0B,CAF3DL,CAAP;AAIF,C,CAEA;AACA;;;AACgB,6BAEdA,OAFc,EAEAwG,oBAFA,EAE6B;EAC3C,IAAIC,WAAW,GAAGF,0BAA0B,CAACvG,OAAD,CAA5C,CAD2C,CAG3C;EACA;EACA;;EACA,IAAIwG,oBAAJ,EAA0B;IACxB,OAAOC,WAAW,CAACtO,GAAZsO,CAAgB,CAACpG,KAAD,EAAQrD,GAAR,KACrBA,GAAG,KAAKyJ,WAAW,CAAC/N,MAAZ+N,GAAqB,CAA7BzJ,GAAiCqD,KAAK,CAAC9G,QAAvCyD,GAAkDqD,KAAK,CAAC0D,YADnD0C,CAAP;EAGD;;EAED,OAAOA,WAAW,CAACtO,GAAZsO,CAAiBpG,KAAK,IAAKA,KAAK,CAAC0D,YAAjC0C,CAAP;AACF;AAEA;;AAEG;;;AACG,SAAUC,SAAV,CACJC,KADI,EAEJC,cAFI,EAGJC,gBAHI,EAIJC,cAJI,EAIkB;EAAA,IAAtBA,cAAc,WAAQ,EAAR;IAAdA,cAAc,GAAG,KAAjBA;EAAsB;;EAEtB,IAAI3N,EAAJ;;EACA,IAAI,OAAOwN,KAAP,KAAiB,QAArB,EAA+B;IAC7BxN,EAAE,GAAGgB,SAAS,CAACwM,KAAD,CAAdxN;EACD,CAFD,MAEO;IACLA,EAAE,YAAQwN,EAAR,EAAQA,KAAR,CAAFxN;IAEAgF,SAAS,CACP,CAAChF,EAAE,CAACI,QAAJ,IAAgB,CAACJ,EAAE,CAACI,QAAHJ,CAAYoI,QAAZpI,CAAqB,GAArBA,CADV,EAEPgN,mBAAmB,CAAC,GAAD,EAAM,UAAN,EAAkB,QAAlB,EAA4BhN,EAA5B,CAFZ,CAATgF;IAIAA,SAAS,CACP,CAAChF,EAAE,CAACI,QAAJ,IAAgB,CAACJ,EAAE,CAACI,QAAHJ,CAAYoI,QAAZpI,CAAqB,GAArBA,CADV,EAEPgN,mBAAmB,CAAC,GAAD,EAAM,UAAN,EAAkB,MAAlB,EAA0BhN,EAA1B,CAFZ,CAATgF;IAIAA,SAAS,CACP,CAAChF,EAAE,CAACiB,MAAJ,IAAc,CAACjB,EAAE,CAACiB,MAAHjB,CAAUoI,QAAVpI,CAAmB,GAAnBA,CADR,EAEPgN,mBAAmB,CAAC,GAAD,EAAM,QAAN,EAAgB,MAAhB,EAAwBhN,EAAxB,CAFZ,CAATgF;EAID;;EAED,IAAI4I,WAAW,GAAGJ,KAAK,KAAK,EAAVA,IAAgBxN,EAAE,CAACI,QAAHJ,KAAgB,EAAlD;EACA,IAAI0M,UAAU,GAAGkB,WAAW,GAAG,GAAH,GAAS5N,EAAE,CAACI,QAAxC;EAEA,IAAIyN,IAAJ,CAzBsB,CA2BtB;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EACA,IAAInB,UAAU,IAAI,IAAlB,EAAwB;IACtBmB,IAAI,GAAGH,gBAAPG;EACD,CAFD,MAEO;IACL,IAAIC,kBAAkB,GAAGL,cAAc,CAAClO,MAAfkO,GAAwB,CAAjD,CADK,CAGL;IACA;IACA;IACA;;IACA,IAAI,CAACE,cAAD,IAAmBjB,UAAU,CAACpK,UAAXoK,CAAsB,IAAtBA,CAAvB,EAAoD;MAClD,IAAIqB,UAAU,GAAGrB,UAAU,CAAClE,KAAXkE,CAAiB,GAAjBA,CAAjB;;MAEA,OAAOqB,UAAU,CAAC,CAAD,CAAVA,KAAkB,IAAzB,EAA+B;QAC7BA,UAAU,CAACC,KAAXD;QACAD,kBAAkB,IAAI,CAAtBA;MACD;;MAED9N,EAAE,CAACI,QAAHJ,GAAc+N,UAAU,CAAC/H,IAAX+H,CAAgB,GAAhBA,CAAd/N;IACD;;IAED6N,IAAI,GAAGC,kBAAkB,IAAI,CAAtBA,GAA0BL,cAAc,CAACK,kBAAD,CAAxCA,GAA+D,GAAtED;EACD;;EAED,IAAI9M,IAAI,GAAGyL,WAAW,CAACxM,EAAD,EAAK6N,IAAL,CAAtB,CA3DsB,CA6DtB;;EACA,IAAII,wBAAwB,GAC1BvB,UAAU,IAAIA,UAAU,KAAK,GAA7BA,IAAoCA,UAAU,CAAC9D,QAAX8D,CAAoB,GAApBA,CADtC,CA9DsB,CAgEtB;;EACA,IAAIwB,uBAAuB,GACzB,CAACN,WAAW,IAAIlB,UAAU,KAAK,GAA/B,KAAuCgB,gBAAgB,CAAC9E,QAAjB8E,CAA0B,GAA1BA,CADzC;;EAEA,IACE,CAAC3M,IAAI,CAACX,QAALW,CAAc6H,QAAd7H,CAAuB,GAAvBA,CAAD,KACCkN,wBAAwB,IAAIC,uBAD7B,CADF,EAGE;IACAnN,IAAI,CAACX,QAALW,IAAiB,GAAjBA;EACD;;EAED,OAAOA,IAAP;AACF;AAEA;;AAEG;;;AACG,SAAUoN,aAAV,CAAwBnO,EAAxB,EAA8B;EAClC;EACA,OAAOA,EAAE,KAAK,EAAPA,IAAcA,EAAW,CAACI,QAAZJ,KAAyB,EAAvCA,GACH,GADGA,GAEH,OAAOA,EAAP,KAAc,QAAd,GACAgB,SAAS,CAAChB,EAAD,CAATgB,CAAcZ,QADd,GAEAJ,EAAE,CAACI,QAJP;AAKF;AAEA;;AAEG;;;MACUyH,SAAS,GAAIuG,KAAe,IACvCA,KAAK,CAACpI,IAANoI,CAAW,GAAXA,EAAgB5M,OAAhB4M,CAAwB,QAAxBA,EAAkC,GAAlCA;AAEF;;AAEG;;;MACUvD,iBAAiB,GAAIzK,QAAgB,IAChDA,QAAQ,CAACoB,OAATpB,CAAiB,MAAjBA,EAAyB,EAAzBA,EAA6BoB,OAA7BpB,CAAqC,MAArCA,EAA6C,GAA7CA;AAEF;;AAEG;;;AACI,MAAMwM,eAAe,GAAI3L,MAAc,IAC5C,CAACA,MAAD,IAAWA,MAAM,KAAK,GAAtB,GACI,EADJ,GAEIA,MAAM,CAACqB,UAAPrB,CAAkB,GAAlBA,IACAA,MADAA,GAEA,MAAMA,MALL;AAOP;;AAEG;;;AACI,MAAM4L,aAAa,GAAI3L,IAAY,IACxC,CAACA,IAAD,IAASA,IAAI,KAAK,GAAlB,GAAwB,EAAxB,GAA6BA,IAAI,CAACoB,UAALpB,CAAgB,GAAhBA,IAAuBA,IAAvBA,GAA8B,MAAMA,IAD5D;AAQP;;;AAGG;;;AACI,MAAMmN,IAAI,GAAiB,SAArBA,IAAqB,CAAChH,IAAD,EAAOiH,IAAP,EAAoB;EAAA,IAAbA,IAAI,WAAS,EAAT;IAAJA,IAAI,GAAG,EAAPA;EAAS;;EAChD,IAAIC,YAAY,GAAG,OAAOD,IAAP,KAAgB,QAAhB,GAA2B;IAAEE,MAAM,EAAEF;EAAV,CAA3B,GAA8CA,IAAjE;EAEA,IAAIG,OAAO,GAAG,IAAIC,OAAJ,CAAYH,YAAY,CAACE,OAAzB,CAAd;;EACA,IAAI,CAACA,OAAO,CAACE,GAARF,CAAY,cAAZA,CAAL,EAAkC;IAChCA,OAAO,CAACG,GAARH,CAAY,cAAZA,EAA4B,iCAA5BA;EACD;;EAED,OAAO,IAAII,QAAJ,CAAatO,IAAI,CAACC,SAALD,CAAe8G,IAAf9G,CAAb,EAAiCgE,aACnCgK,YADmC,EACvB;IACfE;EADe,CADuB,CAAjC,CAAP;AAIF,CAZO;;MAcMK,qBAAoB;EAK/BC,WAAYA,OAAST,IAATS,EAA4B;IAJxC,KAAIC,IAAJ,GAAe,sBAAf;IAKE,KAAK3H,IAAL,GAAYA,IAAZ;IACA,KAAKiH,IAAL,GAAYA,IAAI,IAAI,IAApB;EACF;;AAR+B;AAWjC;;;AAGG;;;AACa,cAAQjH,IAAR,EAAiBiH,IAAjB,EAA6C;EAC3D,OAAO,IAAIQ,oBAAJ,CACLzH,IADK,EAEL,OAAOiH,IAAP,KAAgB,QAAhB,GAA2B;IAAEE,MAAM,EAAEF;EAAV,CAA3B,GAA8CA,IAFzC,CAAP;AAIF;;AAQM,MAAOW,oBAAP,SAAoC7L,KAApC,CAAyC;;MAElC8L,aAAY;EAWvBH,WAAYA,OAA+BR,YAA/BQ,EAA0D;IAV9D,sBAA8B,IAAI1J,GAAJ,EAA9B;IAIA,mBACN,IAAIA,GAAJ,EADM;IAIR,KAAY8J,YAAZ,GAAyB,EAAzB;IAGEnK,SAAS,CACPqC,IAAI,IAAI,OAAOA,IAAP,KAAgB,QAAxBA,IAAoC,CAAC+H,KAAK,CAACC,OAAND,CAAc/H,IAAd+H,CAD9B,EAEP,oCAFO,CAATpK,CADoE,CAMpE;IACA;;IACA,IAAIsK,MAAJ;IACA,KAAKC,YAAL,GAAoB,IAAIC,OAAJ,CAAY,CAACvD,CAAD,EAAIwD,CAAJ,KAAWH,MAAM,GAAGG,CAAhC,CAApB;IACA,KAAKC,UAAL,GAAkB,IAAIC,eAAJ,EAAlB;;IACA,IAAIC,OAAO,GAAGA,MACZN,MAAM,CAAC,IAAIL,oBAAJ,CAAyB,uBAAzB,CAAD,CADR;;IAEA,KAAKY,mBAAL,GAA2B,MACzB,KAAKH,UAAL,CAAgBI,MAAhB,CAAuB5K,mBAAvB,CAA2C,OAA3C,EAAoD0K,OAApD,CADF;;IAEA,KAAKF,UAAL,CAAgBI,MAAhB,CAAuB7K,gBAAvB,CAAwC,OAAxC,EAAiD2K,OAAjD;IAEA,KAAKvI,IAAL,GAAYsD,MAAM,CAAC5L,OAAP4L,CAAetD,IAAfsD,EAAqBX,MAArBW,CACV,CAACoF,GAAD,EAAIC,KAAJ,KAAI;MAAA,IAAE,CAAC/P,GAAD,EAAMiD,KAAN,IAAY8M,KAAd;MAAc,OAChBrF,MAAM,CAAC7F,MAAP6F,CAAcoF,GAAdpF,EAAmB;QACjB,CAAC1K,GAAD,GAAO,KAAKgQ,YAAL,CAAkBhQ,GAAlB,EAAuBiD,KAAvB;MADU,CAAnByH,CADgB;IAIlB,CALUA,EAKV,EALUA,CAAZ;;IAQA,IAAI,KAAKuF,IAAT,EAAe;MACb;MACA,KAAKL,mBAAL;IACD;;IAED,KAAKvB,IAAL,GAAYC,YAAZ;EACF;;EAEQ0B,YAAYA,CAClBhQ,GADkBgQ,EAElB/M,KAFkB+M,EAEe;IAEjC,IAAI,EAAE/M,KAAK,YAAYsM,OAAnB,CAAJ,EAAiC;MAC/B,OAAOtM,KAAP;IACD;;IAED,KAAKiM,YAAL,CAAkBhO,IAAlB,CAAuBlB,GAAvB;IACA,KAAKkQ,cAAL,CAAoBC,GAApB,CAAwBnQ,GAAxB,EAPiC,CASjC;IACA;;IACA,IAAIoQ,OAAO,GAAmBb,OAAO,CAACc,IAARd,CAAa,CAACtM,KAAD,EAAQ,KAAKqM,YAAb,CAAbC,EAAyCe,IAAzCf,CAC3BnI,IAAI,IAAK,KAAKmJ,QAAL,CAAcH,OAAd,EAAuBpQ,GAAvB,EAA4BZ,SAA5B,EAAuCgI,IAAvC,CADkBmI,EAE3B7K,KAAK,IAAK,KAAK6L,QAAL,CAAcH,OAAd,EAAuBpQ,GAAvB,EAA4B0E,KAA5B,CAFiB6K,CAA9B,CAXiC,CAgBjC;IACA;;IACAa,OAAO,CAACI,KAARJ,CAAc,MAAO,CAAC,CAAtBA;IAEA1F,MAAM,CAAC+F,cAAP/F,CAAsB0F,OAAtB1F,EAA+B,UAA/BA,EAA2C;MAAEgG,GAAG,EAAEA,MAAM;IAAb,CAA3ChG;IACA,OAAO0F,OAAP;EACF;;EAEQG,QAAQA,CACdH,OADcG,EAEdvQ,GAFcuQ,EAGd7L,KAHc6L,EAIdnJ,IAJcmJ,EAIA;IAEd,IACE,KAAKd,UAAL,CAAgBI,MAAhB,CAAuBc,OAAvB,IACAjM,KAAK,YAAYsK,oBAFnB,EAGE;MACA,KAAKY,mBAAL;MACAlF,MAAM,CAAC+F,cAAP/F,CAAsB0F,OAAtB1F,EAA+B,QAA/BA,EAAyC;QAAEgG,GAAG,EAAEA,MAAMhM;MAAb,CAAzCgG;MACA,OAAO6E,OAAO,CAACF,MAARE,CAAe7K,KAAf6K,CAAP;IACD;;IAED,KAAKW,cAAL,CAAoBU,MAApB,CAA2B5Q,GAA3B;;IAEA,IAAI,KAAKiQ,IAAT,EAAe;MACb;MACA,KAAKL,mBAAL;IACD,CAhBa,CAkBd;IACA;;;IACA,IAAIlL,KAAK,KAAKtF,SAAVsF,IAAuB0C,IAAI,KAAKhI,SAApC,EAA+C;MAC7C,IAAIyR,cAAc,GAAG,IAAI1N,KAAJ,CACnB,6BAA0BnD,GAA1B,GAA6B,yCAA7B,GAA6B,iDADV,CAArB;MAIA0K,MAAM,CAAC+F,cAAP/F,CAAsB0F,OAAtB1F,EAA+B,QAA/BA,EAAyC;QAAEgG,GAAG,EAAEA,MAAMG;MAAb,CAAzCnG;MACA,KAAKoG,IAAL,CAAU,KAAV,EAAiB9Q,GAAjB;MACA,OAAOuP,OAAO,CAACF,MAARE,CAAesB,cAAftB,CAAP;IACD;;IAED,IAAInI,IAAI,KAAKhI,SAAb,EAAwB;MACtBsL,MAAM,CAAC+F,cAAP/F,CAAsB0F,OAAtB1F,EAA+B,QAA/BA,EAAyC;QAAEgG,GAAG,EAAEA,MAAMhM;MAAb,CAAzCgG;MACA,KAAKoG,IAAL,CAAU,KAAV,EAAiB9Q,GAAjB;MACA,OAAOuP,OAAO,CAACF,MAARE,CAAe7K,KAAf6K,CAAP;IACD;;IAED7E,MAAM,CAAC+F,cAAP/F,CAAsB0F,OAAtB1F,EAA+B,OAA/BA,EAAwC;MAAEgG,GAAG,EAAEA,MAAMtJ;IAAb,CAAxCsD;IACA,KAAKoG,IAAL,CAAU,KAAV,EAAiB9Q,GAAjB;IACA,OAAOoH,IAAP;EACF;;EAEQ0J,IAAIA,CAACH,OAADG,EAAmBC,UAAnBD,EAAsC;IAChD,KAAKE,WAAL,CAAiB/I,OAAjB,CAA0BgJ,UAAU,IAAKA,UAAU,CAACN,OAAD,EAAUI,UAAV,CAAnD;EACF;;EAEAG,SAASA,CAACtP,EAADsP,EAAoD;IAC3D,KAAKF,WAAL,CAAiBb,GAAjB,CAAqBvO,EAArB;IACA,OAAO,MAAM,KAAKoP,WAAL,CAAiBJ,MAAjB,CAAwBhP,EAAxB,CAAb;EACF;;EAEAuP,MAAMA;IACJ,KAAK1B,UAAL,CAAgB2B,KAAhB;IACA,KAAKlB,cAAL,CAAoBjI,OAApB,CAA4B,CAACiE,CAAD,EAAImF,CAAJ,KAAU,KAAKnB,cAAL,CAAoBU,MAApB,CAA2BS,CAA3B,CAAtC;IACA,KAAKP,IAAL,CAAU,IAAV;EACF;;EAEiBQ,MAAXA,WAAWA,CAACzB,MAADyB,EAAoB;IACnC,IAAIX,OAAO,GAAG,KAAd;;IACA,IAAI,CAAC,KAAKV,IAAV,EAAgB;MACd,IAAIN,OAAO,GAAGA,MAAM,KAAKwB,MAAL,EAApB;;MACAtB,MAAM,CAAC7K,gBAAP6K,CAAwB,OAAxBA,EAAiCF,OAAjCE;MACAc,OAAO,GAAG,MAAM,IAAIpB,OAAJ,CAAagC,OAAO,IAAI;QACtC,KAAKL,SAAL,CAAgBP,OAAO,IAAI;UACzBd,MAAM,CAAC5K,mBAAP4K,CAA2B,OAA3BA,EAAoCF,OAApCE;;UACA,IAAIc,OAAO,IAAI,KAAKV,IAApB,EAA0B;YACxBsB,OAAO,CAACZ,OAAD,CAAPY;UACD;QACF,CALD;MAMD,CAPe,CAAhBZ;IAQD;;IACD,OAAOA,OAAP;EACF;;EAEQV,IAAJA,IAAIA;IACN,OAAO,KAAKC,cAAL,CAAoBsB,IAApB,KAA6B,CAApC;EACF;;EAEiBC,IAAbA,aAAaA;IACf1M,SAAS,CACP,KAAKqC,IAAL,KAAc,IAAd,IAAsB,KAAK6I,IADpB,EAEP,2DAFO,CAATlL;IAKA,OAAO2F,MAAM,CAAC5L,OAAP4L,CAAe,KAAKtD,IAApBsD,EAA0BX,MAA1BW,CACL,CAACoF,GAAD,EAAI4B,KAAJ,KAAI;MAAA,IAAE,CAAC1R,GAAD,EAAMiD,KAAN,IAAYyO,KAAd;MAAc,OAChBhH,MAAM,CAAC7F,MAAP6F,CAAcoF,GAAdpF,EAAmB;QACjB,CAAC1K,GAAD,GAAO2R,oBAAoB,CAAC1O,KAAD;MADV,CAAnByH,CADgB;IAIlB,CALKA,EAKL,EALKA,CAAP;EAOF;;EAEekH,IAAXA,WAAWA;IACb,OAAOzC,KAAK,CAACvB,IAANuB,CAAW,KAAKe,cAAhBf,CAAP;EACF;;AAxKuB;;AA2KzB,SAAS0C,gBAAT,CAA0B5O,KAA1B,EAAoC;EAClC,OACEA,KAAK,YAAYsM,OAAjBtM,IAA6BA,KAAwB,CAAC6O,QAAzB7O,KAAsC,IADrE;AAGF;;AAEA,SAAS0O,oBAAT,CAA8B1O,KAA9B,EAAwC;EACtC,IAAI,CAAC4O,gBAAgB,CAAC5O,KAAD,CAArB,EAA8B;IAC5B,OAAOA,KAAP;EACD;;EAED,IAAIA,KAAK,CAAC8O,MAAV,EAAkB;IAChB,MAAM9O,KAAK,CAAC8O,MAAZ;EACD;;EACD,OAAO9O,KAAK,CAAC+O,KAAb;AACF;;AAOO,MAAMC,KAAK,GAAkB,SAAvBA,KAAuB,CAAC7K,IAAD,EAAOiH,IAAP,EAAoB;EAAA,IAAbA,IAAI,WAAS,EAAT;IAAJA,IAAI,GAAG,EAAPA;EAAS;;EAClD,IAAIC,YAAY,GAAG,OAAOD,IAAP,KAAgB,QAAhB,GAA2B;IAAEE,MAAM,EAAEF;EAAV,CAA3B,GAA8CA,IAAjE;EAEA,OAAO,IAAIY,YAAJ,CAAiB7H,IAAjB,EAAuBkH,YAAvB,CAAP;AACF,CAJO;AAWP;;;AAGG;;;AACI,MAAM4D,QAAQ,GAAqB,SAA7BA,QAA6B,CAACtP,GAAD,EAAMyL,IAAN,EAAoB;EAAA,IAAdA,IAAI,WAAU,EAAV;IAAJA,IAAI,GAAG,GAAPA;EAAU;;EACxD,IAAIC,YAAY,GAAGD,IAAnB;;EACA,IAAI,OAAOC,YAAP,KAAwB,QAA5B,EAAsC;IACpCA,YAAY,GAAG;MAAEC,MAAM,EAAED;IAAV,CAAfA;EACD,CAFD,MAEO,IAAI,OAAOA,YAAY,CAACC,MAApB,KAA+B,WAAnC,EAAgD;IACrDD,YAAY,CAACC,MAAbD,GAAsB,GAAtBA;EACD;;EAED,IAAIE,OAAO,GAAG,IAAIC,OAAJ,CAAYH,YAAY,CAACE,OAAzB,CAAd;EACAA,OAAO,CAACG,GAARH,CAAY,UAAZA,EAAwB5L,GAAxB4L;EAEA,OAAO,IAAII,QAAJ,CAAa,IAAb,EAAiBtK,aACnBgK,YADmB,EACP;IACfE;EADe,CADO,CAAjB,CAAP;AAIF,CAfO;AAiBP;;;;AAIG;;;MACU2D,gBAAgB,GAAqBA,CAACvP,GAADuP,EAAM9D,IAAN8D,KAAc;EAC9D,IAAIC,QAAQ,GAAGF,QAAQ,CAACtP,GAAD,EAAMyL,IAAN,CAAvB;EACA+D,QAAQ,CAAC5D,OAAT4D,CAAiBzD,GAAjByD,CAAqB,yBAArBA,EAAgD,MAAhDA;EACA,OAAOA,QAAP;AACF;AAEA;;;;;AAKG;;;MACU7Q,OAAO,GAAqBA,CAACqB,GAADrB,EAAM8M,IAAN9M,KAAc;EACrD,IAAI6Q,QAAQ,GAAGF,QAAQ,CAACtP,GAAD,EAAMyL,IAAN,CAAvB;EACA+D,QAAQ,CAAC5D,OAAT4D,CAAiBzD,GAAjByD,CAAqB,iBAArBA,EAAwC,MAAxCA;EACA,OAAOA,QAAP;AACF;AAQA;;;;;;;AAOG;;;MACUC,kBAAiB;EAO5BvD,WACEA,SACAwD,UADAxD,EAEA1H,IAFA0H,EAGAyD,QAHAzD,EAGgB;IAAA,IAAhByD,QAAQ,WAAQ,EAAR;MAARA,QAAQ,GAAG,KAAXA;IAAgB;;IAEhB,KAAKhE,MAAL,GAAcA,MAAd;IACA,KAAK+D,UAAL,GAAkBA,UAAU,IAAI,EAAhC;IACA,KAAKC,QAAL,GAAgBA,QAAhB;;IACA,IAAInL,IAAI,YAAYjE,KAApB,EAA2B;MACzB,KAAKiE,IAAL,GAAYA,IAAI,CAAC1D,QAAL0D,EAAZ;MACA,KAAK1C,KAAL,GAAa0C,IAAb;IACD,CAHD,MAGO;MACL,KAAKA,IAAL,GAAYA,IAAZ;IACD;EACH;;AAtB4B;AAyB9B;;;AAGG;;;AACG,SAAUoL,oBAAV,CAA+B9N,KAA/B,EAAyC;EAC7C,OACEA,KAAK,IAAI,IAATA,IACA,OAAOA,KAAK,CAAC6J,MAAb,KAAwB,QADxB7J,IAEA,OAAOA,KAAK,CAAC4N,UAAb,KAA4B,QAF5B5N,IAGA,OAAOA,KAAK,CAAC6N,QAAb,KAA0B,SAH1B7N,IAIA,UAAUA,KALZ;AAOF;;ACr/BA,MAAM+N,uBAAuB,GAAyB,CACpD,MADoD,EAEpD,KAFoD,EAGpD,OAHoD,EAIpD,QAJoD,CAAtD;AAMA,MAAMC,oBAAoB,GAAG,IAAItN,GAAJ,CAC3BqN,uBAD2B,CAA7B;AAIA,MAAME,sBAAsB,GAAiB,CAC3C,KAD2C,EAE3C,GAAGF,uBAFwC,CAA7C;AAIA,MAAMG,mBAAmB,GAAG,IAAIxN,GAAJ,CAAoBuN,sBAApB,CAA5B;AAEA,MAAME,mBAAmB,GAAG,IAAIzN,GAAJ,CAAQ,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,EAAqB,GAArB,CAAR,CAA5B;AACA,MAAM0N,iCAAiC,GAAG,IAAI1N,GAAJ,CAAQ,CAAC,GAAD,EAAM,GAAN,CAAR,CAA1C;AAEO,MAAM2N,eAAe,GAA6B;EACvD5T,KAAK,EAAE,MADgD;EAEvDc,QAAQ,EAAEb,SAF6C;EAGvD4T,UAAU,EAAE5T,SAH2C;EAIvD6T,UAAU,EAAE7T,SAJ2C;EAKvD8T,WAAW,EAAE9T,SAL0C;EAMvD+T,QAAQ,EAAE/T,SAN6C;EAOvDgP,IAAI,EAAEhP,SAPiD;EAQvDgU,IAAI,EAAEhU;AARiD,CAAlD;AAWA,MAAMiU,YAAY,GAA0B;EACjDlU,KAAK,EAAE,MAD0C;EAEjDiI,IAAI,EAAEhI,SAF2C;EAGjD4T,UAAU,EAAE5T,SAHqC;EAIjD6T,UAAU,EAAE7T,SAJqC;EAKjD8T,WAAW,EAAE9T,SALoC;EAMjD+T,QAAQ,EAAE/T,SANuC;EAOjDgP,IAAI,EAAEhP,SAP2C;EAQjDgU,IAAI,EAAEhU;AAR2C,CAA5C;AAWA,MAAMkU,YAAY,GAAqB;EAC5CnU,KAAK,EAAE,WADqC;EAE5CoU,OAAO,EAAEnU,SAFmC;EAG5CoU,KAAK,EAAEpU,SAHqC;EAI5Ca,QAAQ,EAAEb;AAJkC,CAAvC;AAOP,MAAMqU,kBAAkB,GAAG,+BAA3B;;AAEA,MAAMC,yBAAyB,GAAgCpO,KAAK,KAAM;EACxEqO,gBAAgB,EAAEC,OAAO,CAACtO,KAAK,CAACqO,gBAAP;AAD+C,CAAN,CAApE;;AAIA,MAAME,uBAAuB,GAAG,0BAAhC,C,CAEA;AAEA;AACA;AACA;;AAEA;;AAEG;;AACG,SAAUC,YAAV,CAAuBzF,IAAvB,EAAuC;EAC3C,MAAM0F,YAAY,GAAG1F,IAAI,CAACvM,MAALuM,GACjBA,IAAI,CAACvM,MADYuM,GAEjB,OAAOvM,MAAP,KAAkB,WAAlB,GACAA,MADA,GAEA1C,SAJJ;EAKA,MAAM4U,SAAS,GACb,OAAOD,YAAP,KAAwB,WAAxB,IACA,OAAOA,YAAY,CAACvR,QAApB,KAAiC,WADjC,IAEA,OAAOuR,YAAY,CAACvR,QAAbuR,CAAsBE,aAA7B,KAA+C,WAHjD;EAIA,MAAMC,QAAQ,GAAG,CAACF,SAAlB;EAEAjP,SAAS,CACPsJ,IAAI,CAAC7I,MAAL6I,CAAY/O,MAAZ+O,GAAqB,CADd,EAEP,2DAFO,CAATtJ;EAKA,IAAIU,kBAAJ;;EACA,IAAI4I,IAAI,CAAC5I,kBAAT,EAA6B;IAC3BA,kBAAkB,GAAG4I,IAAI,CAAC5I,kBAA1BA;EACD,CAFD,MAEO,IAAI4I,IAAI,CAAC8F,mBAAT,EAA8B;IACnC;IACA,IAAIA,mBAAmB,GAAG9F,IAAI,CAAC8F,mBAA/B;;IACA1O,kBAAkB,GAAIH,KAAK,KAAM;MAC/BqO,gBAAgB,EAAEQ,mBAAmB,CAAC7O,KAAD;IADN,CAAN,CAA3BG;EAGD,CANM,MAMA;IACLA,kBAAkB,GAAGiO,yBAArBjO;EACD,CA5B0C,CA8B3C;;;EACA,IAAIE,QAAQ,GAAkB,EAA9B,CA/B2C,CAgC3C;;EACA,IAAIyO,UAAU,GAAG7O,yBAAyB,CACxC8I,IAAI,CAAC7I,MADmC,EAExCC,kBAFwC,EAGxCrG,SAHwC,EAIxCuG,QAJwC,CAA1C;EAMA,IAAI0O,kBAAJ;EACA,IAAIhO,QAAQ,GAAGgI,IAAI,CAAChI,QAALgI,IAAiB,GAAhC;EACA,IAAIiG,gBAAgB,GAAGjG,IAAI,CAACkG,qBAALlG,IAA8BmG,mBAArD;EACA,IAAIC,2BAA2B,GAAGpG,IAAI,CAACqG,gCAAvC,CA1C2C,CA4C3C;;EACA,IAAIC,MAAM;IACRC,iBAAiB,EAAE,KADX;IAERC,sBAAsB,EAAE,KAFhB;IAGRC,mBAAmB,EAAE,KAHb;IAIRC,kBAAkB,EAAE,KAJZ;IAKR3H,oBAAoB,EAAE,KALd;IAMR4H,8BAA8B,EAAE;EANxB,GAOL3G,IAAI,CAACsG,MAPA,CAAV,CA7C2C,CAsD3C;;;EACA,IAAIM,eAAe,GAAwB,IAA3C,CAvD2C,CAwD3C;;EACA,IAAIjE,WAAW,GAAG,IAAI5L,GAAJ,EAAlB,CAzD2C,CA0D3C;EACA;;EACA,IAAI8P,uBAAuB,GAAG,IAA9B;EACA,IAAIC,gBAAgB,GAAG,IAAI/P,GAAJ,EAAvB,CA7D2C,CA8D3C;;EACA,IAAIgQ,oBAAoB,GAAkC,IAA1D,CA/D2C,CAgE3C;;EACA,IAAIC,uBAAuB,GAA2C,IAAtE,CAjE2C,CAkE3C;;EACA,IAAIC,iBAAiB,GAAqC,IAA1D,CAnE2C,CAoE3C;EACA;EACA;EACA;EACA;EACA;;EACA,IAAIC,qBAAqB,GAAGlH,IAAI,CAACmH,aAALnH,IAAsB,IAAlD;EAEA,IAAIoH,cAAc,GAAGtP,WAAW,CAACiO,UAAD,EAAa/F,IAAI,CAAC3N,OAAL2N,CAAapO,QAA1B,EAAoCoG,QAApC,CAAhC;EACA,IAAIqP,aAAa,GAAqB,IAAtC;;EAEA,IAAID,cAAc,IAAI,IAAlBA,IAA0B,CAAChB,2BAA/B,EAA4D;IAC1D;IACA;IACA,IAAI/P,KAAK,GAAGiR,sBAAsB,CAAC,GAAD,EAAM;MACtCxV,QAAQ,EAAEkO,IAAI,CAAC3N,OAAL2N,CAAapO,QAAboO,CAAsBlO;IADM,CAAN,CAAlC;IAGA,IAAI;MAAEyG,OAAF;MAAWtB;IAAX,IAAqBsQ,sBAAsB,CAACxB,UAAD,CAA/C;IACAqB,cAAc,GAAG7O,OAAjB6O;IACAC,aAAa,GAAG;MAAE,CAACpQ,KAAK,CAACQ,EAAP,GAAYpB;IAAd,CAAhBgR;EACD,CAxF0C,CA0F3C;EACA;EACA;EACA;EACA;EACA;;;EACA,IAAID,cAAc,IAAI,CAACpH,IAAI,CAACmH,aAA5B,EAA2C;IACzC,IAAIK,QAAQ,GAAGC,aAAa,CAC1BL,cAD0B,EAE1BrB,UAF0B,EAG1B/F,IAAI,CAAC3N,OAAL2N,CAAapO,QAAboO,CAAsBlO,QAHI,CAA5B;;IAKA,IAAI0V,QAAQ,CAACE,MAAb,EAAqB;MACnBN,cAAc,GAAG,IAAjBA;IACD;EACF;;EAED,IAAIO,WAAJ;;EACA,IAAI,CAACP,cAAL,EAAqB;IACnBO,WAAW,GAAG,KAAdA;IACAP,cAAc,GAAG,EAAjBA,CAFmB,CAInB;IACA;IACA;;IACA,IAAId,MAAM,CAACG,mBAAX,EAAgC;MAC9B,IAAIe,QAAQ,GAAGC,aAAa,CAC1B,IAD0B,EAE1B1B,UAF0B,EAG1B/F,IAAI,CAAC3N,OAAL2N,CAAapO,QAAboO,CAAsBlO,QAHI,CAA5B;;MAKA,IAAI0V,QAAQ,CAACE,MAATF,IAAmBA,QAAQ,CAACjP,OAAhC,EAAyC;QACvC6O,cAAc,GAAGI,QAAQ,CAACjP,OAA1B6O;MACD;IACF;EACF,CAjBD,MAiBO,IAAIA,cAAc,CAAC5L,IAAf4L,CAAqBQ,CAAC,IAAKA,CAAC,CAAC3Q,KAAF2Q,CAAQC,IAAnCT,CAAJ,EAA8C;IACnD;IACA;IACAO,WAAW,GAAG,KAAdA;EACD,CAJM,MAIA,IAAI,CAACP,cAAc,CAAC5L,IAAf4L,CAAqBQ,CAAC,IAAKA,CAAC,CAAC3Q,KAAF2Q,CAAQE,MAAnCV,CAAL,EAAiD;IACtD;IACAO,WAAW,GAAG,IAAdA;EACD,CAHM,MAGA,IAAIrB,MAAM,CAACG,mBAAX,EAAgC;IACrC;IACA;IACA;IACA,IAAI5N,UAAU,GAAGmH,IAAI,CAACmH,aAALnH,GAAqBA,IAAI,CAACmH,aAALnH,CAAmBnH,UAAxCmH,GAAqD,IAAtE;IACA,IAAI+H,MAAM,GAAG/H,IAAI,CAACmH,aAALnH,GAAqBA,IAAI,CAACmH,aAALnH,CAAmB+H,MAAxC/H,GAAiD,IAA9D;;IACA,IAAIgI,kBAAkB,GAAIJ,CAAyB,IAAI;MACrD;MACA,IAAI,CAACA,CAAC,CAAC3Q,KAAF2Q,CAAQE,MAAb,EAAqB;QACnB,OAAO,IAAP;MACD,CAJoD,CAKrD;;;MACA,IACE,OAAOF,CAAC,CAAC3Q,KAAF2Q,CAAQE,MAAf,KAA0B,UAA1B,IACAF,CAAC,CAAC3Q,KAAF2Q,CAAQE,MAARF,CAAeK,OAAfL,KAA2B,IAF7B,EAGE;QACA,OAAO,KAAP;MACD,CAXoD,CAYrD;;;MACA,OACG/O,UAAU,IAAIA,UAAU,CAAC+O,CAAC,CAAC3Q,KAAF2Q,CAAQnQ,EAAT,CAAVoB,KAA2B9H,SAAzC8H,IACAkP,MAAM,IAAIA,MAAM,CAACH,CAAC,CAAC3Q,KAAF2Q,CAAQnQ,EAAT,CAANsQ,KAAuBhX,SAFpC;IAID,CAjBD,CANqC,CAyBrC;;;IACA,IAAIgX,MAAJ,EAAY;MACV,IAAIxS,GAAG,GAAG6R,cAAc,CAACc,SAAfd,CACPQ,CAAC,IAAKG,MAAO,CAACH,CAAC,CAAC3Q,KAAF2Q,CAAQnQ,EAAT,CAAPsQ,KAAwBhX,SADvBqW,CAAV;MAGAO,WAAW,GAAGP,cAAc,CAAC1S,KAAf0S,CAAqB,CAArBA,EAAwB7R,GAAG,GAAG,CAA9B6R,EAAiCtL,KAAjCsL,CAAuCY,kBAAvCZ,CAAdO;IACD,CALD,MAKO;MACLA,WAAW,GAAGP,cAAc,CAACtL,KAAfsL,CAAqBY,kBAArBZ,CAAdO;IACD;EACF,CAlCM,MAkCA;IACL;IACA;IACAA,WAAW,GAAG3H,IAAI,CAACmH,aAALnH,IAAsB,IAApC2H;EACD;;EAED,IAAIQ,MAAJ;EACA,IAAIrX,KAAK,GAAgB;IACvBsX,aAAa,EAAEpI,IAAI,CAAC3N,OAAL2N,CAAa9O,MADL;IAEvBU,QAAQ,EAAEoO,IAAI,CAAC3N,OAAL2N,CAAapO,QAFA;IAGvB2G,OAAO,EAAE6O,cAHc;IAIvBO,WAJuB;IAKvBU,UAAU,EAAE3D,eALW;IAMvB;IACA4D,qBAAqB,EAAEtI,IAAI,CAACmH,aAALnH,IAAsB,IAAtBA,GAA6B,KAA7BA,GAAqC,IAPrC;IAQvBuI,kBAAkB,EAAE,KARG;IASvBC,YAAY,EAAE,MATS;IAUvB3P,UAAU,EAAGmH,IAAI,CAACmH,aAALnH,IAAsBA,IAAI,CAACmH,aAALnH,CAAmBnH,UAAzCmH,IAAwD,EAV9C;IAWvByI,UAAU,EAAGzI,IAAI,CAACmH,aAALnH,IAAsBA,IAAI,CAACmH,aAALnH,CAAmByI,UAAzCzI,IAAwD,IAX9C;IAYvB+H,MAAM,EAAG/H,IAAI,CAACmH,aAALnH,IAAsBA,IAAI,CAACmH,aAALnH,CAAmB+H,MAAzC/H,IAAoDqH,aAZtC;IAavBqB,QAAQ,EAAE,IAAIC,GAAJ,EAba;IAcvBC,QAAQ,EAAE,IAAID,GAAJ;EAda,CAAzB,CA7K2C,CA8L3C;EACA;;EACA,IAAIE,aAAa,GAAkBC,MAAa,CAAC3X,GAAjD,CAhM2C,CAkM3C;EACA;;EACA,IAAI4X,yBAAyB,GAAG,KAAhC,CApM2C,CAsM3C;;EACA,IAAIC,2BAAJ,CAvM2C,CAyM3C;;EACA,IAAIC,4BAA4B,GAAG,KAAnC,CA1M2C,CA4M3C;;EACA,IAAIC,sBAAsB,GAA6B,IAAIP,GAAJ,EAAvD,CA7M2C,CAkN3C;;EACA,IAAIQ,2BAA2B,GAAwB,IAAvD,CAnN2C,CAqN3C;EACA;;EACA,IAAIC,2BAA2B,GAAG,KAAlC,CAvN2C,CAyN3C;EACA;EACA;EACA;;EACA,IAAIC,sBAAsB,GAAG,KAA7B,CA7N2C,CA+N3C;EACA;;EACA,IAAIC,uBAAuB,GAAa,EAAxC,CAjO2C,CAmO3C;EACA;;EACA,IAAIC,qBAAqB,GAAgB,IAAIxS,GAAJ,EAAzC,CArO2C,CAuO3C;;EACA,IAAIyS,gBAAgB,GAAG,IAAIb,GAAJ,EAAvB,CAxO2C,CA0O3C;;EACA,IAAIc,kBAAkB,GAAG,CAAzB,CA3O2C,CA6O3C;EACA;EACA;;EACA,IAAIC,uBAAuB,GAAG,CAAC,CAA/B,CAhP2C,CAkP3C;;EACA,IAAIC,cAAc,GAAG,IAAIhB,GAAJ,EAArB,CAnP2C,CAqP3C;;EACA,IAAIiB,gBAAgB,GAAG,IAAI7S,GAAJ,EAAvB,CAtP2C,CAwP3C;;EACA,IAAI8S,gBAAgB,GAAG,IAAIlB,GAAJ,EAAvB,CAzP2C,CA2P3C;;EACA,IAAImB,cAAc,GAAG,IAAInB,GAAJ,EAArB,CA5P2C,CA8P3C;EACA;;EACA,IAAIoB,eAAe,GAAG,IAAIhT,GAAJ,EAAtB,CAhQ2C,CAkQ3C;EACA;EACA;EACA;;EACA,IAAIiT,eAAe,GAAG,IAAIrB,GAAJ,EAAtB,CAtQ2C,CAwQ3C;EACA;;EACA,IAAIsB,gBAAgB,GAAG,IAAItB,GAAJ,EAAvB,CA1Q2C,CA4Q3C;EACA;;EACA,IAAIuB,kBAAkB,GAAG,IAAIvB,GAAJ,EAAzB,CA9Q2C,CAmR3C;EACA;;EACA,IAAIwB,2BAA2B,GAA6BpZ,SAA5D,CArR2C,CAuR3C;EACA;EACA;;EACA,SAASqZ,UAAT,GAAmB;IACjB;IACA;IACAxD,eAAe,GAAG5G,IAAI,CAAC3N,OAAL2N,CAAa1M,MAAb0M,CAChBvK,QAA+C;MAAA,IAA9C;QAAEvE,MAAM,EAAEkX,aAAV;QAAyBxW,QAAzB;QAAmCqB;MAAnC,IAA0CwC,IAAI,EAC7C;MACA;;MACA,IAAI0U,2BAAJ,EAAiC;QAC/BA,2BAA2B;QAC3BA,2BAA2B,GAAGpZ,SAA9BoZ;QACA;MACD;;MAEDpY,OAAO,CACLkY,gBAAgB,CAAC9G,IAAjB8G,KAA0B,CAA1BA,IAA+BhX,KAAK,IAAI,IADnC,EAEL,uEACE,wEADF,GAEE,uEAFF,GAGE,yEAHF,GAIE,iEAJF,GAKE,yDAPG,CAAPlB;MAUA,IAAIsY,UAAU,GAAGC,qBAAqB,CAAC;QACrCC,eAAe,EAAEzZ,KAAK,CAACc,QADc;QAErCmB,YAAY,EAAEnB,QAFuB;QAGrCwW;MAHqC,CAAD,CAAtC;;MAMA,IAAIiC,UAAU,IAAIpX,KAAK,IAAI,IAA3B,EAAiC;QAC/B;QACA,IAAIuX,wBAAwB,GAAG,IAAItJ,OAAJ,CAAmBgC,OAAO,IAAI;UAC3DiH,2BAA2B,GAAGjH,OAA9BiH;QACD,CAF8B,CAA/B;QAGAnK,IAAI,CAAC3N,OAAL2N,CAAa5M,EAAb4M,CAAgB/M,KAAK,GAAG,CAAC,CAAzB+M,EAL+B,CAO/B;;QACAyK,aAAa,CAACJ,UAAD,EAAa;UACxBvZ,KAAK,EAAE,SADiB;UAExBc,QAFwB;;UAGxBsT,OAAOA;YACLuF,aAAa,CAACJ,UAAD,EAAc;cACzBvZ,KAAK,EAAE,YADkB;cAEzBoU,OAAO,EAAEnU,SAFgB;cAGzBoU,KAAK,EAAEpU,SAHkB;cAIzBa;YAJyB,CAAd,CAAb6Y,CADK,CAOL;YACA;YACA;;YACAD,wBAAwB,CAACvI,IAAzBuI,CAA8B,MAAMxK,IAAI,CAAC3N,OAAL2N,CAAa5M,EAAb4M,CAAgB/M,KAAhB+M,CAApCwK;UACD,CAduB;;UAexBrF,KAAKA;YACH,IAAIyD,QAAQ,GAAG,IAAID,GAAJ,CAAQ7X,KAAK,CAAC8X,QAAd,CAAf;YACAA,QAAQ,CAACtI,GAATsI,CAAayB,UAAbzB,EAA0B3D,YAA1B2D;YACA8B,WAAW,CAAC;cAAE9B;YAAF,CAAD,CAAX8B;UACF;;QAnBwB,CAAb,CAAbD;QAqBA;MACD;;MAED,OAAOE,eAAe,CAACvC,aAAD,EAAgBxW,QAAhB,CAAtB;IACD,CA3DeoO,CAAlB4G;;IA8DA,IAAIjB,SAAJ,EAAe;MACb;MACA;MACAiF,yBAAyB,CAAClF,YAAD,EAAewD,sBAAf,CAAzB0B;;MACA,IAAIC,uBAAuB,GAAGA,MAC5BC,yBAAyB,CAACpF,YAAD,EAAewD,sBAAf,CAD3B;;MAEAxD,YAAY,CAAC/O,gBAAb+O,CAA8B,UAA9BA,EAA0CmF,uBAA1CnF;;MACAyD,2BAA2B,GAAGA,MAC5BzD,YAAY,CAAC9O,mBAAb8O,CAAiC,UAAjCA,EAA6CmF,uBAA7CnF,CADFyD;IAED,CA1EgB,CA4EjB;IACA;IACA;IACA;IACA;;;IACA,IAAI,CAACrY,KAAK,CAAC6W,WAAX,EAAwB;MACtBgD,eAAe,CAAC7B,MAAa,CAAC3X,GAAf,EAAoBL,KAAK,CAACc,QAA1B,EAAoC;QACjDmZ,gBAAgB,EAAE;MAD+B,CAApC,CAAfJ;IAGD;;IAED,OAAOxC,MAAP;EACF,CAlX2C,CAoX3C;;;EACA,SAAS6C,OAAT,GAAgB;IACd,IAAIpE,eAAJ,EAAqB;MACnBA,eAAe;IAChB;;IACD,IAAIuC,2BAAJ,EAAiC;MAC/BA,2BAA2B;IAC5B;;IACDxG,WAAW,CAACsI,KAAZtI;IACAqG,2BAA2B,IAAIA,2BAA2B,CAACjG,KAA5BiG,EAA/BA;IACAlY,KAAK,CAAC4X,QAAN5X,CAAe8I,OAAf9I,CAAuB,CAAC6M,CAAD,EAAIhM,GAAJ,KAAYuZ,aAAa,CAACvZ,GAAD,CAAhDb;IACAA,KAAK,CAAC8X,QAAN9X,CAAe8I,OAAf9I,CAAuB,CAAC6M,CAAD,EAAIhM,GAAJ,KAAYwZ,aAAa,CAACxZ,GAAD,CAAhDb;EACF,CAhY2C,CAkY3C;;;EACA,SAAS+R,SAAT,CAAmBtP,EAAnB,EAAuC;IACrCoP,WAAW,CAACb,GAAZa,CAAgBpP,EAAhBoP;IACA,OAAO,MAAMA,WAAW,CAACJ,MAAZI,CAAmBpP,EAAnBoP,CAAb;EACF,CAtY2C,CAwY3C;;;EACA,SAAS+H,WAAT,CACEU,QADF,EAEEC,IAFF,EAKQ;IAAA,IAHNA,eAGM,EAHNA;MAAAA,OAGI,EAHJA;IAGM;;IAENva,KAAK,gBACAA,KADA,EAEAsa,QAFA,CAALta,CAFM,CAON;IACA;;IACA,IAAIwa,iBAAiB,GAAa,EAAlC;IACA,IAAIC,mBAAmB,GAAa,EAApC;;IAEA,IAAIjF,MAAM,CAACC,iBAAX,EAA8B;MAC5BzV,KAAK,CAAC4X,QAAN5X,CAAe8I,OAAf9I,CAAuB,CAAC0a,OAAD,EAAU7Z,GAAV,KAAiB;QACtC,IAAI6Z,OAAO,CAAC1a,KAAR0a,KAAkB,MAAtB,EAA8B;UAC5B,IAAIzB,eAAe,CAAC1J,GAAhB0J,CAAoBpY,GAApBoY,CAAJ,EAA8B;YAC5B;YACAwB,mBAAmB,CAAC1Y,IAApB0Y,CAAyB5Z,GAAzB4Z;UACD,CAHD,MAGO;YACL;YACA;YACAD,iBAAiB,CAACzY,IAAlByY,CAAuB3Z,GAAvB2Z;UACD;QACF;MACF,CAXDxa;IAYD,CAzBK,CA2BN;IACA;IACA;;;IACA,CAAC,GAAG6R,WAAJ,EAAiB/I,OAAjB,CAA0BgJ,UAAU,IAClCA,UAAU,CAAC9R,KAAD,EAAQ;MAChBiZ,eAAe,EAAEwB,mBADD;MAEhBE,2BAA2B,EAAEJ,IAAI,CAACK,kBAFlB;MAGhBC,kBAAkB,EAAEN,IAAI,CAACO,SAALP,KAAmB;IAHvB,CAAR,CADZ,EA9BM,CAsCN;;IACA,IAAI/E,MAAM,CAACC,iBAAX,EAA8B;MAC5B+E,iBAAiB,CAAC1R,OAAlB0R,CAA2B3Z,GAAG,IAAKb,KAAK,CAAC4X,QAAN5X,CAAeyR,MAAfzR,CAAsBa,GAAtBb,CAAnCwa;MACAC,mBAAmB,CAAC3R,OAApB2R,CAA6B5Z,GAAG,IAAKuZ,aAAa,CAACvZ,GAAD,CAAlD4Z;IACD;EACH,CAzb2C,CA2b3C;EACA;EACA;EACA;EACA;;;EACA,SAASM,kBAAT,CACEja,QADF,EAEEwZ,QAFF,EAE4EU,KAF5E,EAG6C;IAAA;;IAAA,IAA3C;MAAEF;IAAF,IAAWE,mBAA8B,EAA9BA,GAAgCA,OAE3C;IACA;IACA;IACA;IACA;;IACA,IAAIC,cAAc,GAChBjb,KAAK,CAAC2X,UAAN3X,IAAoB,IAApBA,IACAA,KAAK,CAACuX,UAANvX,CAAiB6T,UAAjB7T,IAA+B,IAD/BA,IAEAkb,gBAAgB,CAAClb,KAAK,CAACuX,UAANvX,CAAiB6T,UAAlB,CAFhB7T,IAGAA,KAAK,CAACuX,UAANvX,CAAiBA,KAAjBA,KAA2B,SAH3BA,IAIA,4BAAQ,CAACA,KAAT,KAAc,IAAd,GAAc,MAAd,mBAAgBmb,WAAhB,MAAgC,IALlC;IAOA,IAAIxD,UAAJ;;IACA,IAAI2C,QAAQ,CAAC3C,UAAb,EAAyB;MACvB,IAAIpM,MAAM,CAAC6P,IAAP7P,CAAY+O,QAAQ,CAAC3C,UAArBpM,EAAiCpL,MAAjCoL,GAA0C,CAA9C,EAAiD;QAC/CoM,UAAU,GAAG2C,QAAQ,CAAC3C,UAAtBA;MACD,CAFD,MAEO;QACL;QACAA,UAAU,GAAG,IAAbA;MACD;IACF,CAPD,MAOO,IAAIsD,cAAJ,EAAoB;MACzB;MACAtD,UAAU,GAAG3X,KAAK,CAAC2X,UAAnBA;IACD,CAHM,MAGA;MACL;MACAA,UAAU,GAAG,IAAbA;IACD,CA5B0C,CA8B3C;;;IACA,IAAI5P,UAAU,GAAGuS,QAAQ,CAACvS,UAATuS,GACbe,eAAe,CACbrb,KAAK,CAAC+H,UADO,EAEbuS,QAAQ,CAACvS,UAFI,EAGbuS,QAAQ,CAAC7S,OAAT6S,IAAoB,EAHP,EAIbA,QAAQ,CAACrD,MAJI,CADFqD,GAObta,KAAK,CAAC+H,UAPV,CA/B2C,CAwC3C;IACA;;IACA,IAAI+P,QAAQ,GAAG9X,KAAK,CAAC8X,QAArB;;IACA,IAAIA,QAAQ,CAACzF,IAATyF,GAAgB,CAApB,EAAuB;MACrBA,QAAQ,GAAG,IAAID,GAAJ,CAAQC,QAAR,CAAXA;MACAA,QAAQ,CAAChP,OAATgP,CAAiB,CAACjL,CAAD,EAAIqF,CAAJ,KAAU4F,QAAQ,CAACtI,GAATsI,CAAa5F,CAAb4F,EAAgB3D,YAAhB2D,CAA3BA;IACD,CA9C0C,CAgD3C;IACA;;;IACA,IAAIL,kBAAkB,GACpBQ,yBAAyB,KAAK,IAA9BA,IACCjY,KAAK,CAACuX,UAANvX,CAAiB6T,UAAjB7T,IAA+B,IAA/BA,IACCkb,gBAAgB,CAAClb,KAAK,CAACuX,UAANvX,CAAiB6T,UAAlB,CADjB7T,IAEC,6BAAQ,CAACA,KAAT,sCAAgBmb,WAAhB,MAAgC,IAJpC,CAlD2C,CAwD3C;;IACA,IAAIjG,kBAAJ,EAAwB;MACtBD,UAAU,GAAGC,kBAAbD;MACAC,kBAAkB,GAAGjV,SAArBiV;IACD;;IAED,IAAIoD,2BAAJ,EAAiC,CAAjC,KAEO,IAAIP,aAAa,KAAKC,MAAa,CAAC3X,GAApC,EAAyC,CAAzC,KAEA,IAAI0X,aAAa,KAAKC,MAAa,CAAChW,IAApC,EAA0C;MAC/CkN,IAAI,CAAC3N,OAAL2N,CAAanN,IAAbmN,CAAkBpO,QAAlBoO,EAA4BpO,QAAQ,CAACd,KAArCkP;IACD,CAFM,MAEA,IAAI6I,aAAa,KAAKC,MAAa,CAAC3V,OAApC,EAA6C;MAClD6M,IAAI,CAAC3N,OAAL2N,CAAa9M,OAAb8M,CAAqBpO,QAArBoO,EAA+BpO,QAAQ,CAACd,KAAxCkP;IACD;IAED,IAAI0L,kBAAJ,CAxE2C,CA0E3C;;IACA,IAAI7C,aAAa,KAAKC,MAAa,CAAC3X,GAApC,EAAyC;MACvC;MACA,IAAIib,UAAU,GAAGlD,sBAAsB,CAAC7G,GAAvB6G,CAA2BpY,KAAK,CAACc,QAANd,CAAegB,QAA1CoX,CAAjB;;MACA,IAAIkD,UAAU,IAAIA,UAAU,CAAC/L,GAAX+L,CAAexa,QAAQ,CAACE,QAAxBsa,CAAlB,EAAqD;QACnDV,kBAAkB,GAAG;UACnBnB,eAAe,EAAEzZ,KAAK,CAACc,QADJ;UAEnBmB,YAAY,EAAEnB;QAFK,CAArB8Z;MAID,CALD,MAKO,IAAIxC,sBAAsB,CAAC7I,GAAvB6I,CAA2BtX,QAAQ,CAACE,QAApCoX,CAAJ,EAAmD;QACxD;QACA;QACAwC,kBAAkB,GAAG;UACnBnB,eAAe,EAAE3Y,QADE;UAEnBmB,YAAY,EAAEjC,KAAK,CAACc;QAFD,CAArB8Z;MAID;IACF,CAhBD,MAgBO,IAAIzC,4BAAJ,EAAkC;MACvC;MACA,IAAIoD,OAAO,GAAGnD,sBAAsB,CAAC7G,GAAvB6G,CAA2BpY,KAAK,CAACc,QAANd,CAAegB,QAA1CoX,CAAd;;MACA,IAAImD,OAAJ,EAAa;QACXA,OAAO,CAACvK,GAARuK,CAAYza,QAAQ,CAACE,QAArBua;MACD,CAFD,MAEO;QACLA,OAAO,GAAG,IAAItV,GAAJ,CAAgB,CAACnF,QAAQ,CAACE,QAAV,CAAhB,CAAVua;QACAnD,sBAAsB,CAAC5I,GAAvB4I,CAA2BpY,KAAK,CAACc,QAANd,CAAegB,QAA1CoX,EAAoDmD,OAApDnD;MACD;;MACDwC,kBAAkB,GAAG;QACnBnB,eAAe,EAAEzZ,KAAK,CAACc,QADJ;QAEnBmB,YAAY,EAAEnB;MAFK,CAArB8Z;IAID;;IAEDhB,WAAW,cAEJU,QAFI,EAEI;MACX3C,UADW;MAEX5P,UAFW;MAGXuP,aAAa,EAAES,aAHJ;MAIXjX,QAJW;MAKX+V,WAAW,EAAE,IALF;MAMXU,UAAU,EAAE3D,eAND;MAOX8D,YAAY,EAAE,MAPH;MAQXF,qBAAqB,EAAEgE,sBAAsB,CAC3C1a,QAD2C,EAE3CwZ,QAAQ,CAAC7S,OAAT6S,IAAoBta,KAAK,CAACyH,OAFiB,CARlC;MAYXgQ,kBAZW;MAaXK;IAbW,CAFJ,GAiBT;MACE8C,kBADF;MAEEE,SAAS,EAAEA,SAAS,KAAK;IAF3B,CAjBS,CAAXlB,CA1G2C,CAiI3C;;IACA7B,aAAa,GAAGC,MAAa,CAAC3X,GAA9B0X;IACAE,yBAAyB,GAAG,KAA5BA;IACAE,4BAA4B,GAAG,KAA/BA;IACAG,2BAA2B,GAAG,KAA9BA;IACAC,sBAAsB,GAAG,KAAzBA;IACAC,uBAAuB,GAAG,EAA1BA;EACF,CA3kB2C,CA6kB3C;EACA;;;EACA,eAAeiD,QAAf,CACE7a,EADF,EAEE2Z,IAFF,EAE8B;IAE5B,IAAI,OAAO3Z,EAAP,KAAc,QAAlB,EAA4B;MAC1BsO,IAAI,CAAC3N,OAAL2N,CAAa5M,EAAb4M,CAAgBtO,EAAhBsO;MACA;IACD;;IAED,IAAIwM,cAAc,GAAGC,WAAW,CAC9B3b,KAAK,CAACc,QADwB,EAE9Bd,KAAK,CAACyH,OAFwB,EAG9BP,QAH8B,EAI9BsO,MAAM,CAACI,kBAJuB,EAK9BhV,EAL8B,EAM9B4U,MAAM,CAACvH,oBANuB,EAO9BsM,IAAI,IAAJA,oBAAI,CAAEqB,WAPwB,EAQ9BrB,IAAI,QAAJA,GAAI,MAAJA,OAAI,CAAEsB,QARwB,CAAhC;IAUA,IAAI;MAAEla,IAAF;MAAQma,UAAR;MAAoBvW;IAApB,IAA8BwW,wBAAwB,CACxDvG,MAAM,CAACE,sBADiD,EAExD,KAFwD,EAGxDgG,cAHwD,EAIxDnB,IAJwD,CAA1D;IAOA,IAAId,eAAe,GAAGzZ,KAAK,CAACc,QAA5B;IACA,IAAImB,YAAY,GAAGlB,cAAc,CAACf,KAAK,CAACc,QAAP,EAAiBa,IAAjB,EAAuB4Y,IAAI,IAAIA,IAAI,CAACva,KAApC,CAAjC,CAzB4B,CA2B5B;IACA;IACA;IACA;IACA;;IACAiC,YAAY,YACPA,EADO,EACPA,YADO,EAEPiN,IAAI,CAAC3N,OAAL2N,CAAaxN,cAAbwN,CAA4BjN,YAA5BiN,CAFO,CAAZjN;IAKA,IAAI+Z,WAAW,GAAGzB,IAAI,IAAIA,IAAI,CAACnY,OAALmY,IAAgB,IAAxBA,GAA+BA,IAAI,CAACnY,OAApCmY,GAA8Cta,SAAhE;IAEA,IAAIqX,aAAa,GAAGU,MAAa,CAAChW,IAAlC;;IAEA,IAAIga,WAAW,KAAK,IAApB,EAA0B;MACxB1E,aAAa,GAAGU,MAAa,CAAC3V,OAA9BiV;IACD,CAFD,MAEO,IAAI0E,WAAW,KAAK,KAApB,EAA2B,CAA3B,KAEA,IACLF,UAAU,IAAI,IAAdA,IACAZ,gBAAgB,CAACY,UAAU,CAACjI,UAAZ,CADhBiI,IAEAA,UAAU,CAAChI,UAAXgI,KAA0B9b,KAAK,CAACc,QAANd,CAAegB,QAAfhB,GAA0BA,KAAK,CAACc,QAANd,CAAe6B,MAH9D,EAIL;MACA;MACA;MACA;MACA;MACAyV,aAAa,GAAGU,MAAa,CAAC3V,OAA9BiV;IACD;;IAED,IAAIG,kBAAkB,GACpB8C,IAAI,IAAI,wBAAwBA,IAAhCA,GACIA,IAAI,CAAC9C,kBAAL8C,KAA4B,IADhCA,GAEIta,SAHN;IAKA,IAAI6a,SAAS,GAAG,CAACP,IAAI,IAAIA,IAAI,CAACM,kBAAd,MAAsC,IAAtD;IAEA,IAAItB,UAAU,GAAGC,qBAAqB,CAAC;MACrCC,eADqC;MAErCxX,YAFqC;MAGrCqV;IAHqC,CAAD,CAAtC;;IAMA,IAAIiC,UAAJ,EAAgB;MACd;MACAI,aAAa,CAACJ,UAAD,EAAa;QACxBvZ,KAAK,EAAE,SADiB;QAExBc,QAAQ,EAAEmB,YAFc;;QAGxBmS,OAAOA;UACLuF,aAAa,CAACJ,UAAD,EAAc;YACzBvZ,KAAK,EAAE,YADkB;YAEzBoU,OAAO,EAAEnU,SAFgB;YAGzBoU,KAAK,EAAEpU,SAHkB;YAIzBa,QAAQ,EAAEmB;UAJe,CAAd,CAAb0X,CADK,CAOL;;UACA8B,QAAQ,CAAC7a,EAAD,EAAK2Z,IAAL,CAARkB;QACD,CAZuB;;QAaxBpH,KAAKA;UACH,IAAIyD,QAAQ,GAAG,IAAID,GAAJ,CAAQ7X,KAAK,CAAC8X,QAAd,CAAf;UACAA,QAAQ,CAACtI,GAATsI,CAAayB,UAAbzB,EAA0B3D,YAA1B2D;UACA8B,WAAW,CAAC;YAAE9B;UAAF,CAAD,CAAX8B;QACF;;MAjBwB,CAAb,CAAbD;MAmBA;IACD;;IAED,OAAO,MAAME,eAAe,CAACvC,aAAD,EAAgBrV,YAAhB,EAA8B;MACxD6Z,UADwD;MAExD;MACA;MACAG,YAAY,EAAE1W,KAJ0C;MAKxDkS,kBALwD;MAMxDrV,OAAO,EAAEmY,IAAI,IAAIA,IAAI,CAACnY,OANkC;MAOxD8Z,oBAAoB,EAAE3B,IAAI,IAAIA,IAAI,CAAC4B,uBAPqB;MAQxDrB;IARwD,CAA9B,CAA5B;EAUF,CAzrB2C,CA2rB3C;EACA;EACA;;;EACA,SAASsB,UAAT,GAAmB;IACjBC,oBAAoB;IACpBzC,WAAW,CAAC;MAAElC,YAAY,EAAE;IAAhB,CAAD,CAAXkC,CAFiB,CAIjB;IACA;;IACA,IAAI5Z,KAAK,CAACuX,UAANvX,CAAiBA,KAAjBA,KAA2B,YAA/B,EAA6C;MAC3C;IACD,CARgB,CAUjB;IACA;IACA;;;IACA,IAAIA,KAAK,CAACuX,UAANvX,CAAiBA,KAAjBA,KAA2B,MAA/B,EAAuC;MACrC6Z,eAAe,CAAC7Z,KAAK,CAACsX,aAAP,EAAsBtX,KAAK,CAACc,QAA5B,EAAsC;QACnDwb,8BAA8B,EAAE;MADmB,CAAtC,CAAfzC;MAGA;IACD,CAlBgB,CAoBjB;IACA;IACA;;;IACAA,eAAe,CACb9B,aAAa,IAAI/X,KAAK,CAACsX,aADV,EAEbtX,KAAK,CAACuX,UAANvX,CAAiBc,QAFJ,EAGb;MACEyb,kBAAkB,EAAEvc,KAAK,CAACuX,UAD5B;MAEE;MACA2E,oBAAoB,EAAE/D,4BAA4B,KAAK;IAHzD,CAHa,CAAf0B;EASF,CA9tB2C,CAguB3C;EACA;EACA;;;EACA,eAAeA,eAAf,CACEvC,aADF,EAEExW,QAFF,EAGEyZ,IAHF,EAcG;IAED;IACA;IACA;IACArC,2BAA2B,IAAIA,2BAA2B,CAACjG,KAA5BiG,EAA/BA;IACAA,2BAA2B,GAAG,IAA9BA;IACAH,aAAa,GAAGT,aAAhBS;IACAO,2BAA2B,GACzB,CAACiC,IAAI,IAAIA,IAAI,CAAC+B,8BAAd,MAAkD,IADpDhE,CARC,CAWD;IACA;;IACAkE,kBAAkB,CAACxc,KAAK,CAACc,QAAP,EAAiBd,KAAK,CAACyH,OAAvB,CAAlB+U;IACAvE,yBAAyB,GAAG,CAACsC,IAAI,IAAIA,IAAI,CAAC9C,kBAAd,MAAsC,IAAlEQ;IAEAE,4BAA4B,GAAG,CAACoC,IAAI,IAAIA,IAAI,CAAC2B,oBAAd,MAAwC,IAAvE/D;IAEA,IAAIsE,WAAW,GAAGvH,kBAAkB,IAAID,UAAxC;IACA,IAAIyH,iBAAiB,GAAGnC,IAAI,IAAIA,IAAI,CAACgC,kBAArC;IACA,IAAI9U,OAAO,GAAGT,WAAW,CAACyV,WAAD,EAAc3b,QAAd,EAAwBoG,QAAxB,CAAzB;IACA,IAAI4T,SAAS,GAAG,CAACP,IAAI,IAAIA,IAAI,CAACO,SAAd,MAA6B,IAA7C;IAEA,IAAIpE,QAAQ,GAAGC,aAAa,CAAClP,OAAD,EAAUgV,WAAV,EAAuB3b,QAAQ,CAACE,QAAhC,CAA5B;;IACA,IAAI0V,QAAQ,CAACE,MAATF,IAAmBA,QAAQ,CAACjP,OAAhC,EAAyC;MACvCA,OAAO,GAAGiP,QAAQ,CAACjP,OAAnBA;IACD,CA1BA,CA4BD;;;IACA,IAAI,CAACA,OAAL,EAAc;MACZ,IAAI;QAAElC,KAAF;QAASoX,eAAT;QAA0BxW;MAA1B,IAAoCyW,qBAAqB,CAC3D9b,QAAQ,CAACE,QADkD,CAA7D;MAGA+Z,kBAAkB,CAChBja,QADgB,EAEhB;QACE2G,OAAO,EAAEkV,eADX;QAEE5U,UAAU,EAAE,EAFd;QAGEkP,MAAM,EAAE;UACN,CAAC9Q,KAAK,CAACQ,EAAP,GAAYpB;QADN;MAHV,CAFgB,EAShB;QAAEuV;MAAF,CATgB,CAAlBC;MAWA;IACD,CA7CA,CA+CD;IACA;IACA;IACA;IACA;IACA;;;IACA,IACE/a,KAAK,CAAC6W,WAAN7W,IACA,CAACuY,sBADDvY,IAEA6c,gBAAgB,CAAC7c,KAAK,CAACc,QAAP,EAAiBA,QAAjB,CAFhBd,IAGA,EAAEua,IAAI,IAAIA,IAAI,CAACuB,UAAbvB,IAA2BW,gBAAgB,CAACX,IAAI,CAACuB,UAALvB,CAAgB1G,UAAjB,CAA7C,CAJF,EAKE;MACAkH,kBAAkB,CAACja,QAAD,EAAW;QAAE2G;MAAF,CAAX,EAAwB;QAAEqT;MAAF,CAAxB,CAAlBC;MACA;IACD,CA7DA,CA+DD;;;IACA7C,2BAA2B,GAAG,IAAI3H,eAAJ,EAA9B2H;IACA,IAAI4E,OAAO,GAAGC,uBAAuB,CACnC7N,IAAI,CAAC3N,OAD8B,EAEnCT,QAFmC,EAGnCoX,2BAA2B,CAACxH,MAHO,EAInC6J,IAAI,IAAIA,IAAI,CAACuB,UAJsB,CAArC;IAMA,IAAIkB,mBAAJ;;IAEA,IAAIzC,IAAI,IAAIA,IAAI,CAAC0B,YAAjB,EAA+B;MAC7B;MACA;MACA;MACA;MACAe,mBAAmB,GAAG,CACpBC,mBAAmB,CAACxV,OAAD,CAAnBwV,CAA6B9W,KAA7B8W,CAAmCtW,EADf,EAEpB;QAAEiJ,IAAI,EAAE7J,UAAU,CAACR,KAAnB;QAA0BA,KAAK,EAAEgV,IAAI,CAAC0B;MAAtC,CAFoB,CAAtBe;IAID,CATD,MASO,IACLzC,IAAI,IACJA,IAAI,CAACuB,UADLvB,IAEAW,gBAAgB,CAACX,IAAI,CAACuB,UAALvB,CAAgB1G,UAAjB,CAHX,EAIL;MACA;MACA,IAAIqJ,YAAY,GAAG,MAAMC,YAAY,CACnCL,OADmC,EAEnChc,QAFmC,EAGnCyZ,IAAI,CAACuB,UAH8B,EAInCrU,OAJmC,EAKnCiP,QAAQ,CAACE,MAL0B,EAMnC;QAAExU,OAAO,EAAEmY,IAAI,CAACnY,OAAhB;QAAyB0Y;MAAzB,CANmC,CAArC;;MASA,IAAIoC,YAAY,CAACE,cAAjB,EAAiC;QAC/B;MACD,CAbD,CAeA;MACA;;;MACA,IAAIF,YAAY,CAACF,mBAAjB,EAAsC;QACpC,IAAI,CAACK,OAAD,EAAU1T,MAAV,IAAoBuT,YAAY,CAACF,mBAArC;;QACA,IACEM,aAAa,CAAC3T,MAAD,CAAb2T,IACAjK,oBAAoB,CAAC1J,MAAM,CAACpE,KAAR,CADpB+X,IAEA3T,MAAM,CAACpE,KAAPoE,CAAayF,MAAbzF,KAAwB,GAH1B,EAIE;UACAuO,2BAA2B,GAAG,IAA9BA;UAEA6C,kBAAkB,CAACja,QAAD,EAAW;YAC3B2G,OAAO,EAAEyV,YAAY,CAACzV,OADK;YAE3BM,UAAU,EAAE,EAFe;YAG3BkP,MAAM,EAAE;cACN,CAACoG,OAAD,GAAW1T,MAAM,CAACpE;YADZ;UAHmB,CAAX,CAAlBwV;UAOA;QACD;MACF;;MAEDtT,OAAO,GAAGyV,YAAY,CAACzV,OAAbyV,IAAwBzV,OAAlCA;MACAuV,mBAAmB,GAAGE,YAAY,CAACF,mBAAnCA;MACAN,iBAAiB,GAAGa,oBAAoB,CAACzc,QAAD,EAAWyZ,IAAI,CAACuB,UAAhB,CAAxCY;MACA5B,SAAS,GAAG,KAAZA,CAxCA,CAyCA;;MACApE,QAAQ,CAACE,MAATF,GAAkB,KAAlBA,CA1CA,CA4CA;;MACAoG,OAAO,GAAGC,uBAAuB,CAC/B7N,IAAI,CAAC3N,OAD0B,EAE/Bub,OAAO,CAACrZ,GAFuB,EAG/BqZ,OAAO,CAACpM,MAHuB,CAAjCoM;IAKD,CAxIA,CA0ID;;;IACA,IAAI;MACFM,cADE;MAEF3V,OAAO,EAAE+V,cAFP;MAGFzV,UAHE;MAIFkP;IAJE,IAKA,MAAMwG,aAAa,CACrBX,OADqB,EAErBhc,QAFqB,EAGrB2G,OAHqB,EAIrBiP,QAAQ,CAACE,MAJY,EAKrB8F,iBALqB,EAMrBnC,IAAI,IAAIA,IAAI,CAACuB,UANQ,EAOrBvB,IAAI,IAAIA,IAAI,CAACmD,iBAPQ,EAQrBnD,IAAI,IAAIA,IAAI,CAACnY,OARQ,EASrBmY,IAAI,IAAIA,IAAI,CAACN,gBAALM,KAA0B,IATb,EAUrBO,SAVqB,EAWrBkC,mBAXqB,CALvB;;IAmBA,IAAII,cAAJ,EAAoB;MAClB;IACD,CAhKA,CAkKD;IACA;IACA;;;IACAlF,2BAA2B,GAAG,IAA9BA;IAEA6C,kBAAkB,CAACja,QAAD,EAASqE;MACzBsC,OAAO,EAAE+V,cAAc,IAAI/V;IADF,GAEtBkW,sBAAsB,CAACX,mBAAD,CAFA,EAEqB;MAC9CjV,UAD8C;MAE9CkP;IAF8C,CAFrB,CAAT,CAAlB8D;EAMF,CA95B2C,CAg6B3C;EACA;;;EACA,eAAeoC,YAAf,CACEL,OADF,EAEEhc,QAFF,EAGEgb,UAHF,EAIErU,OAJF,EAKEmW,UALF,EAMErD,IANF,EAMuD;IAAA,IAArDA,eAAqD,EAArDA;MAAAA,OAAmD,EAAnDA;IAAqD;;IAErD8B,oBAAoB,GAFiC,CAIrD;;IACA,IAAI9E,UAAU,GAAGsG,uBAAuB,CAAC/c,QAAD,EAAWgb,UAAX,CAAxC;IACAlC,WAAW,CAAC;MAAErC;IAAF,CAAD,EAAiB;MAAEuD,SAAS,EAAEP,IAAI,CAACO,SAALP,KAAmB;IAAhC,CAAjB,CAAXX;;IAEA,IAAIgE,UAAJ,EAAgB;MACd,IAAIE,cAAc,GAAG,MAAMC,cAAc,CACvCtW,OADuC,EAEvC3G,QAAQ,CAACE,QAF8B,EAGvC8b,OAAO,CAACpM,MAH+B,CAAzC;;MAKA,IAAIoN,cAAc,CAAClO,IAAfkO,KAAwB,SAA5B,EAAuC;QACrC,OAAO;UAAEV,cAAc,EAAE;QAAlB,CAAP;MACD,CAFD,MAEO,IAAIU,cAAc,CAAClO,IAAfkO,KAAwB,OAA5B,EAAqC;QAC1C,IAAI;UAAEE,UAAF;UAAczY;QAAd,IAAwB0Y,wBAAwB,CAClDnd,QAAQ,CAACE,QADyC,EAElD8c,cAFkD,CAApD;QAIA,OAAO;UACLrW,OAAO,EAAEqW,cAAc,CAACI,cADnB;UAELlB,mBAAmB,EAAE,CACnBgB,UADmB,EAEnB;YACEpO,IAAI,EAAE7J,UAAU,CAACR,KADnB;YAEEA;UAFF,CAFmB;QAFhB,CAAP;MAUD,CAfM,MAeA,IAAI,CAACuY,cAAc,CAACrW,OAApB,EAA6B;QAClC,IAAI;UAAEkV,eAAF;UAAmBpX,KAAnB;UAA0BY;QAA1B,IAAoCyW,qBAAqB,CAC3D9b,QAAQ,CAACE,QADkD,CAA7D;QAGA,OAAO;UACLyG,OAAO,EAAEkV,eADJ;UAELK,mBAAmB,EAAE,CACnB7W,KAAK,CAACQ,EADa,EAEnB;YACEiJ,IAAI,EAAE7J,UAAU,CAACR,KADnB;YAEEA;UAFF,CAFmB;QAFhB,CAAP;MAUD,CAdM,MAcA;QACLkC,OAAO,GAAGqW,cAAc,CAACrW,OAAzBA;MACD;IACF,CAhDoD,CAkDrD;;;IACA,IAAIkC,MAAJ;IACA,IAAIwU,WAAW,GAAGC,cAAc,CAAC3W,OAAD,EAAU3G,QAAV,CAAhC;;IAEA,IAAI,CAACqd,WAAW,CAAChY,KAAZgY,CAAkB/d,MAAnB,IAA6B,CAAC+d,WAAW,CAAChY,KAAZgY,CAAkBpH,IAApD,EAA0D;MACxDpN,MAAM,GAAG;QACPiG,IAAI,EAAE7J,UAAU,CAACR,KADV;QAEPA,KAAK,EAAEiR,sBAAsB,CAAC,GAAD,EAAM;UACjC6H,MAAM,EAAEvB,OAAO,CAACuB,MADiB;UAEjCrd,QAAQ,EAAEF,QAAQ,CAACE,QAFc;UAGjCqc,OAAO,EAAEc,WAAW,CAAChY,KAAZgY,CAAkBxX;QAHM,CAAN;MAFtB,CAATgD;IAQD,CATD,MASO;MACL,IAAI2U,OAAO,GAAG,MAAMC,gBAAgB,CAClC,QADkC,EAElCve,KAFkC,EAGlC8c,OAHkC,EAIlC,CAACqB,WAAD,CAJkC,EAKlC1W,OALkC,EAMlC,IANkC,CAApC;MAQAkC,MAAM,GAAG2U,OAAO,CAACH,WAAW,CAAChY,KAAZgY,CAAkBxX,EAAnB,CAAhBgD;;MAEA,IAAImT,OAAO,CAACpM,MAARoM,CAAetL,OAAnB,EAA4B;QAC1B,OAAO;UAAE4L,cAAc,EAAE;QAAlB,CAAP;MACD;IACF;;IAED,IAAIoB,gBAAgB,CAAC7U,MAAD,CAApB,EAA8B;MAC5B,IAAIvH,OAAJ;;MACA,IAAImY,IAAI,IAAIA,IAAI,CAACnY,OAALmY,IAAgB,IAA5B,EAAkC;QAChCnY,OAAO,GAAGmY,IAAI,CAACnY,OAAfA;MACD,CAFD,MAEO;QACL;QACA;QACA;QACA,IAAItB,QAAQ,GAAG2d,yBAAyB,CACtC9U,MAAM,CAACsJ,QAAPtJ,CAAgB0F,OAAhB1F,CAAwB4H,GAAxB5H,CAA4B,UAA5BA,CADsC,EAEtC,IAAIlI,GAAJ,CAAQqb,OAAO,CAACrZ,GAAhB,CAFsC,EAGtCyD,QAHsC,CAAxC;QAKA9E,OAAO,GAAGtB,QAAQ,KAAKd,KAAK,CAACc,QAANd,CAAegB,QAAfhB,GAA0BA,KAAK,CAACc,QAANd,CAAe6B,MAAhEO;MACD;;MACD,MAAMsc,uBAAuB,CAAC5B,OAAD,EAAUnT,MAAV,EAAkB,IAAlB,EAAwB;QACnDmS,UADmD;QAEnD1Z;MAFmD,CAAxB,CAA7B;MAIA,OAAO;QAAEgb,cAAc,EAAE;MAAlB,CAAP;IACD;;IAED,IAAIuB,gBAAgB,CAAChV,MAAD,CAApB,EAA8B;MAC5B,MAAM6M,sBAAsB,CAAC,GAAD,EAAM;QAAE5G,IAAI,EAAE;MAAR,CAAN,CAA5B;IACD;;IAED,IAAI0N,aAAa,CAAC3T,MAAD,CAAjB,EAA2B;MACzB;MACA;MACA,IAAIiV,aAAa,GAAG3B,mBAAmB,CAACxV,OAAD,EAAU0W,WAAW,CAAChY,KAAZgY,CAAkBxX,EAA5B,CAAvC,CAHyB,CAKzB;MACA;MACA;MACA;MACA;;MACA,IAAI,CAAC4T,IAAI,IAAIA,IAAI,CAACnY,OAAd,MAA2B,IAA/B,EAAqC;QACnC2V,aAAa,GAAGC,MAAa,CAAChW,IAA9B+V;MACD;;MAED,OAAO;QACLtQ,OADK;QAELuV,mBAAmB,EAAE,CAAC4B,aAAa,CAACzY,KAAdyY,CAAoBjY,EAArB,EAAyBgD,MAAzB;MAFhB,CAAP;IAID;;IAED,OAAO;MACLlC,OADK;MAELuV,mBAAmB,EAAE,CAACmB,WAAW,CAAChY,KAAZgY,CAAkBxX,EAAnB,EAAuBgD,MAAvB;IAFhB,CAAP;EAIF,CAziC2C,CA2iC3C;EACA;;;EACA,eAAe8T,aAAf,CACEX,OADF,EAEEhc,QAFF,EAGE2G,OAHF,EAIEmW,UAJF,EAKErB,kBALF,EAMET,UANF,EAOE4B,iBAPF,EAQEtb,OARF,EASE6X,gBATF,EAUEa,SAVF,EAWEkC,mBAXF,EAW2C;IAEzC;IACA,IAAIN,iBAAiB,GACnBH,kBAAkB,IAAIgB,oBAAoB,CAACzc,QAAD,EAAWgb,UAAX,CAD5C,CAHyC,CAMzC;IACA;;IACA,IAAI+C,gBAAgB,GAClB/C,UAAU,IACV4B,iBADA5B,IAEAgD,2BAA2B,CAACpC,iBAAD,CAH7B,CARyC,CAazC;IACA;IACA;IACA;IACA;IACA;;IACA,IAAIqC,2BAA2B,GAC7B,CAACzG,2BAAD,KACC,CAAC9C,MAAM,CAACG,mBAAR,IAA+B,CAACsE,gBADjC,CADF,CAnByC,CAuBzC;IACA;IACA;IACA;IACA;;IACA,IAAI2D,UAAJ,EAAgB;MACd,IAAImB,2BAAJ,EAAiC;QAC/B,IAAIpH,UAAU,GAAGqH,oBAAoB,CAAChC,mBAAD,CAArC;QACApD,WAAW;UAEPrC,UAAU,EAAEmF;QAFL,GAGH/E,UAAU,KAAK1X,SAAf0X,GAA2B;UAAEA;QAAF,CAA3BA,GAA4C,EAHzC,GAKT;UACEmD;QADF,CALS,CAAXlB;MASD;;MAED,IAAIkE,cAAc,GAAG,MAAMC,cAAc,CACvCtW,OADuC,EAEvC3G,QAAQ,CAACE,QAF8B,EAGvC8b,OAAO,CAACpM,MAH+B,CAAzC;;MAMA,IAAIoN,cAAc,CAAClO,IAAfkO,KAAwB,SAA5B,EAAuC;QACrC,OAAO;UAAEV,cAAc,EAAE;QAAlB,CAAP;MACD,CAFD,MAEO,IAAIU,cAAc,CAAClO,IAAfkO,KAAwB,OAA5B,EAAqC;QAC1C,IAAI;UAAEE,UAAF;UAAczY;QAAd,IAAwB0Y,wBAAwB,CAClDnd,QAAQ,CAACE,QADyC,EAElD8c,cAFkD,CAApD;QAIA,OAAO;UACLrW,OAAO,EAAEqW,cAAc,CAACI,cADnB;UAELnW,UAAU,EAAE,EAFP;UAGLkP,MAAM,EAAE;YACN,CAAC+G,UAAD,GAAczY;UADR;QAHH,CAAP;MAOD,CAZM,MAYA,IAAI,CAACuY,cAAc,CAACrW,OAApB,EAA6B;QAClC,IAAI;UAAElC,KAAF;UAASoX,eAAT;UAA0BxW;QAA1B,IAAoCyW,qBAAqB,CAC3D9b,QAAQ,CAACE,QADkD,CAA7D;QAGA,OAAO;UACLyG,OAAO,EAAEkV,eADJ;UAEL5U,UAAU,EAAE,EAFP;UAGLkP,MAAM,EAAE;YACN,CAAC9Q,KAAK,CAACQ,EAAP,GAAYpB;UADN;QAHH,CAAP;MAOD,CAXM,MAWA;QACLkC,OAAO,GAAGqW,cAAc,CAACrW,OAAzBA;MACD;IACF;;IAED,IAAIgV,WAAW,GAAGvH,kBAAkB,IAAID,UAAxC;IACA,IAAI,CAACgK,aAAD,EAAgBC,oBAAhB,IAAwCC,gBAAgB,CAC1DjQ,IAAI,CAAC3N,OADqD,EAE1DvB,KAF0D,EAG1DyH,OAH0D,EAI1DoX,gBAJ0D,EAK1D/d,QAL0D,EAM1D0U,MAAM,CAACG,mBAAPH,IAA8ByE,gBAAgB,KAAK,IANO,EAO1DzE,MAAM,CAACK,8BAPmD,EAQ1D0C,sBAR0D,EAS1DC,uBAT0D,EAU1DC,qBAV0D,EAW1DQ,eAX0D,EAY1DF,gBAZ0D,EAa1DD,gBAb0D,EAc1D2D,WAd0D,EAe1DvV,QAf0D,EAgB1D8V,mBAhB0D,CAA5D,CA/EyC,CAkGzC;IACA;IACA;;IACAoC,qBAAqB,CAClB/B,OAAO,IACN,EAAE5V,OAAO,IAAIA,OAAO,CAACiD,IAARjD,CAAcqP,CAAC,IAAKA,CAAC,CAAC3Q,KAAF2Q,CAAQnQ,EAARmQ,KAAeuG,OAAnC5V,CAAb,KACCwX,aAAa,IAAIA,aAAa,CAACvU,IAAduU,CAAoBnI,CAAC,IAAKA,CAAC,CAAC3Q,KAAF2Q,CAAQnQ,EAARmQ,KAAeuG,OAAzC4B,CAHD,CAArBG;IAMAxG,uBAAuB,GAAG,EAAED,kBAA5BC,CA3GyC,CA6GzC;;IACA,IAAIqG,aAAa,CAAC9e,MAAd8e,KAAyB,CAAzBA,IAA8BC,oBAAoB,CAAC/e,MAArB+e,KAAgC,CAAlE,EAAqE;MACnE,IAAIG,eAAe,GAAGC,sBAAsB,EAA5C;MACAvE,kBAAkB,CAChBja,QADgB,EACRqE;QAENsC,OAFM;QAGNM,UAAU,EAAE,EAHN;QAIN;QACAkP,MAAM,EACJ+F,mBAAmB,IAAIM,aAAa,CAACN,mBAAmB,CAAC,CAAD,CAApB,CAApCA,GACI;UAAE,CAACA,mBAAmB,CAAC,CAAD,CAApB,GAA0BA,mBAAmB,CAAC,CAAD,CAAnBA,CAAuBzX;QAAnD,CADJyX,GAEI;MARA,GASHW,sBAAsB,CAACX,mBAAD,CATnB,EAUFqC,eAAe,GAAG;QAAEzH,QAAQ,EAAE,IAAIC,GAAJ,CAAQ7X,KAAK,CAAC4X,QAAd;MAAZ,CAAH,GAA2C,EAVxD,CADQ,EAahB;QAAEkD;MAAF,CAbgB,CAAlBC;MAeA,OAAO;QAAEqC,cAAc,EAAE;MAAlB,CAAP;IACD;;IAED,IAAI2B,2BAAJ,EAAiC;MAC/B,IAAIQ,OAAO,GAAyB,EAApC;;MACA,IAAI,CAAC3B,UAAL,EAAiB;QACf;QACA2B,OAAO,CAAChI,UAARgI,GAAqB7C,iBAArB6C;QACA,IAAI5H,UAAU,GAAGqH,oBAAoB,CAAChC,mBAAD,CAArC;;QACA,IAAIrF,UAAU,KAAK1X,SAAnB,EAA8B;UAC5Bsf,OAAO,CAAC5H,UAAR4H,GAAqB5H,UAArB4H;QACD;MACF;;MACD,IAAIL,oBAAoB,CAAC/e,MAArB+e,GAA8B,CAAlC,EAAqC;QACnCK,OAAO,CAAC3H,QAAR2H,GAAmBC,8BAA8B,CAACN,oBAAD,CAAjDK;MACD;;MACD3F,WAAW,CAAC2F,OAAD,EAAU;QAAEzE;MAAF,CAAV,CAAXlB;IACD;;IAEDsF,oBAAoB,CAACpW,OAArBoW,CAA8BO,EAAE,IAAI;MAClC,IAAI/G,gBAAgB,CAACnJ,GAAjBmJ,CAAqB+G,EAAE,CAAC5e,GAAxB6X,CAAJ,EAAkC;QAChCgH,YAAY,CAACD,EAAE,CAAC5e,GAAJ,CAAZ6e;MACD;;MACD,IAAID,EAAE,CAACnP,UAAP,EAAmB;QACjB;QACA;QACA;QACAoI,gBAAgB,CAAClJ,GAAjBkJ,CAAqB+G,EAAE,CAAC5e,GAAxB6X,EAA6B+G,EAAE,CAACnP,UAAhCoI;MACD;IACF,CAVDwG,EAlJyC,CA8JzC;;IACA,IAAIS,8BAA8B,GAAGA,MACnCT,oBAAoB,CAACpW,OAArBoW,CAA8BU,CAAC,IAAKF,YAAY,CAACE,CAAC,CAAC/e,GAAH,CAAhDqe,CADF;;IAEA,IAAIhH,2BAAJ,EAAiC;MAC/BA,2BAA2B,CAACxH,MAA5BwH,CAAmCrS,gBAAnCqS,CACE,OADFA,EAEEyH,8BAFFzH;IAID;;IAED,IAAI;MAAE2H,aAAF;MAAiBC;IAAjB,IACF,MAAMC,8BAA8B,CAClC/f,KADkC,EAElCyH,OAFkC,EAGlCwX,aAHkC,EAIlCC,oBAJkC,EAKlCpC,OALkC,CADtC;;IASA,IAAIA,OAAO,CAACpM,MAARoM,CAAetL,OAAnB,EAA4B;MAC1B,OAAO;QAAE4L,cAAc,EAAE;MAAlB,CAAP;IACD,CAnLwC,CAqLzC;IACA;IACA;;;IACA,IAAIlF,2BAAJ,EAAiC;MAC/BA,2BAA2B,CAACxH,MAA5BwH,CAAmCpS,mBAAnCoS,CACE,OADFA,EAEEyH,8BAFFzH;IAID;;IACDgH,oBAAoB,CAACpW,OAArBoW,CAA8BO,EAAE,IAAK/G,gBAAgB,CAACjH,MAAjBiH,CAAwB+G,EAAE,CAAC5e,GAA3B6X,CAArCwG,EA9LyC,CAgMzC;;IACA,IAAInM,QAAQ,GAAGiN,YAAY,CAACH,aAAD,CAA3B;;IACA,IAAI9M,QAAJ,EAAc;MACZ,MAAM2L,uBAAuB,CAAC5B,OAAD,EAAU/J,QAAQ,CAACpJ,MAAnB,EAA2B,IAA3B,EAAiC;QAC5DvH;MAD4D,CAAjC,CAA7B;MAGA,OAAO;QAAEgb,cAAc,EAAE;MAAlB,CAAP;IACD;;IAEDrK,QAAQ,GAAGiN,YAAY,CAACF,cAAD,CAAvB/M;;IACA,IAAIA,QAAJ,EAAc;MACZ;MACA;MACA;MACA+F,gBAAgB,CAAC9H,GAAjB8H,CAAqB/F,QAAQ,CAAClS,GAA9BiY;MACA,MAAM4F,uBAAuB,CAAC5B,OAAD,EAAU/J,QAAQ,CAACpJ,MAAnB,EAA2B,IAA3B,EAAiC;QAC5DvH;MAD4D,CAAjC,CAA7B;MAGA,OAAO;QAAEgb,cAAc,EAAE;MAAlB,CAAP;IACD,CAnNwC,CAqNzC;;;IACA,IAAI;MAAErV,UAAF;MAAckP;IAAd,IAAyBgJ,iBAAiB,CAC5CjgB,KAD4C,EAE5CyH,OAF4C,EAG5CwX,aAH4C,EAI5CY,aAJ4C,EAK5C7C,mBAL4C,EAM5CkC,oBAN4C,EAO5CY,cAP4C,EAQ5C5G,eAR4C,CAA9C,CAtNyC,CAiOzC;;IACAA,eAAe,CAACpQ,OAAhBoQ,CAAwB,CAACgH,YAAD,EAAe7C,OAAf,KAA0B;MAChD6C,YAAY,CAACnO,SAAbmO,CAAwB1O,OAAO,IAAI;QACjC;QACA;QACA;QACA,IAAIA,OAAO,IAAI0O,YAAY,CAACpP,IAA5B,EAAkC;UAChCoI,eAAe,CAACzH,MAAhByH,CAAuBmE,OAAvBnE;QACD;MACF,CAPDgH;IAQD,CATDhH,EAlOyC,CA6OzC;;IACA,IAAI1D,MAAM,CAACG,mBAAPH,IAA8ByE,gBAA9BzE,IAAkDxV,KAAK,CAACiX,MAA5D,EAAoE;MAClE1L,MAAM,CAAC5L,OAAP4L,CAAevL,KAAK,CAACiX,MAArB1L,EACGZ,MADHY,CACUqF;QAAA,IAAC,CAACjK,EAAD,IAAIiK,KAAL;QAAK,OAAK,CAACqO,aAAa,CAACvU,IAAduU,CAAoBnI,CAAC,IAAKA,CAAC,CAAC3Q,KAAF2Q,CAAQnQ,EAARmQ,KAAenQ,EAAzCsY,CAAN;MAAkD,CADjE1T,EAEGzC,OAFHyC,CAEWgH,SAAqB;QAAA,IAApB,CAAC8K,OAAD,EAAU9X,KAAV,IAAgBgN,KAAI;QAC5B0E,MAAM,GAAG1L,MAAM,CAAC7F,MAAP6F,CAAc0L,MAAM,IAAI,EAAxB1L,EAA4B;UAAE,CAAC8R,OAAD,GAAW9X;QAAb,CAA5BgG,CAAT0L;MACD,CAJH1L;IAKD;;IAED,IAAI8T,eAAe,GAAGC,sBAAsB,EAA5C;IACA,IAAIa,kBAAkB,GAAGC,oBAAoB,CAACxH,uBAAD,CAA7C;IACA,IAAIyH,oBAAoB,GACtBhB,eAAe,IAAIc,kBAAnBd,IAAyCH,oBAAoB,CAAC/e,MAArB+e,GAA8B,CADzE;IAGA;MACEzX,OADF;MAEEM,UAFF;MAGEkP;IAHF,GAIMoJ,oBAAoB,GAAG;MAAEzI,QAAQ,EAAE,IAAIC,GAAJ,CAAQ7X,KAAK,CAAC4X,QAAd;IAAZ,CAAH,GAA2C,EAJrE;EAMF;;EAEA,SAASoH,oBAAT,CACEhC,mBADF,EACsD;IAEpD,IAAIA,mBAAmB,IAAI,CAACM,aAAa,CAACN,mBAAmB,CAAC,CAAD,CAApB,CAAzC,EAAmE;MACjE;MACA;MACA;MACA,OAAO;QACL,CAACA,mBAAmB,CAAC,CAAD,CAApB,GAA0BA,mBAAmB,CAAC,CAAD,CAAnBA,CAAuB/U;MAD5C,CAAP;IAGD,CAPD,MAOO,IAAIjI,KAAK,CAAC2X,UAAV,EAAsB;MAC3B,IAAIpM,MAAM,CAAC6P,IAAP7P,CAAYvL,KAAK,CAAC2X,UAAlBpM,EAA8BpL,MAA9BoL,KAAyC,CAA7C,EAAgD;QAC9C,OAAO,IAAP;MACD,CAFD,MAEO;QACL,OAAOvL,KAAK,CAAC2X,UAAb;MACD;IACF;EACH;;EAEA,SAAS6H,8BAAT,CACEN,oBADF,EAC6C;IAE3CA,oBAAoB,CAACpW,OAArBoW,CAA8BO,EAAE,IAAI;MAClC,IAAI/E,OAAO,GAAG1a,KAAK,CAAC4X,QAAN5X,CAAeuR,GAAfvR,CAAmByf,EAAE,CAAC5e,GAAtBb,CAAd;MACA,IAAIsgB,mBAAmB,GAAGC,iBAAiB,CACzCtgB,SADyC,EAEzCya,OAAO,GAAGA,OAAO,CAACzS,IAAX,GAAkBhI,SAFgB,CAA3C;MAIAD,KAAK,CAAC4X,QAAN5X,CAAewP,GAAfxP,CAAmByf,EAAE,CAAC5e,GAAtBb,EAA2BsgB,mBAA3BtgB;IACD,CAPDkf;IAQA,OAAO,IAAIrH,GAAJ,CAAQ7X,KAAK,CAAC4X,QAAd,CAAP;EACF,CA11C2C,CA41C3C;;;EACA,SAAS4I,KAAT,CACE3f,GADF,EAEEwc,OAFF,EAGE9Z,IAHF,EAIEgX,IAJF,EAI2B;IAEzB,IAAIxF,QAAJ,EAAc;MACZ,MAAM,IAAI/Q,KAAJ,CACJ,8EACE,8EADF,GAEE,6CAHE,CAAN;IAKD;;IAED,IAAI0U,gBAAgB,CAACnJ,GAAjBmJ,CAAqB7X,GAArB6X,CAAJ,EAA+BgH,YAAY,CAAC7e,GAAD,CAAZ6e;IAC/B,IAAI5E,SAAS,GAAG,CAACP,IAAI,IAAIA,IAAI,CAACM,kBAAd,MAAsC,IAAtD;IAEA,IAAI4B,WAAW,GAAGvH,kBAAkB,IAAID,UAAxC;IACA,IAAIyG,cAAc,GAAGC,WAAW,CAC9B3b,KAAK,CAACc,QADwB,EAE9Bd,KAAK,CAACyH,OAFwB,EAG9BP,QAH8B,EAI9BsO,MAAM,CAACI,kBAJuB,EAK9BrS,IAL8B,EAM9BiS,MAAM,CAACvH,oBANuB,EAO9BoP,OAP8B,EAQ9B9C,IAAI,QAAJA,GAAI,MAAJA,OAAI,CAAEsB,QARwB,CAAhC;IAUA,IAAIpU,OAAO,GAAGT,WAAW,CAACyV,WAAD,EAAcf,cAAd,EAA8BxU,QAA9B,CAAzB;IAEA,IAAIwP,QAAQ,GAAGC,aAAa,CAAClP,OAAD,EAAUgV,WAAV,EAAuBf,cAAvB,CAA5B;;IACA,IAAIhF,QAAQ,CAACE,MAATF,IAAmBA,QAAQ,CAACjP,OAAhC,EAAyC;MACvCA,OAAO,GAAGiP,QAAQ,CAACjP,OAAnBA;IACD;;IAED,IAAI,CAACA,OAAL,EAAc;MACZgZ,eAAe,CACb5f,GADa,EAEbwc,OAFa,EAGb7G,sBAAsB,CAAC,GAAD,EAAM;QAAExV,QAAQ,EAAE0a;MAAZ,CAAN,CAHT,EAIb;QAAEZ;MAAF,CAJa,CAAf2F;MAMA;IACD;;IAED,IAAI;MAAE9e,IAAF;MAAQma,UAAR;MAAoBvW;IAApB,IAA8BwW,wBAAwB,CACxDvG,MAAM,CAACE,sBADiD,EAExD,IAFwD,EAGxDgG,cAHwD,EAIxDnB,IAJwD,CAA1D;;IAOA,IAAIhV,KAAJ,EAAW;MACTkb,eAAe,CAAC5f,GAAD,EAAMwc,OAAN,EAAe9X,KAAf,EAAsB;QAAEuV;MAAF,CAAtB,CAAf2F;MACA;IACD;;IAED,IAAI3Y,KAAK,GAAGsW,cAAc,CAAC3W,OAAD,EAAU9F,IAAV,CAA1B;IAEAsW,yBAAyB,GAAG,CAACsC,IAAI,IAAIA,IAAI,CAAC9C,kBAAd,MAAsC,IAAlEQ;;IAEA,IAAI6D,UAAU,IAAIZ,gBAAgB,CAACY,UAAU,CAACjI,UAAZ,CAAlC,EAA2D;MACzD6M,mBAAmB,CACjB7f,GADiB,EAEjBwc,OAFiB,EAGjB1b,IAHiB,EAIjBmG,KAJiB,EAKjBL,OALiB,EAMjBiP,QAAQ,CAACE,MANQ,EAOjBkE,SAPiB,EAQjBgB,UARiB,CAAnB4E;MAUA;IACD,CArEwB,CAuEzB;IACA;;;IACA3H,gBAAgB,CAACvJ,GAAjBuJ,CAAqBlY,GAArBkY,EAA0B;MAAEsE,OAAF;MAAW1b;IAAX,CAA1BoX;IACA4H,mBAAmB,CACjB9f,GADiB,EAEjBwc,OAFiB,EAGjB1b,IAHiB,EAIjBmG,KAJiB,EAKjBL,OALiB,EAMjBiP,QAAQ,CAACE,MANQ,EAOjBkE,SAPiB,EAQjBgB,UARiB,CAAnB6E;EAUF,CAr7C2C,CAu7C3C;EACA;;;EACA,eAAeD,mBAAf,CACE7f,GADF,EAEEwc,OAFF,EAGE1b,IAHF,EAIEmG,KAJF,EAKE8Y,cALF,EAMEhD,UANF,EAOE9C,SAPF,EAQEgB,UARF,EAQwB;IAEtBO,oBAAoB;IACpBtD,gBAAgB,CAACtH,MAAjBsH,CAAwBlY,GAAxBkY;;IAEA,SAAS8H,uBAAT,CAAiC/J,CAAjC,EAA0D;MACxD,IAAI,CAACA,CAAC,CAAC3Q,KAAF2Q,CAAQ1W,MAAT,IAAmB,CAAC0W,CAAC,CAAC3Q,KAAF2Q,CAAQC,IAAhC,EAAsC;QACpC,IAAIxR,KAAK,GAAGiR,sBAAsB,CAAC,GAAD,EAAM;UACtC6H,MAAM,EAAEvC,UAAU,CAACjI,UADmB;UAEtC7S,QAAQ,EAAEW,IAF4B;UAGtC0b,OAAO,EAAEA;QAH6B,CAAN,CAAlC;QAKAoD,eAAe,CAAC5f,GAAD,EAAMwc,OAAN,EAAe9X,KAAf,EAAsB;UAAEuV;QAAF,CAAtB,CAAf2F;QACA,OAAO,IAAP;MACD;;MACD,OAAO,KAAP;IACF;;IAEA,IAAI,CAAC7C,UAAD,IAAeiD,uBAAuB,CAAC/Y,KAAD,CAA1C,EAAmD;MACjD;IACD,CApBqB,CAsBtB;;;IACA,IAAIgZ,eAAe,GAAG9gB,KAAK,CAAC4X,QAAN5X,CAAeuR,GAAfvR,CAAmBa,GAAnBb,CAAtB;IACA+gB,kBAAkB,CAAClgB,GAAD,EAAMmgB,oBAAoB,CAAClF,UAAD,EAAagF,eAAb,CAA1B,EAAyD;MACzEhG;IADyE,CAAzD,CAAlBiG;IAIA,IAAIE,eAAe,GAAG,IAAI1Q,eAAJ,EAAtB;IACA,IAAI2Q,YAAY,GAAGnE,uBAAuB,CACxC7N,IAAI,CAAC3N,OADmC,EAExCI,IAFwC,EAGxCsf,eAAe,CAACvQ,MAHwB,EAIxCoL,UAJwC,CAA1C;;IAOA,IAAI8B,UAAJ,EAAgB;MACd,IAAIE,cAAc,GAAG,MAAMC,cAAc,CACvC6C,cADuC,EAEvCjf,IAFuC,EAGvCuf,YAAY,CAACxQ,MAH0B,CAAzC;;MAMA,IAAIoN,cAAc,CAAClO,IAAfkO,KAAwB,SAA5B,EAAuC;QACrC;MACD,CAFD,MAEO,IAAIA,cAAc,CAAClO,IAAfkO,KAAwB,OAA5B,EAAqC;QAC1C,IAAI;UAAEvY;QAAF,IAAY0Y,wBAAwB,CAACtc,IAAD,EAAOmc,cAAP,CAAxC;QACA2C,eAAe,CAAC5f,GAAD,EAAMwc,OAAN,EAAe9X,KAAf,EAAsB;UAAEuV;QAAF,CAAtB,CAAf2F;QACA;MACD,CAJM,MAIA,IAAI,CAAC3C,cAAc,CAACrW,OAApB,EAA6B;QAClCgZ,eAAe,CACb5f,GADa,EAEbwc,OAFa,EAGb7G,sBAAsB,CAAC,GAAD,EAAM;UAAExV,QAAQ,EAAEW;QAAZ,CAAN,CAHT,EAIb;UAAEmZ;QAAF,CAJa,CAAf2F;QAMA;MACD,CARM,MAQA;QACLG,cAAc,GAAG9C,cAAc,CAACrW,OAAhCmZ;QACA9Y,KAAK,GAAGsW,cAAc,CAACwC,cAAD,EAAiBjf,IAAjB,CAAtBmG;;QAEA,IAAI+Y,uBAAuB,CAAC/Y,KAAD,CAA3B,EAAoC;UAClC;QACD;MACF;IACF,CAjEqB,CAmEtB;;;IACA4Q,gBAAgB,CAAClJ,GAAjBkJ,CAAqB7X,GAArB6X,EAA0BuI,eAA1BvI;IAEA,IAAIyI,iBAAiB,GAAGxI,kBAAxB;IACA,IAAIyI,aAAa,GAAG,MAAM7C,gBAAgB,CACxC,QADwC,EAExCve,KAFwC,EAGxCkhB,YAHwC,EAIxC,CAACpZ,KAAD,CAJwC,EAKxC8Y,cALwC,EAMxC/f,GANwC,CAA1C;IAQA,IAAIqc,YAAY,GAAGkE,aAAa,CAACtZ,KAAK,CAAC3B,KAAN2B,CAAYnB,EAAb,CAAhC;;IAEA,IAAIua,YAAY,CAACxQ,MAAbwQ,CAAoB1P,OAAxB,EAAiC;MAC/B;MACA;MACA,IAAIkH,gBAAgB,CAACnH,GAAjBmH,CAAqB7X,GAArB6X,MAA8BuI,eAAlC,EAAmD;QACjDvI,gBAAgB,CAACjH,MAAjBiH,CAAwB7X,GAAxB6X;MACD;;MACD;IACD,CAxFqB,CA0FtB;IACA;IACA;;;IACA,IAAIlD,MAAM,CAACC,iBAAPD,IAA4ByD,eAAe,CAAC1J,GAAhB0J,CAAoBpY,GAApBoY,CAAhC,EAA0D;MACxD,IAAIuF,gBAAgB,CAACtB,YAAD,CAAhBsB,IAAkClB,aAAa,CAACJ,YAAD,CAAnD,EAAmE;QACjE6D,kBAAkB,CAAClgB,GAAD,EAAMwgB,cAAc,CAACphB,SAAD,CAApB,CAAlB8gB;QACA;MACD,CAJuD,CAKxD;;IACD,CAND,MAMO;MACL,IAAIvC,gBAAgB,CAACtB,YAAD,CAApB,EAAoC;QAClCxE,gBAAgB,CAACjH,MAAjBiH,CAAwB7X,GAAxB6X;;QACA,IAAIE,uBAAuB,GAAGuI,iBAA9B,EAAiD;UAC/C;UACA;UACA;UACA;UACAJ,kBAAkB,CAAClgB,GAAD,EAAMwgB,cAAc,CAACphB,SAAD,CAApB,CAAlB8gB;UACA;QACD,CAPD,MAOO;UACLjI,gBAAgB,CAAC9H,GAAjB8H,CAAqBjY,GAArBiY;UACAiI,kBAAkB,CAAClgB,GAAD,EAAM0f,iBAAiB,CAACzE,UAAD,CAAvB,CAAlBiF;UACA,OAAOrC,uBAAuB,CAACwC,YAAD,EAAehE,YAAf,EAA6B,KAA7B,EAAoC;YAChEQ,iBAAiB,EAAE5B;UAD6C,CAApC,CAA9B;QAGD;MACF,CAjBI,CAmBL;;;MACA,IAAIwB,aAAa,CAACJ,YAAD,CAAjB,EAAiC;QAC/BuD,eAAe,CAAC5f,GAAD,EAAMwc,OAAN,EAAeH,YAAY,CAAC3X,KAA5B,CAAfkb;QACA;MACD;IACF;;IAED,IAAI9B,gBAAgB,CAACzB,YAAD,CAApB,EAAoC;MAClC,MAAM1G,sBAAsB,CAAC,GAAD,EAAM;QAAE5G,IAAI,EAAE;MAAR,CAAN,CAA5B;IACD,CA/HqB,CAiItB;IACA;;;IACA,IAAI3N,YAAY,GAAGjC,KAAK,CAACuX,UAANvX,CAAiBc,QAAjBd,IAA6BA,KAAK,CAACc,QAAtD;IACA,IAAIwgB,mBAAmB,GAAGvE,uBAAuB,CAC/C7N,IAAI,CAAC3N,OAD0C,EAE/CU,YAF+C,EAG/Cgf,eAAe,CAACvQ,MAH+B,CAAjD;IAKA,IAAI+L,WAAW,GAAGvH,kBAAkB,IAAID,UAAxC;IACA,IAAIxN,OAAO,GACTzH,KAAK,CAACuX,UAANvX,CAAiBA,KAAjBA,KAA2B,MAA3BA,GACIgH,WAAW,CAACyV,WAAD,EAAczc,KAAK,CAACuX,UAANvX,CAAiBc,QAA/B,EAAyCoG,QAAzC,CADflH,GAEIA,KAAK,CAACyH,OAHZ;IAKA7B,SAAS,CAAC6B,OAAD,EAAU,8CAAV,CAAT7B;IAEA,IAAI2b,MAAM,GAAG,EAAE5I,kBAAf;IACAE,cAAc,CAACrJ,GAAfqJ,CAAmBhY,GAAnBgY,EAAwB0I,MAAxB1I;IAEA,IAAI2I,WAAW,GAAGjB,iBAAiB,CAACzE,UAAD,EAAaoB,YAAY,CAACjV,IAA1B,CAAnC;IACAjI,KAAK,CAAC4X,QAAN5X,CAAewP,GAAfxP,CAAmBa,GAAnBb,EAAwBwhB,WAAxBxhB;IAEA,IAAI,CAACif,aAAD,EAAgBC,oBAAhB,IAAwCC,gBAAgB,CAC1DjQ,IAAI,CAAC3N,OADqD,EAE1DvB,KAF0D,EAG1DyH,OAH0D,EAI1DqU,UAJ0D,EAK1D7Z,YAL0D,EAM1D,KAN0D,EAO1DuT,MAAM,CAACK,8BAPmD,EAQ1D0C,sBAR0D,EAS1DC,uBAT0D,EAU1DC,qBAV0D,EAW1DQ,eAX0D,EAY1DF,gBAZ0D,EAa1DD,gBAb0D,EAc1D2D,WAd0D,EAe1DvV,QAf0D,EAgB1D,CAACY,KAAK,CAAC3B,KAAN2B,CAAYnB,EAAb,EAAiBuW,YAAjB,CAhB0D,CAA5D,CAvJsB,CA0KtB;IACA;IACA;;IACAgC,oBAAoB,CACjBvU,MADHuU,CACWO,EAAE,IAAKA,EAAE,CAAC5e,GAAH4e,KAAW5e,GAD7Bqe,EAEGpW,OAFHoW,CAEYO,EAAE,IAAI;MACd,IAAIgC,QAAQ,GAAGhC,EAAE,CAAC5e,GAAlB;MACA,IAAIigB,eAAe,GAAG9gB,KAAK,CAAC4X,QAAN5X,CAAeuR,GAAfvR,CAAmByhB,QAAnBzhB,CAAtB;MACA,IAAIsgB,mBAAmB,GAAGC,iBAAiB,CACzCtgB,SADyC,EAEzC6gB,eAAe,GAAGA,eAAe,CAAC7Y,IAAnB,GAA0BhI,SAFA,CAA3C;MAIAD,KAAK,CAAC4X,QAAN5X,CAAewP,GAAfxP,CAAmByhB,QAAnBzhB,EAA6BsgB,mBAA7BtgB;;MACA,IAAI0Y,gBAAgB,CAACnJ,GAAjBmJ,CAAqB+I,QAArB/I,CAAJ,EAAoC;QAClCgH,YAAY,CAAC+B,QAAD,CAAZ/B;MACD;;MACD,IAAID,EAAE,CAACnP,UAAP,EAAmB;QACjBoI,gBAAgB,CAAClJ,GAAjBkJ,CAAqB+I,QAArB/I,EAA+B+G,EAAE,CAACnP,UAAlCoI;MACD;IACF,CAhBHwG;IAkBAtF,WAAW,CAAC;MAAEhC,QAAQ,EAAE,IAAIC,GAAJ,CAAQ7X,KAAK,CAAC4X,QAAd;IAAZ,CAAD,CAAXgC;;IAEA,IAAI+F,8BAA8B,GAAGA,MACnCT,oBAAoB,CAACpW,OAArBoW,CAA8BO,EAAE,IAAKC,YAAY,CAACD,EAAE,CAAC5e,GAAJ,CAAjDqe,CADF;;IAGA+B,eAAe,CAACvQ,MAAhBuQ,CAAuBpb,gBAAvBob,CACE,OADFA,EAEEtB,8BAFFsB;IAKA,IAAI;MAAEpB,aAAF;MAAiBC;IAAjB,IACF,MAAMC,8BAA8B,CAClC/f,KADkC,EAElCyH,OAFkC,EAGlCwX,aAHkC,EAIlCC,oBAJkC,EAKlCoC,mBALkC,CADtC;;IASA,IAAIL,eAAe,CAACvQ,MAAhBuQ,CAAuBzP,OAA3B,EAAoC;MAClC;IACD;;IAEDyP,eAAe,CAACvQ,MAAhBuQ,CAAuBnb,mBAAvBmb,CACE,OADFA,EAEEtB,8BAFFsB;IAKApI,cAAc,CAACpH,MAAfoH,CAAsBhY,GAAtBgY;IACAH,gBAAgB,CAACjH,MAAjBiH,CAAwB7X,GAAxB6X;IACAwG,oBAAoB,CAACpW,OAArBoW,CAA8B7O,CAAC,IAAKqI,gBAAgB,CAACjH,MAAjBiH,CAAwBrI,CAAC,CAACxP,GAA1B6X,CAApCwG;IAEA,IAAInM,QAAQ,GAAGiN,YAAY,CAACH,aAAD,CAA3B;;IACA,IAAI9M,QAAJ,EAAc;MACZ,OAAO2L,uBAAuB,CAC5B4C,mBAD4B,EAE5BvO,QAAQ,CAACpJ,MAFmB,EAG5B,KAH4B,CAA9B;IAKD;;IAEDoJ,QAAQ,GAAGiN,YAAY,CAACF,cAAD,CAAvB/M;;IACA,IAAIA,QAAJ,EAAc;MACZ;MACA;MACA;MACA+F,gBAAgB,CAAC9H,GAAjB8H,CAAqB/F,QAAQ,CAAClS,GAA9BiY;MACA,OAAO4F,uBAAuB,CAC5B4C,mBAD4B,EAE5BvO,QAAQ,CAACpJ,MAFmB,EAG5B,KAH4B,CAA9B;IAKD,CAnPqB,CAqPtB;;;IACA,IAAI;MAAE5B,UAAF;MAAckP;IAAd,IAAyBgJ,iBAAiB,CAC5CjgB,KAD4C,EAE5CyH,OAF4C,EAG5CwX,aAH4C,EAI5CY,aAJ4C,EAK5C5f,SAL4C,EAM5Cif,oBAN4C,EAO5CY,cAP4C,EAQ5C5G,eAR4C,CAA9C,CAtPsB,CAiQtB;IACA;;IACA,IAAIlZ,KAAK,CAAC4X,QAAN5X,CAAeuP,GAAfvP,CAAmBa,GAAnBb,CAAJ,EAA6B;MAC3B,IAAI0hB,WAAW,GAAGL,cAAc,CAACnE,YAAY,CAACjV,IAAd,CAAhC;MACAjI,KAAK,CAAC4X,QAAN5X,CAAewP,GAAfxP,CAAmBa,GAAnBb,EAAwB0hB,WAAxB1hB;IACD;;IAEDogB,oBAAoB,CAACmB,MAAD,CAApBnB,CAxQsB,CA0QtB;IACA;IACA;;IACA,IACEpgB,KAAK,CAACuX,UAANvX,CAAiBA,KAAjBA,KAA2B,SAA3BA,IACAuhB,MAAM,GAAG3I,uBAFX,EAGE;MACAhT,SAAS,CAACmS,aAAD,EAAgB,yBAAhB,CAATnS;MACAsS,2BAA2B,IAAIA,2BAA2B,CAACjG,KAA5BiG,EAA/BA;MAEA6C,kBAAkB,CAAC/a,KAAK,CAACuX,UAANvX,CAAiBc,QAAlB,EAA4B;QAC5C2G,OAD4C;QAE5CM,UAF4C;QAG5CkP,MAH4C;QAI5CW,QAAQ,EAAE,IAAIC,GAAJ,CAAQ7X,KAAK,CAAC4X,QAAd;MAJkC,CAA5B,CAAlBmD;IAMD,CAbD,MAaO;MACL;MACA;MACA;MACAnB,WAAW,CAAC;QACV3C,MADU;QAEVlP,UAAU,EAAEsT,eAAe,CACzBrb,KAAK,CAAC+H,UADmB,EAEzBA,UAFyB,EAGzBN,OAHyB,EAIzBwP,MAJyB,CAFjB;QAQVW,QAAQ,EAAE,IAAIC,GAAJ,CAAQ7X,KAAK,CAAC4X,QAAd;MARA,CAAD,CAAXgC;MAUArB,sBAAsB,GAAG,KAAzBA;IACD;EACH,CA3uD2C,CA6uD3C;;;EACA,eAAeoI,mBAAf,CACE9f,GADF,EAEEwc,OAFF,EAGE1b,IAHF,EAIEmG,KAJF,EAKEL,OALF,EAMEmW,UANF,EAOE9C,SAPF,EAQEgB,UARF,EAQyB;IAEvB,IAAIgF,eAAe,GAAG9gB,KAAK,CAAC4X,QAAN5X,CAAeuR,GAAfvR,CAAmBa,GAAnBb,CAAtB;IACA+gB,kBAAkB,CAChBlgB,GADgB,EAEhB0f,iBAAiB,CACfzE,UADe,EAEfgF,eAAe,GAAGA,eAAe,CAAC7Y,IAAnB,GAA0BhI,SAF1B,CAFD,EAMhB;MAAE6a;IAAF,CANgB,CAAlBiG;IASA,IAAIE,eAAe,GAAG,IAAI1Q,eAAJ,EAAtB;IACA,IAAI2Q,YAAY,GAAGnE,uBAAuB,CACxC7N,IAAI,CAAC3N,OADmC,EAExCI,IAFwC,EAGxCsf,eAAe,CAACvQ,MAHwB,CAA1C;;IAMA,IAAIkN,UAAJ,EAAgB;MACd,IAAIE,cAAc,GAAG,MAAMC,cAAc,CACvCtW,OADuC,EAEvC9F,IAFuC,EAGvCuf,YAAY,CAACxQ,MAH0B,CAAzC;;MAMA,IAAIoN,cAAc,CAAClO,IAAfkO,KAAwB,SAA5B,EAAuC;QACrC;MACD,CAFD,MAEO,IAAIA,cAAc,CAAClO,IAAfkO,KAAwB,OAA5B,EAAqC;QAC1C,IAAI;UAAEvY;QAAF,IAAY0Y,wBAAwB,CAACtc,IAAD,EAAOmc,cAAP,CAAxC;QACA2C,eAAe,CAAC5f,GAAD,EAAMwc,OAAN,EAAe9X,KAAf,EAAsB;UAAEuV;QAAF,CAAtB,CAAf2F;QACA;MACD,CAJM,MAIA,IAAI,CAAC3C,cAAc,CAACrW,OAApB,EAA6B;QAClCgZ,eAAe,CACb5f,GADa,EAEbwc,OAFa,EAGb7G,sBAAsB,CAAC,GAAD,EAAM;UAAExV,QAAQ,EAAEW;QAAZ,CAAN,CAHT,EAIb;UAAEmZ;QAAF,CAJa,CAAf2F;QAMA;MACD,CARM,MAQA;QACLhZ,OAAO,GAAGqW,cAAc,CAACrW,OAAzBA;QACAK,KAAK,GAAGsW,cAAc,CAAC3W,OAAD,EAAU9F,IAAV,CAAtBmG;MACD;IACF,CA5CsB,CA8CvB;;;IACA4Q,gBAAgB,CAAClJ,GAAjBkJ,CAAqB7X,GAArB6X,EAA0BuI,eAA1BvI;IAEA,IAAIyI,iBAAiB,GAAGxI,kBAAxB;IACA,IAAI2F,OAAO,GAAG,MAAMC,gBAAgB,CAClC,QADkC,EAElCve,KAFkC,EAGlCkhB,YAHkC,EAIlC,CAACpZ,KAAD,CAJkC,EAKlCL,OALkC,EAMlC5G,GANkC,CAApC;IAQA,IAAI8I,MAAM,GAAG2U,OAAO,CAACxW,KAAK,CAAC3B,KAAN2B,CAAYnB,EAAb,CAApB,CA1DuB,CA4DvB;IACA;IACA;IACA;;IACA,IAAIgY,gBAAgB,CAAChV,MAAD,CAApB,EAA8B;MAC5BA,MAAM,GACJ,CAAC,MAAMgY,mBAAmB,CAAChY,MAAD,EAASuX,YAAY,CAACxQ,MAAtB,EAA8B,IAA9B,CAA1B,KACA/G,MAFFA;IAGD,CApEsB,CAsEvB;IACA;;;IACA,IAAI+O,gBAAgB,CAACnH,GAAjBmH,CAAqB7X,GAArB6X,MAA8BuI,eAAlC,EAAmD;MACjDvI,gBAAgB,CAACjH,MAAjBiH,CAAwB7X,GAAxB6X;IACD;;IAED,IAAIwI,YAAY,CAACxQ,MAAbwQ,CAAoB1P,OAAxB,EAAiC;MAC/B;IACD,CA9EsB,CAgFvB;IACA;;;IACA,IAAIyH,eAAe,CAAC1J,GAAhB0J,CAAoBpY,GAApBoY,CAAJ,EAA8B;MAC5B8H,kBAAkB,CAAClgB,GAAD,EAAMwgB,cAAc,CAACphB,SAAD,CAApB,CAAlB8gB;MACA;IACD,CArFsB,CAuFvB;;;IACA,IAAIvC,gBAAgB,CAAC7U,MAAD,CAApB,EAA8B;MAC5B,IAAIiP,uBAAuB,GAAGuI,iBAA9B,EAAiD;QAC/C;QACA;QACAJ,kBAAkB,CAAClgB,GAAD,EAAMwgB,cAAc,CAACphB,SAAD,CAApB,CAAlB8gB;QACA;MACD,CALD,MAKO;QACLjI,gBAAgB,CAAC9H,GAAjB8H,CAAqBjY,GAArBiY;QACA,MAAM4F,uBAAuB,CAACwC,YAAD,EAAevX,MAAf,EAAuB,KAAvB,CAA7B;QACA;MACD;IACF,CAnGsB,CAqGvB;;;IACA,IAAI2T,aAAa,CAAC3T,MAAD,CAAjB,EAA2B;MACzB8W,eAAe,CAAC5f,GAAD,EAAMwc,OAAN,EAAe1T,MAAM,CAACpE,KAAtB,CAAfkb;MACA;IACD;;IAED7a,SAAS,CAAC,CAAC+Y,gBAAgB,CAAChV,MAAD,CAAlB,EAA4B,iCAA5B,CAAT/D,CA3GuB,CA6GvB;;IACAmb,kBAAkB,CAAClgB,GAAD,EAAMwgB,cAAc,CAAC1X,MAAM,CAAC1B,IAAR,CAApB,CAAlB8Y;EACF;EAEA;;;;;;;;;;;;;;;;;;AAkBG;;;EACH,eAAerC,uBAAf,CACE5B,OADF,EAEE/J,QAFF,EAGE6O,YAHF,EAGuBC,MAHvB,EAYQ;IAAA,IARN;MACE/F,UADF;MAEE4B,iBAFF;MAGEtb;IAHF,wBAQI,KAAEyf;;IAEN,IAAI9O,QAAQ,CAACE,QAATF,CAAkB1D,OAAlB0D,CAA0BxD,GAA1BwD,CAA8B,oBAA9BA,CAAJ,EAAyD;MACvDwF,sBAAsB,GAAG,IAAzBA;IACD;;IAED,IAAIzX,QAAQ,GAAGiS,QAAQ,CAACE,QAATF,CAAkB1D,OAAlB0D,CAA0BxB,GAA1BwB,CAA8B,UAA9BA,CAAf;IACAnN,SAAS,CAAC9E,QAAD,EAAW,qDAAX,CAAT8E;IACA9E,QAAQ,GAAG2d,yBAAyB,CAClC3d,QADkC,EAElC,IAAIW,GAAJ,CAAQqb,OAAO,CAACrZ,GAAhB,CAFkC,EAGlCyD,QAHkC,CAApCpG;IAKA,IAAIghB,gBAAgB,GAAG/gB,cAAc,CAACf,KAAK,CAACc,QAAP,EAAiBA,QAAjB,EAA2B;MAC9Dqa,WAAW,EAAE;IADiD,CAA3B,CAArC;;IAIA,IAAItG,SAAJ,EAAe;MACb,IAAIkN,gBAAgB,GAAG,KAAvB;;MAEA,IAAIhP,QAAQ,CAACE,QAATF,CAAkB1D,OAAlB0D,CAA0BxD,GAA1BwD,CAA8B,yBAA9BA,CAAJ,EAA8D;QAC5D;QACAgP,gBAAgB,GAAG,IAAnBA;MACD,CAHD,MAGO,IAAIzN,kBAAkB,CAACxJ,IAAnBwJ,CAAwBxT,QAAxBwT,CAAJ,EAAuC;QAC5C,MAAM7Q,GAAG,GAAGyL,IAAI,CAAC3N,OAAL2N,CAAa1N,SAAb0N,CAAuBpO,QAAvBoO,CAAZ;QACA6S,gBAAgB,GACd;QACAte,GAAG,CAACkC,MAAJlC,KAAemR,YAAY,CAAC9T,QAAb8T,CAAsBjP,MAArClC,IACA;QACA4D,aAAa,CAAC5D,GAAG,CAACzC,QAAL,EAAekG,QAAf,CAAbG,IAAyC,IAJ3C0a;MAKD;;MAED,IAAIA,gBAAJ,EAAsB;QACpB,IAAI3f,OAAJ,EAAa;UACXwS,YAAY,CAAC9T,QAAb8T,CAAsBxS,OAAtBwS,CAA8B9T,QAA9B8T;QACD,CAFD,MAEO;UACLA,YAAY,CAAC9T,QAAb8T,CAAsBlP,MAAtBkP,CAA6B9T,QAA7B8T;QACD;;QACD;MACD;IACF,CAxCK,CA0CN;IACA;;;IACAsD,2BAA2B,GAAG,IAA9BA;IAEA,IAAI8J,qBAAqB,GACvB5f,OAAO,KAAK,IAAZA,IAAoB2Q,QAAQ,CAACE,QAATF,CAAkB1D,OAAlB0D,CAA0BxD,GAA1BwD,CAA8B,iBAA9BA,CAApB3Q,GACI4V,MAAa,CAAC3V,OADlBD,GAEI4V,MAAa,CAAChW,IAHpB,CA9CM,CAmDN;IACA;;IACA,IAAI;MAAE6R,UAAF;MAAcC,UAAd;MAA0BC;IAA1B,IAA0C/T,KAAK,CAACuX,UAApD;;IACA,IACE,CAACuE,UAAD,IACA,CAAC4B,iBADD,IAEA7J,UAFA,IAGAC,UAHA,IAIAC,WALF,EAME;MACA+H,UAAU,GAAGgD,2BAA2B,CAAC9e,KAAK,CAACuX,UAAP,CAAxCuE;IACD,CA9DK,CAgEN;IACA;IACA;;;IACA,IAAI+C,gBAAgB,GAAG/C,UAAU,IAAI4B,iBAArC;;IACA,IACE/J,iCAAiC,CAACpE,GAAlCoE,CAAsCZ,QAAQ,CAACE,QAATF,CAAkB3D,MAAxDuE,KACAkL,gBADAlL,IAEAuH,gBAAgB,CAAC2D,gBAAgB,CAAChL,UAAlB,CAHlB,EAIE;MACA,MAAMgG,eAAe,CAACmI,qBAAD,EAAwBF,gBAAxB,EAA0C;QAC7DhG,UAAU,eACL+C,gBADK,EACW;UACnB/K,UAAU,EAAEhT;QADO,CADX,CADmD;QAK7D;QACA2W,kBAAkB,EAAEQ,yBANyC;QAO7DiE,oBAAoB,EAAE0F,YAAY,GAC9BzJ,4BAD8B,GAE9BlY;MATyD,CAA1C,CAArB;IAWD,CAhBD,MAgBO;MACL;MACA;MACA,IAAIsc,kBAAkB,GAAGgB,oBAAoB,CAC3CuE,gBAD2C,EAE3ChG,UAF2C,CAA7C;MAIA,MAAMjC,eAAe,CAACmI,qBAAD,EAAwBF,gBAAxB,EAA0C;QAC7DvF,kBAD6D;QAE7D;QACAmB,iBAH6D;QAI7D;QACAjG,kBAAkB,EAAEQ,yBALyC;QAM7DiE,oBAAoB,EAAE0F,YAAY,GAC9BzJ,4BAD8B,GAE9BlY;MARyD,CAA1C,CAArB;IAUD;EACH,CA5+D2C,CA8+D3C;EACA;;;EACA,eAAese,gBAAf,CACE3O,IADF,EAEE5P,KAFF,EAGE8c,OAHF,EAIEmC,aAJF,EAKExX,OALF,EAMEwa,UANF,EAM2B;IAEzB,IAAI3D,OAAJ;IACA,IAAI4D,WAAW,GAA+B,EAA9C;;IACA,IAAI;MACF5D,OAAO,GAAG,MAAM6D,oBAAoB,CAClChN,gBADkC,EAElCvF,IAFkC,EAGlC5P,KAHkC,EAIlC8c,OAJkC,EAKlCmC,aALkC,EAMlCxX,OANkC,EAOlCwa,UAPkC,EAQlCzb,QARkC,EASlCF,kBATkC,CAApCgY;IAWD,CAZD,CAYE,OAAOla,CAAP,EAAU;MACV;MACA;MACA6a,aAAa,CAACnW,OAAdmW,CAAuBnI,CAAC,IAAI;QAC1BoL,WAAW,CAACpL,CAAC,CAAC3Q,KAAF2Q,CAAQnQ,EAAT,CAAXub,GAA0B;UACxBtS,IAAI,EAAE7J,UAAU,CAACR,KADO;UAExBA,KAAK,EAAEnB;QAFiB,CAA1B8d;MAID,CALDjD;MAMA,OAAOiD,WAAP;IACD;;IAED,KAAK,IAAI,CAAC7E,OAAD,EAAU1T,MAAV,CAAT,IAA8B4B,MAAM,CAAC5L,OAAP4L,CAAe+S,OAAf/S,CAA9B,EAAuD;MACrD,IAAI6W,kCAAkC,CAACzY,MAAD,CAAtC,EAAgD;QAC9C,IAAIsJ,QAAQ,GAAGtJ,MAAM,CAACA,MAAtB;QACAuY,WAAW,CAAC7E,OAAD,CAAX6E,GAAuB;UACrBtS,IAAI,EAAE7J,UAAU,CAACgN,QADI;UAErBE,QAAQ,EAAEoP,wCAAwC,CAChDpP,QADgD,EAEhD6J,OAFgD,EAGhDO,OAHgD,EAIhD5V,OAJgD,EAKhDP,QALgD,EAMhDsO,MAAM,CAACvH,oBANyC;QAF7B,CAAvBiU;MAWD,CAbD,MAaO;QACLA,WAAW,CAAC7E,OAAD,CAAX6E,GAAuB,MAAMI,qCAAqC,CAChE3Y,MADgE,CAAlEuY;MAGD;IACF;;IAED,OAAOA,WAAP;EACF;;EAEA,eAAenC,8BAAf,CACE/f,KADF,EAEEyH,OAFF,EAGEwX,aAHF,EAIEsD,cAJF,EAKEzF,OALF,EAKkB;IAEhB,IAAI0F,cAAc,GAAGxiB,KAAK,CAACyH,OAA3B,CAFgB,CAIhB;;IACA,IAAIgb,oBAAoB,GAAGlE,gBAAgB,CACzC,QADyC,EAEzCve,KAFyC,EAGzC8c,OAHyC,EAIzCmC,aAJyC,EAKzCxX,OALyC,EAMzC,IANyC,CAA3C;IASA,IAAIib,qBAAqB,GAAGtS,OAAO,CAACuS,GAARvS,CAC1BmS,cAAc,CAAC3iB,GAAf2iB,CAAmB,MAAO3C,CAAP,IAAY;MAC7B,IAAIA,CAAC,CAACnY,OAAFmY,IAAaA,CAAC,CAAC9X,KAAf8X,IAAwBA,CAAC,CAACtP,UAA9B,EAA0C;QACxC,IAAIgO,OAAO,GAAG,MAAMC,gBAAgB,CAClC,QADkC,EAElCve,KAFkC,EAGlC+c,uBAAuB,CAAC7N,IAAI,CAAC3N,OAAN,EAAeqe,CAAC,CAACje,IAAjB,EAAuBie,CAAC,CAACtP,UAAFsP,CAAalP,MAApC,CAHW,EAIlC,CAACkP,CAAC,CAAC9X,KAAH,CAJkC,EAKlC8X,CAAC,CAACnY,OALgC,EAMlCmY,CAAC,CAAC/e,GANgC,CAApC;QAQA,IAAI8I,MAAM,GAAG2U,OAAO,CAACsB,CAAC,CAAC9X,KAAF8X,CAAQzZ,KAARyZ,CAAcjZ,EAAf,CAApB,CATwC,CAUxC;;QACA,OAAO;UAAE,CAACiZ,CAAC,CAAC/e,GAAH,GAAS8I;QAAX,CAAP;MACD,CAZD,MAYO;QACL,OAAOyG,OAAO,CAACgC,OAARhC,CAAgB;UACrB,CAACwP,CAAC,CAAC/e,GAAH,GAAS;YACP+O,IAAI,EAAE7J,UAAU,CAACR,KADV;YAEPA,KAAK,EAAEiR,sBAAsB,CAAC,GAAD,EAAM;cACjCxV,QAAQ,EAAE4e,CAAC,CAACje;YADqB,CAAN;UAFtB;QADY,CAAhByO,CAAP;MAQD;IACF,CAvBDmS,CAD0BnS,CAA5B;IA2BA,IAAIyP,aAAa,GAAG,MAAM4C,oBAA1B;IACA,IAAI3C,cAAc,GAAG,CAAC,MAAM4C,qBAAP,EAA8B9X,MAA9B,CACnB,CAAC+F,GAAD,EAAMN,CAAN,KAAY9E,MAAM,CAAC7F,MAAP6F,CAAcoF,GAAdpF,EAAmB8E,CAAnB9E,CADO,EAEnB,EAFmB,CAArB;IAKA,MAAM6E,OAAO,CAACuS,GAARvS,CAAY,CAChBwS,gCAAgC,CAC9Bnb,OAD8B,EAE9BoY,aAF8B,EAG9B/C,OAAO,CAACpM,MAHsB,EAI9B8R,cAJ8B,EAK9BxiB,KAAK,CAAC+H,UALwB,CADhB,EAQhB8a,6BAA6B,CAACpb,OAAD,EAAUqY,cAAV,EAA0ByC,cAA1B,CARb,CAAZnS,CAAN;IAWA,OAAO;MACLyP,aADK;MAELC;IAFK,CAAP;EAIF;;EAEA,SAASzD,oBAAT,GAA6B;IAC3B;IACA9D,sBAAsB,GAAG,IAAzBA,CAF2B,CAI3B;IACA;;IACAC,uBAAuB,CAACzW,IAAxByW,CAA6B,GAAG4G,qBAAqB,EAArD5G,EAN2B,CAQ3B;;IACAO,gBAAgB,CAACjQ,OAAjBiQ,CAAyB,CAAClM,CAAD,EAAIhM,GAAJ,KAAW;MAClC,IAAI6X,gBAAgB,CAACnJ,GAAjBmJ,CAAqB7X,GAArB6X,CAAJ,EAA+B;QAC7BD,qBAAqB,CAACzH,GAAtByH,CAA0B5X,GAA1B4X;QACAiH,YAAY,CAAC7e,GAAD,CAAZ6e;MACD;IACF,CALD3G;EAMF;;EAEA,SAASgI,kBAAT,CACElgB,GADF,EAEE6Z,OAFF,EAGEH,IAHF,EAGoC;IAAA,IAAlCA,eAAkC,EAAlCA;MAAAA,OAAgC,EAAhCA;IAAkC;;IAElCva,KAAK,CAAC4X,QAAN5X,CAAewP,GAAfxP,CAAmBa,GAAnBb,EAAwB0a,OAAxB1a;IACA4Z,WAAW,CACT;MAAEhC,QAAQ,EAAE,IAAIC,GAAJ,CAAQ7X,KAAK,CAAC4X,QAAd;IAAZ,CADS,EAET;MAAEkD,SAAS,EAAE,CAACP,IAAI,IAAIA,IAAI,CAACO,SAAd,MAA6B;IAA1C,CAFS,CAAXlB;EAIF;;EAEA,SAAS6G,eAAT,CACE5f,GADF,EAEEwc,OAFF,EAGE9X,KAHF,EAIEgV,IAJF,EAIoC;IAAA,IAAlCA,eAAkC,EAAlC;MAAAA,OAAgC,EAAhCA;IAAkC;;IAElC,IAAIqE,aAAa,GAAG3B,mBAAmB,CAACjd,KAAK,CAACyH,OAAP,EAAgB4V,OAAhB,CAAvC;IACAjD,aAAa,CAACvZ,GAAD,CAAbuZ;IACAR,WAAW,CACT;MACE3C,MAAM,EAAE;QACN,CAAC2H,aAAa,CAACzY,KAAdyY,CAAoBjY,EAArB,GAA0BpB;MADpB,CADV;MAIEqS,QAAQ,EAAE,IAAIC,GAAJ,CAAQ7X,KAAK,CAAC4X,QAAd;IAJZ,CADS,EAOT;MAAEkD,SAAS,EAAE,CAACP,IAAI,IAAIA,IAAI,CAACO,SAAd,MAA6B;IAA1C,CAPS,CAAXlB;EASF;;EAEA,SAASkJ,UAAT,CAAiCjiB,GAAjC,EAA4C;IAC1C,IAAI2U,MAAM,CAACC,iBAAX,EAA8B;MAC5BuD,cAAc,CAACxJ,GAAfwJ,CAAmBnY,GAAnBmY,EAAwB,CAACA,cAAc,CAACzH,GAAfyH,CAAmBnY,GAAnBmY,KAA2B,CAA5B,IAAiC,CAAzDA,EAD4B,CAE5B;MACA;;MACA,IAAIC,eAAe,CAAC1J,GAAhB0J,CAAoBpY,GAApBoY,CAAJ,EAA8B;QAC5BA,eAAe,CAACxH,MAAhBwH,CAAuBpY,GAAvBoY;MACD;IACF;;IACD,OAAOjZ,KAAK,CAAC4X,QAAN5X,CAAeuR,GAAfvR,CAAmBa,GAAnBb,KAA2BkU,YAAlC;EACF;;EAEA,SAASkG,aAAT,CAAuBvZ,GAAvB,EAAkC;IAChC,IAAI6Z,OAAO,GAAG1a,KAAK,CAAC4X,QAAN5X,CAAeuR,GAAfvR,CAAmBa,GAAnBb,CAAd,CADgC,CAEhC;IACA;IACA;;IACA,IACE0Y,gBAAgB,CAACnJ,GAAjBmJ,CAAqB7X,GAArB6X,KACA,EAAEgC,OAAO,IAAIA,OAAO,CAAC1a,KAAR0a,KAAkB,SAA7BA,IAA0C7B,cAAc,CAACtJ,GAAfsJ,CAAmBhY,GAAnBgY,CAA5C,CAFF,EAGE;MACA6G,YAAY,CAAC7e,GAAD,CAAZ6e;IACD;;IACD3G,gBAAgB,CAACtH,MAAjBsH,CAAwBlY,GAAxBkY;IACAF,cAAc,CAACpH,MAAfoH,CAAsBhY,GAAtBgY;IACAC,gBAAgB,CAACrH,MAAjBqH,CAAwBjY,GAAxBiY;IACAG,eAAe,CAACxH,MAAhBwH,CAAuBpY,GAAvBoY;IACAR,qBAAqB,CAAChH,MAAtBgH,CAA6B5X,GAA7B4X;IACAzY,KAAK,CAAC4X,QAAN5X,CAAeyR,MAAfzR,CAAsBa,GAAtBb;EACF;;EAEA,SAAS+iB,2BAAT,CAAqCliB,GAArC,EAAgD;IAC9C,IAAI2U,MAAM,CAACC,iBAAX,EAA8B;MAC5B,IAAIuN,KAAK,GAAG,CAAChK,cAAc,CAACzH,GAAfyH,CAAmBnY,GAAnBmY,KAA2B,CAA5B,IAAiC,CAA7C;;MACA,IAAIgK,KAAK,IAAI,CAAb,EAAgB;QACdhK,cAAc,CAACvH,MAAfuH,CAAsBnY,GAAtBmY;QACAC,eAAe,CAACjI,GAAhBiI,CAAoBpY,GAApBoY;MACD,CAHD,MAGO;QACLD,cAAc,CAACxJ,GAAfwJ,CAAmBnY,GAAnBmY,EAAwBgK,KAAxBhK;MACD;IACF,CARD,MAQO;MACLoB,aAAa,CAACvZ,GAAD,CAAbuZ;IACD;;IACDR,WAAW,CAAC;MAAEhC,QAAQ,EAAE,IAAIC,GAAJ,CAAQ7X,KAAK,CAAC4X,QAAd;IAAZ,CAAD,CAAXgC;EACF;;EAEA,SAAS8F,YAAT,CAAsB7e,GAAtB,EAAiC;IAC/B,IAAIyP,UAAU,GAAGoI,gBAAgB,CAACnH,GAAjBmH,CAAqB7X,GAArB6X,CAAjB;IACA9S,SAAS,CAAC0K,UAAD,EAA2CzP,mCAA3C,CAAT+E;IACA0K,UAAU,CAAC2B,KAAX3B;IACAoI,gBAAgB,CAACjH,MAAjBiH,CAAwB7X,GAAxB6X;EACF;;EAEA,SAASuK,gBAAT,CAA0B7H,IAA1B,EAAwC;IACtC,KAAK,IAAIva,GAAT,IAAgBua,IAAhB,EAAsB;MACpB,IAAIV,OAAO,GAAGoI,UAAU,CAACjiB,GAAD,CAAxB;MACA,IAAI6gB,WAAW,GAAGL,cAAc,CAAC3G,OAAO,CAACzS,IAAT,CAAhC;MACAjI,KAAK,CAAC4X,QAAN5X,CAAewP,GAAfxP,CAAmBa,GAAnBb,EAAwB0hB,WAAxB1hB;IACD;EACH;;EAEA,SAASsf,sBAAT,GAA+B;IAC7B,IAAI4D,QAAQ,GAAG,EAAf;IACA,IAAI7D,eAAe,GAAG,KAAtB;;IACA,KAAK,IAAIxe,GAAT,IAAgBiY,gBAAhB,EAAkC;MAChC,IAAI4B,OAAO,GAAG1a,KAAK,CAAC4X,QAAN5X,CAAeuR,GAAfvR,CAAmBa,GAAnBb,CAAd;MACA4F,SAAS,CAAC8U,OAAD,EAA+B7Z,0BAA/B,CAAT+E;;MACA,IAAI8U,OAAO,CAAC1a,KAAR0a,KAAkB,SAAtB,EAAiC;QAC/B5B,gBAAgB,CAACrH,MAAjBqH,CAAwBjY,GAAxBiY;QACAoK,QAAQ,CAACnhB,IAATmhB,CAAcriB,GAAdqiB;QACA7D,eAAe,GAAG,IAAlBA;MACD;IACF;;IACD4D,gBAAgB,CAACC,QAAD,CAAhBD;IACA,OAAO5D,eAAP;EACF;;EAEA,SAASe,oBAAT,CAA8B+C,QAA9B,EAA8C;IAC5C,IAAIC,UAAU,GAAG,EAAjB;;IACA,KAAK,IAAI,CAACviB,GAAD,EAAM8F,EAAN,CAAT,IAAsBkS,cAAtB,EAAsC;MACpC,IAAIlS,EAAE,GAAGwc,QAAT,EAAmB;QACjB,IAAIzI,OAAO,GAAG1a,KAAK,CAAC4X,QAAN5X,CAAeuR,GAAfvR,CAAmBa,GAAnBb,CAAd;QACA4F,SAAS,CAAC8U,OAAD,EAA+B7Z,0BAA/B,CAAT+E;;QACA,IAAI8U,OAAO,CAAC1a,KAAR0a,KAAkB,SAAtB,EAAiC;UAC/BgF,YAAY,CAAC7e,GAAD,CAAZ6e;UACA7G,cAAc,CAACpH,MAAfoH,CAAsBhY,GAAtBgY;UACAuK,UAAU,CAACrhB,IAAXqhB,CAAgBviB,GAAhBuiB;QACD;MACF;IACF;;IACDH,gBAAgB,CAACG,UAAD,CAAhBH;IACA,OAAOG,UAAU,CAACjjB,MAAXijB,GAAoB,CAA3B;EACF;;EAEA,SAASC,UAAT,CAAoBxiB,GAApB,EAAiC4B,EAAjC,EAAoD;IAClD,IAAI6gB,OAAO,GAAYtjB,KAAK,CAAC8X,QAAN9X,CAAeuR,GAAfvR,CAAmBa,GAAnBb,KAA2BmU,YAAlD;;IAEA,IAAIgF,gBAAgB,CAAC5H,GAAjB4H,CAAqBtY,GAArBsY,MAA8B1W,EAAlC,EAAsC;MACpC0W,gBAAgB,CAAC3J,GAAjB2J,CAAqBtY,GAArBsY,EAA0B1W,EAA1B0W;IACD;;IAED,OAAOmK,OAAP;EACF;;EAEA,SAASjJ,aAAT,CAAuBxZ,GAAvB,EAAkC;IAChCb,KAAK,CAAC8X,QAAN9X,CAAeyR,MAAfzR,CAAsBa,GAAtBb;IACAmZ,gBAAgB,CAAC1H,MAAjB0H,CAAwBtY,GAAxBsY;EACF,CA1wE2C,CA4wE3C;;;EACA,SAASQ,aAAT,CAAuB9Y,GAAvB,EAAoC0iB,UAApC,EAAuD;IACrD,IAAID,OAAO,GAAGtjB,KAAK,CAAC8X,QAAN9X,CAAeuR,GAAfvR,CAAmBa,GAAnBb,KAA2BmU,YAAzC,CADqD,CAGrD;IACA;;IACAvO,SAAS,CACN0d,OAAO,CAACtjB,KAARsjB,KAAkB,WAAlBA,IAAiCC,UAAU,CAACvjB,KAAXujB,KAAqB,SAAtDD,IACEA,OAAO,CAACtjB,KAARsjB,KAAkB,SAAlBA,IAA+BC,UAAU,CAACvjB,KAAXujB,KAAqB,SADtDD,IAEEA,OAAO,CAACtjB,KAARsjB,KAAkB,SAAlBA,IAA+BC,UAAU,CAACvjB,KAAXujB,KAAqB,YAFtDD,IAGEA,OAAO,CAACtjB,KAARsjB,KAAkB,SAAlBA,IAA+BC,UAAU,CAACvjB,KAAXujB,KAAqB,WAHtDD,IAIEA,OAAO,CAACtjB,KAARsjB,KAAkB,YAAlBA,IAAkCC,UAAU,CAACvjB,KAAXujB,KAAqB,WALnD,EAK+D,uCACjCD,OAAO,CAACtjB,KADyB,GACpB,MADoB,GACbujB,UAAU,CAACvjB,KAN7D,CAAT4F;IASA,IAAIkS,QAAQ,GAAG,IAAID,GAAJ,CAAQ7X,KAAK,CAAC8X,QAAd,CAAf;IACAA,QAAQ,CAACtI,GAATsI,CAAajX,GAAbiX,EAAkByL,UAAlBzL;IACA8B,WAAW,CAAC;MAAE9B;IAAF,CAAD,CAAX8B;EACF;;EAEA,SAASJ,qBAAT,CAA8BgK,KAA9B,EAQC;IAAA,IAR8B;MAC7B/J,eAD6B;MAE7BxX,YAF6B;MAG7BqV;IAH6B,IAQ9BkM;;IACC,IAAIrK,gBAAgB,CAAC9G,IAAjB8G,KAA0B,CAA9B,EAAiC;MAC/B;IACD,CAHF,CAKC;IACA;;;IACA,IAAIA,gBAAgB,CAAC9G,IAAjB8G,GAAwB,CAA5B,EAA+B;MAC7BlY,OAAO,CAAC,KAAD,EAAQ,8CAAR,CAAPA;IACD;;IAED,IAAItB,OAAO,GAAGqQ,KAAK,CAACvB,IAANuB,CAAWmJ,gBAAgB,CAACxZ,OAAjBwZ,EAAXnJ,CAAd;IACA,IAAI,CAACuJ,UAAD,EAAakK,eAAb,IAAgC9jB,OAAO,CAACA,OAAO,CAACQ,MAARR,GAAiB,CAAlB,CAA3C;IACA,IAAI2jB,OAAO,GAAGtjB,KAAK,CAAC8X,QAAN9X,CAAeuR,GAAfvR,CAAmBuZ,UAAnBvZ,CAAd;;IAEA,IAAIsjB,OAAO,IAAIA,OAAO,CAACtjB,KAARsjB,KAAkB,YAAjC,EAA+C;MAC7C;MACA;MACA;IACD,CAnBF,CAqBC;IACA;;;IACA,IAAIG,eAAe,CAAC;MAAEhK,eAAF;MAAmBxX,YAAnB;MAAiCqV;IAAjC,CAAD,CAAnB,EAAuE;MACrE,OAAOiC,UAAP;IACD;EACH;;EAEA,SAASqD,qBAAT,CAA+B5b,QAA/B,EAA+C;IAC7C,IAAIuE,KAAK,GAAGiR,sBAAsB,CAAC,GAAD,EAAM;MAAExV;IAAF,CAAN,CAAlC;IACA,IAAIyb,WAAW,GAAGvH,kBAAkB,IAAID,UAAxC;IACA,IAAI;MAAExN,OAAF;MAAWtB;IAAX,IAAqBsQ,sBAAsB,CAACgG,WAAD,CAA/C,CAH6C,CAK7C;;IACA2C,qBAAqB;IAErB,OAAO;MAAEzC,eAAe,EAAElV,OAAnB;MAA4BtB,KAA5B;MAAmCZ;IAAnC,CAAP;EACF;;EAEA,SAAS0Y,wBAAT,CACEjd,QADF,EAEE8c,cAFF,EAE2C;IAEzC,OAAO;MACLE,UAAU,EAAEf,mBAAmB,CAACa,cAAc,CAACI,cAAhB,CAAnBjB,CAAmD9W,KAAnD8W,CAAyDtW,EADhE;MAELpB,KAAK,EAAEiR,sBAAsB,CAAC,GAAD,EAAM;QACjC5G,IAAI,EAAE,iBAD2B;QAEjC5O,QAFiC;QAGjC+C,OAAO,EACL+Z,cAAc,CAACvY,KAAfuY,IAAwB,IAAxBA,IAAgC,aAAaA,cAAc,CAACvY,KAA5DuY,GACIA,cAAc,CAACvY,KADnBuY,GAEIpX,MAAM,CAACoX,cAAc,CAACvY,KAAhB;MANqB,CAAN;IAFxB,CAAP;EAWF;;EAEA,SAAS6Z,qBAAT,CACEsE,SADF,EAC0C;IAExC,IAAIC,iBAAiB,GAAa,EAAlC;IACAzK,eAAe,CAACpQ,OAAhBoQ,CAAwB,CAAC0K,GAAD,EAAMvG,OAAN,KAAiB;MACvC,IAAI,CAACqG,SAAD,IAAcA,SAAS,CAACrG,OAAD,CAA3B,EAAsC;QACpC;QACA;QACA;QACAuG,GAAG,CAAC5R,MAAJ4R;QACAD,iBAAiB,CAAC5hB,IAAlB4hB,CAAuBtG,OAAvBsG;QACAzK,eAAe,CAACzH,MAAhByH,CAAuBmE,OAAvBnE;MACD;IACF,CATDA;IAUA,OAAOyK,iBAAP;EACF,CA/2E2C,CAi3E3C;EACA;;;EACA,SAASE,uBAAT,CACEC,SADF,EAEEC,WAFF,EAGEC,MAHF,EAG0C;IAExC/N,oBAAoB,GAAG6N,SAAvB7N;IACAE,iBAAiB,GAAG4N,WAApB5N;IACAD,uBAAuB,GAAG8N,MAAM,IAAI,IAApC9N,CAJwC,CAMxC;IACA;IACA;;IACA,IAAI,CAACE,qBAAD,IAA0BpW,KAAK,CAACuX,UAANvX,KAAqB4T,eAAnD,EAAoE;MAClEwC,qBAAqB,GAAG,IAAxBA;MACA,IAAI6N,CAAC,GAAGzI,sBAAsB,CAACxb,KAAK,CAACc,QAAP,EAAiBd,KAAK,CAACyH,OAAvB,CAA9B;;MACA,IAAIwc,CAAC,IAAI,IAAT,EAAe;QACbrK,WAAW,CAAC;UAAEpC,qBAAqB,EAAEyM;QAAzB,CAAD,CAAXrK;MACD;IACF;;IAED,OAAO,MAAK;MACV3D,oBAAoB,GAAG,IAAvBA;MACAE,iBAAiB,GAAG,IAApBA;MACAD,uBAAuB,GAAG,IAA1BA;IACD,CAJD;EAKF;;EAEA,SAASgO,YAAT,CAAsBpjB,QAAtB,EAA0C2G,OAA1C,EAA2E;IACzE,IAAIyO,uBAAJ,EAA6B;MAC3B,IAAIrV,GAAG,GAAGqV,uBAAuB,CAC/BpV,QAD+B,EAE/B2G,OAAO,CAAC7H,GAAR6H,CAAaqP,CAAC,IAAKqN,0BAA0B,CAACrN,CAAD,EAAI9W,KAAK,CAAC+H,UAAV,CAA7CN,CAF+B,CAAjC;MAIA,OAAO5G,GAAG,IAAIC,QAAQ,CAACD,GAAvB;IACD;;IACD,OAAOC,QAAQ,CAACD,GAAhB;EACF;;EAEA,SAAS2b,kBAAT,CACE1b,QADF,EAEE2G,OAFF,EAEmC;IAEjC,IAAIwO,oBAAoB,IAAIE,iBAA5B,EAA+C;MAC7C,IAAItV,GAAG,GAAGqjB,YAAY,CAACpjB,QAAD,EAAW2G,OAAX,CAAtB;MACAwO,oBAAoB,CAACpV,GAAD,CAApBoV,GAA4BE,iBAAiB,EAA7CF;IACD;EACH;;EAEA,SAASuF,sBAAT,CACE1a,QADF,EAEE2G,OAFF,EAEmC;IAEjC,IAAIwO,oBAAJ,EAA0B;MACxB,IAAIpV,GAAG,GAAGqjB,YAAY,CAACpjB,QAAD,EAAW2G,OAAX,CAAtB;MACA,IAAIwc,CAAC,GAAGhO,oBAAoB,CAACpV,GAAD,CAA5B;;MACA,IAAI,OAAOojB,CAAP,KAAa,QAAjB,EAA2B;QACzB,OAAOA,CAAP;MACD;IACF;;IACD,OAAO,IAAP;EACF;;EAEA,SAAStN,aAAT,CACElP,OADF,EAEEgV,WAFF,EAGEzb,QAHF,EAGkB;IAEhB,IAAIsU,2BAAJ,EAAiC;MAC/B;MACA;MACA;MACA,IAAIU,gBAAgB,CAACzG,GAAjByG,CAAqBhV,QAArBgV,CAAJ,EAAoC;QAClC,OAAO;UAAEY,MAAM,EAAE,KAAV;UAAiBnP;QAAjB,CAAP;MACD;;MAED,IAAI,CAACA,OAAL,EAAc;QACZ,IAAI2c,UAAU,GAAGjd,eAAe,CAC9BsV,WAD8B,EAE9Bzb,QAF8B,EAG9BkG,QAH8B,EAI9B,IAJ8B,CAAhC;QAOA,OAAO;UAAE0P,MAAM,EAAE,IAAV;UAAgBnP,OAAO,EAAE2c,UAAU,IAAI;QAAvC,CAAP;MACD,CATD,MASO;QACL,IAAI7Y,MAAM,CAAC6P,IAAP7P,CAAY9D,OAAO,CAAC,CAAD,CAAPA,CAAWO,MAAvBuD,EAA+BpL,MAA/BoL,GAAwC,CAA5C,EAA+C;UAC7C;UACA;UACA;UACA,IAAI2S,cAAc,GAAG/W,eAAe,CAClCsV,WADkC,EAElCzb,QAFkC,EAGlCkG,QAHkC,EAIlC,IAJkC,CAApC;UAMA,OAAO;YAAE0P,MAAM,EAAE,IAAV;YAAgBnP,OAAO,EAAEyW;UAAzB,CAAP;QACD;MACF;IACF;;IAED,OAAO;MAAEtH,MAAM,EAAE,KAAV;MAAiBnP,OAAO,EAAE;IAA1B,CAAP;EACF;;EAiBA,eAAesW,cAAf,CACEtW,OADF,EAEEzG,QAFF,EAGE0P,MAHF,EAGqB;IAEnB,IAAIwN,cAAc,GAAoCzW,OAAtD;;IACA,OAAO,IAAP,EAAa;MACX,IAAI4c,QAAQ,GAAGnP,kBAAkB,IAAI,IAArC;MACA,IAAIuH,WAAW,GAAGvH,kBAAkB,IAAID,UAAxC;;MACA,IAAI;QACF,MAAMqP,qBAAqB,CACzBhP,2BADyB,EAEzBtU,QAFyB,EAGzBkd,cAHyB,EAIzBzB,WAJyB,EAKzBjW,QALyB,EAMzBF,kBANyB,EAOzB8S,kBAPyB,EAQzB1I,MARyB,CAA3B;MAUD,CAXD,CAWE,OAAOtM,CAAP,EAAU;QACV,OAAO;UAAEwL,IAAI,EAAE,OAAR;UAAiBrK,KAAK,EAAEnB,CAAxB;UAA2B8Z;QAA3B,CAAP;MACD,CAbD,SAaU;QACR;QACA;QACA;QACA;QACA;QACA;QACA,IAAImG,QAAJ,EAAc;UACZpP,UAAU,GAAG,CAAC,GAAGA,UAAJ,CAAbA;QACD;MACF;;MAED,IAAIvE,MAAM,CAACc,OAAX,EAAoB;QAClB,OAAO;UAAE5B,IAAI,EAAE;QAAR,CAAP;MACD;;MAED,IAAI2U,UAAU,GAAGvd,WAAW,CAACyV,WAAD,EAAczb,QAAd,EAAwBkG,QAAxB,CAA5B;;MACA,IAAIqd,UAAJ,EAAgB;QACdC,cAAc,CAACxjB,QAAD,EAAWgV,gBAAX,CAAdwO;QACA,OAAO;UAAE5U,IAAI,EAAE,SAAR;UAAmBnI,OAAO,EAAE8c;QAA5B,CAAP;MACD;;MAED,IAAIE,iBAAiB,GAAGtd,eAAe,CACrCsV,WADqC,EAErCzb,QAFqC,EAGrCkG,QAHqC,EAIrC,IAJqC,CAAvC,CAtCW,CA6CX;;MACA,IACE,CAACud,iBAAD,IACCvG,cAAc,CAAC/d,MAAf+d,KAA0BuG,iBAAiB,CAACtkB,MAA5C+d,IACCA,cAAc,CAAClT,KAAfkT,CACE,CAACpH,CAAD,EAAIpP,CAAJ,KAAUoP,CAAC,CAAC3Q,KAAF2Q,CAAQnQ,EAARmQ,KAAe2N,iBAAkB,CAAC/c,CAAD,CAAlB+c,CAAsBte,KAAtBse,CAA4B9d,EADvDuX,CAHJ,EAME;QACAsG,cAAc,CAACxjB,QAAD,EAAWgV,gBAAX,CAAdwO;QACA,OAAO;UAAE5U,IAAI,EAAE,SAAR;UAAmBnI,OAAO,EAAE;QAA5B,CAAP;MACD;;MAEDyW,cAAc,GAAGuG,iBAAjBvG;IACD;EACH;;EAEA,SAASsG,cAAT,CAAwB7iB,IAAxB,EAAsC+iB,KAAtC,EAAwD;IACtD,IAAIA,KAAK,CAACrS,IAANqS,IAAc3O,uBAAlB,EAA2C;MACzC,IAAI1M,KAAK,GAAGqb,KAAK,CAACC,MAAND,GAAeE,IAAfF,GAAsB5gB,KAAlC;MACA4gB,KAAK,CAACjT,MAANiT,CAAarb,KAAbqb;IACD;;IACDA,KAAK,CAAC1T,GAAN0T,CAAU/iB,IAAV+iB;EACF;;EAEA,SAASG,kBAAT,CAA4BC,SAA5B,EAAgE;IAC9Dte,QAAQ,GAAG,EAAXA;IACA0O,kBAAkB,GAAG9O,yBAAyB,CAC5C0e,SAD4C,EAE5Cxe,kBAF4C,EAG5CrG,SAH4C,EAI5CuG,QAJ4C,CAA9C0O;EAMF;;EAEA,SAAS6P,WAAT,CACE1H,OADF,EAEExW,QAFF,EAEiC;IAE/B,IAAIwd,QAAQ,GAAGnP,kBAAkB,IAAI,IAArC;IACA,IAAIuH,WAAW,GAAGvH,kBAAkB,IAAID,UAAxC;IACA+P,eAAe,CACb3H,OADa,EAEbxW,QAFa,EAGb4V,WAHa,EAIbjW,QAJa,EAKbF,kBALa,CAAf0e,CAJ+B,CAY/B;IACA;IACA;IACA;IACA;;IACA,IAAIX,QAAJ,EAAc;MACZpP,UAAU,GAAG,CAAC,GAAGA,UAAJ,CAAbA;MACA2E,WAAW,CAAC,EAAD,CAAXA;IACD;EACH;;EAEAvC,MAAM,GAAG;IACP,IAAInQ,QAAJ,GAAY;MACV,OAAOA,QAAP;IACD,CAHM;;IAIP,IAAIsO,MAAJ,GAAU;MACR,OAAOA,MAAP;IACD,CANM;;IAOP,IAAIxV,KAAJ,GAAS;MACP,OAAOA,KAAP;IACD,CATM;;IAUP,IAAIqG,MAAJ,GAAU;MACR,OAAO4O,UAAP;IACD,CAZM;;IAaP,IAAItS,MAAJ,GAAU;MACR,OAAOiS,YAAP;IACD,CAfM;;IAgBP0E,UAhBO;IAiBPvH,SAjBO;IAkBP8R,uBAlBO;IAmBPpI,QAnBO;IAoBP+E,KApBO;IAqBPpE,UArBO;IAsBP;IACA;IACA/a,UAAU,EAAGT,EAAM,IAAKsO,IAAI,CAAC3N,OAAL2N,CAAa7N,UAAb6N,CAAwBtO,EAAxBsO,CAxBjB;IAyBPxN,cAAc,EAAGd,EAAM,IAAKsO,IAAI,CAAC3N,OAAL2N,CAAaxN,cAAbwN,CAA4BtO,EAA5BsO,CAzBrB;IA0BP4T,UA1BO;IA2BP1I,aAAa,EAAE2I,2BA3BR;IA4BP7I,OA5BO;IA6BPmJ,UA7BO;IA8BPhJ,aA9BO;IA+BP0K,WA/BO;IAgCPE,yBAAyB,EAAEvM,gBAhCpB;IAiCPwM,wBAAwB,EAAEhM,eAjCnB;IAkCP;IACA;IACA2L;EApCO,CAATxN;EAuCA,OAAOA,MAAP;AACF,C,CACA;AAEA;AACA;AACA;;;MAEa8N,sBAAsB,GAAGC,MAAM,CAAC,UAAD;;AAoB5B,6BACd/e,MADc,EAEdkU,IAFc,EAEmB;EAEjC3U,SAAS,CACPS,MAAM,CAAClG,MAAPkG,GAAgB,CADT,EAEP,kEAFO,CAATT;EAKA,IAAIY,QAAQ,GAAkB,EAA9B;EACA,IAAIU,QAAQ,GAAG,CAACqT,IAAI,GAAGA,IAAI,CAACrT,QAAR,GAAmB,IAAxB,KAAiC,GAAhD;EACA,IAAIZ,kBAAJ;;EACA,IAAIiU,IAAI,QAAJA,QAAI,CAAEjU,kBAAV,EAA8B;IAC5BA,kBAAkB,GAAGiU,IAAI,CAACjU,kBAA1BA;EACD,CAFD,MAEO,IAAIiU,IAAI,QAAJA,QAAI,CAAEvF,mBAAV,EAA+B;IACpC;IACA,IAAIA,mBAAmB,GAAGuF,IAAI,CAACvF,mBAA/B;;IACA1O,kBAAkB,GAAIH,KAAK,KAAM;MAC/BqO,gBAAgB,EAAEQ,mBAAmB,CAAC7O,KAAD;IADN,CAAN,CAA3BG;EAGD,CANM,MAMA;IACLA,kBAAkB,GAAGiO,yBAArBjO;EACD,CApBgC,CAqBjC;;;EACA,IAAIkP,MAAM;IACRvH,oBAAoB,EAAE,KADd;IAERoX,mBAAmB,EAAE;EAFb,GAGJ9K,IAAI,GAAGA,IAAI,CAAC/E,MAAR,GAAiB,IAHjB,CAAV;;EAMA,IAAIP,UAAU,GAAG7O,yBAAyB,CACxCC,MADwC,EAExCC,kBAFwC,EAGxCrG,SAHwC,EAIxCuG,QAJwC,CAA1C;EAOA;;;;;;;;;;;;;;;;;;;;;;;;;AAyBG;;EACH,eAAe8e,KAAf,CACExI,OADF,EACkByI,MADlB,EAUQ;IAAA,IARN;MACEC,cADF;MAEEC,uBAFF;MAGErQ;IAHF,IAGuBmQ,oBAKnB,EALmBA,GAKjBA;IAEN,IAAI9hB,GAAG,GAAG,IAAIhC,GAAJ,CAAQqb,OAAO,CAACrZ,GAAhB,CAAV;IACA,IAAI4a,MAAM,GAAGvB,OAAO,CAACuB,MAArB;IACA,IAAIvd,QAAQ,GAAGC,cAAc,CAAC,EAAD,EAAKO,UAAU,CAACmC,GAAD,CAAf,EAAsB,IAAtB,EAA4B,SAA5B,CAA7B;IACA,IAAIgE,OAAO,GAAGT,WAAW,CAACiO,UAAD,EAAanU,QAAb,EAAuBoG,QAAvB,CAAzB,CALM,CAON;;IACA,IAAI,CAACwe,aAAa,CAACrH,MAAD,CAAd,IAA0BA,MAAM,KAAK,MAAzC,EAAiD;MAC/C,IAAI9Y,KAAK,GAAGiR,sBAAsB,CAAC,GAAD,EAAM;QAAE6H;MAAF,CAAN,CAAlC;MACA,IAAI;QAAE5W,OAAO,EAAEke,uBAAX;QAAoCxf;MAApC,IACFsQ,sBAAsB,CAACxB,UAAD,CADxB;MAEA,OAAO;QACL/N,QADK;QAELpG,QAFK;QAGL2G,OAAO,EAAEke,uBAHJ;QAIL5d,UAAU,EAAE,EAJP;QAKL4P,UAAU,EAAE,IALP;QAMLV,MAAM,EAAE;UACN,CAAC9Q,KAAK,CAACQ,EAAP,GAAYpB;QADN,CANH;QASLqgB,UAAU,EAAErgB,KAAK,CAAC6J,MATb;QAULyW,aAAa,EAAE,EAVV;QAWLC,aAAa,EAAE,EAXV;QAYL5M,eAAe,EAAE;MAZZ,CAAP;IAcD,CAlBD,MAkBO,IAAI,CAACzR,OAAL,EAAc;MACnB,IAAIlC,KAAK,GAAGiR,sBAAsB,CAAC,GAAD,EAAM;QAAExV,QAAQ,EAAEF,QAAQ,CAACE;MAArB,CAAN,CAAlC;MACA,IAAI;QAAEyG,OAAO,EAAEkV,eAAX;QAA4BxW;MAA5B,IACFsQ,sBAAsB,CAACxB,UAAD,CADxB;MAEA,OAAO;QACL/N,QADK;QAELpG,QAFK;QAGL2G,OAAO,EAAEkV,eAHJ;QAIL5U,UAAU,EAAE,EAJP;QAKL4P,UAAU,EAAE,IALP;QAMLV,MAAM,EAAE;UACN,CAAC9Q,KAAK,CAACQ,EAAP,GAAYpB;QADN,CANH;QASLqgB,UAAU,EAAErgB,KAAK,CAAC6J,MATb;QAULyW,aAAa,EAAE,EAVV;QAWLC,aAAa,EAAE,EAXV;QAYL5M,eAAe,EAAE;MAZZ,CAAP;IAcD;;IAED,IAAIvP,MAAM,GAAG,MAAMoc,SAAS,CAC1BjJ,OAD0B,EAE1Bhc,QAF0B,EAG1B2G,OAH0B,EAI1B+d,cAJ0B,EAK1BpQ,qBAAqB,IAAI,IALC,EAM1BqQ,uBAAuB,KAAK,IANF,EAO1B,IAP0B,CAA5B;;IASA,IAAIO,UAAU,CAACrc,MAAD,CAAd,EAAwB;MACtB,OAAOA,MAAP;IACD,CAzDK,CA2DN;IACA;IACA;;;IACA;MAAS7I,QAAT;MAAmBoG;IAAnB,GAAgCyC,MAAhC;EACF;EAEA;;;;;;;;;;;;;;;;;;;;;;;;;AAyBG;;;EACH,eAAesc,UAAf,CACEnJ,OADF,EACkBoJ,MADlB,EAUQ;IAAA,IARN;MACE7I,OADF;MAEEmI,cAFF;MAGEpQ;IAHF,IAGuB8Q,oBAKnB,EALmBA,GAKjBA;IAEN,IAAIziB,GAAG,GAAG,IAAIhC,GAAJ,CAAQqb,OAAO,CAACrZ,GAAhB,CAAV;IACA,IAAI4a,MAAM,GAAGvB,OAAO,CAACuB,MAArB;IACA,IAAIvd,QAAQ,GAAGC,cAAc,CAAC,EAAD,EAAKO,UAAU,CAACmC,GAAD,CAAf,EAAsB,IAAtB,EAA4B,SAA5B,CAA7B;IACA,IAAIgE,OAAO,GAAGT,WAAW,CAACiO,UAAD,EAAanU,QAAb,EAAuBoG,QAAvB,CAAzB,CALM,CAON;;IACA,IAAI,CAACwe,aAAa,CAACrH,MAAD,CAAd,IAA0BA,MAAM,KAAK,MAArC,IAA+CA,MAAM,KAAK,SAA9D,EAAyE;MACvE,MAAM7H,sBAAsB,CAAC,GAAD,EAAM;QAAE6H;MAAF,CAAN,CAA5B;IACD,CAFD,MAEO,IAAI,CAAC5W,OAAL,EAAc;MACnB,MAAM+O,sBAAsB,CAAC,GAAD,EAAM;QAAExV,QAAQ,EAAEF,QAAQ,CAACE;MAArB,CAAN,CAA5B;IACD;;IAED,IAAI8G,KAAK,GAAGuV,OAAO,GACf5V,OAAO,CAAC0e,IAAR1e,CAAcqP,CAAC,IAAKA,CAAC,CAAC3Q,KAAF2Q,CAAQnQ,EAARmQ,KAAeuG,OAAnC5V,CADe,GAEf2W,cAAc,CAAC3W,OAAD,EAAU3G,QAAV,CAFlB;;IAIA,IAAIuc,OAAO,IAAI,CAACvV,KAAhB,EAAuB;MACrB,MAAM0O,sBAAsB,CAAC,GAAD,EAAM;QAChCxV,QAAQ,EAAEF,QAAQ,CAACE,QADa;QAEhCqc;MAFgC,CAAN,CAA5B;IAID,CALD,MAKO,IAAI,CAACvV,KAAL,EAAY;MACjB;MACA,MAAM0O,sBAAsB,CAAC,GAAD,EAAM;QAAExV,QAAQ,EAAEF,QAAQ,CAACE;MAArB,CAAN,CAA5B;IACD;;IAED,IAAI2I,MAAM,GAAG,MAAMoc,SAAS,CAC1BjJ,OAD0B,EAE1Bhc,QAF0B,EAG1B2G,OAH0B,EAI1B+d,cAJ0B,EAK1BpQ,qBAAqB,IAAI,IALC,EAM1B,KAN0B,EAO1BtN,KAP0B,CAA5B;;IAUA,IAAIke,UAAU,CAACrc,MAAD,CAAd,EAAwB;MACtB,OAAOA,MAAP;IACD;;IAED,IAAIpE,KAAK,GAAGoE,MAAM,CAACsN,MAAPtN,GAAgB4B,MAAM,CAACoZ,MAAPpZ,CAAc5B,MAAM,CAACsN,MAArB1L,EAA6B,CAA7BA,CAAhB5B,GAAkD1J,SAA9D;;IACA,IAAIsF,KAAK,KAAKtF,SAAd,EAAyB;MACvB;MACA;MACA;MACA;MACA,MAAMsF,KAAN;IACD,CAjDK,CAmDN;;;IACA,IAAIoE,MAAM,CAACgO,UAAX,EAAuB;MACrB,OAAOpM,MAAM,CAACoZ,MAAPpZ,CAAc5B,MAAM,CAACgO,UAArBpM,EAAiC,CAAjCA,CAAP;IACD;;IAED,IAAI5B,MAAM,CAAC5B,UAAX,EAAuB;MAAA;;MACrB,IAAIE,IAAI,GAAGsD,MAAM,CAACoZ,MAAPpZ,CAAc5B,MAAM,CAAC5B,UAArBwD,EAAiC,CAAjCA,CAAX;;MACA,6BAAI5B,MAAM,CAACuP,eAAX,KAAIkN,IAAJ,IAAIA,sBAAyBte,KAAK,CAAC3B,KAAN2B,CAAYnB,EAArC,CAAJ,EAA8C;QAC5CsB,IAAI,CAACkd,sBAAD,CAAJld,GAA+B0B,MAAM,CAACuP,eAAPvP,CAAuB7B,KAAK,CAAC3B,KAAN2B,CAAYnB,EAAnCgD,CAA/B1B;MACD;;MACD,OAAOA,IAAP;IACD;;IAED,OAAOhI,SAAP;EACF;;EAEA,eAAe8lB,SAAf,CACEjJ,OADF,EAEEhc,QAFF,EAGE2G,OAHF,EAIE+d,cAJF,EAKEpQ,qBALF,EAMEqQ,uBANF,EAOEY,UAPF,EAO2C;IAEzCzgB,SAAS,CACPkX,OAAO,CAACpM,MADD,EAEP,sEAFO,CAAT9K;;IAKA,IAAI;MACF,IAAIsV,gBAAgB,CAAC4B,OAAO,CAACuB,MAARvB,CAAe7P,WAAf6P,EAAD,CAApB,EAAoD;QAClD,IAAInT,MAAM,GAAG,MAAM2c,MAAM,CACvBxJ,OADuB,EAEvBrV,OAFuB,EAGvB4e,UAAU,IAAIjI,cAAc,CAAC3W,OAAD,EAAU3G,QAAV,CAHL,EAIvB0kB,cAJuB,EAKvBpQ,qBALuB,EAMvBqQ,uBANuB,EAOvBY,UAAU,IAAI,IAPS,CAAzB;QASA,OAAO1c,MAAP;MACD;;MAED,IAAIA,MAAM,GAAG,MAAM4c,aAAa,CAC9BzJ,OAD8B,EAE9BrV,OAF8B,EAG9B+d,cAH8B,EAI9BpQ,qBAJ8B,EAK9BqQ,uBAL8B,EAM9BY,UAN8B,CAAhC;MAQA,OAAOL,UAAU,CAACrc,MAAD,CAAVqc,GACHrc,MADGqc,GACG7gB,aAEDwE,MAFC,EAEK;QACTgO,UAAU,EAAE,IADH;QAETmO,aAAa,EAAE;MAFN,CAFL,CADV;IAOD,CA7BD,CA6BE,OAAO1hB,CAAP,EAAU;MACV;MACA;MACA;MACA,IAAIoiB,oBAAoB,CAACpiB,CAAD,CAApBoiB,IAA2BR,UAAU,CAAC5hB,CAAC,CAACuF,MAAH,CAAzC,EAAqD;QACnD,IAAIvF,CAAC,CAACwL,IAAFxL,KAAW2B,UAAU,CAACR,KAA1B,EAAiC;UAC/B,MAAMnB,CAAC,CAACuF,MAAR;QACD;;QACD,OAAOvF,CAAC,CAACuF,MAAT;MACD,CATS,CAUV;MACA;;;MACA,IAAI8c,kBAAkB,CAACriB,CAAD,CAAtB,EAA2B;QACzB,OAAOA,CAAP;MACD;;MACD,MAAMA,CAAN;IACD;EACH;;EAEA,eAAekiB,MAAf,CACExJ,OADF,EAEErV,OAFF,EAGE0W,WAHF,EAIEqH,cAJF,EAKEpQ,qBALF,EAMEqQ,uBANF,EAOEiB,cAPF,EAOyB;IAEvB,IAAI/c,MAAJ;;IAEA,IAAI,CAACwU,WAAW,CAAChY,KAAZgY,CAAkB/d,MAAnB,IAA6B,CAAC+d,WAAW,CAAChY,KAAZgY,CAAkBpH,IAApD,EAA0D;MACxD,IAAIxR,KAAK,GAAGiR,sBAAsB,CAAC,GAAD,EAAM;QACtC6H,MAAM,EAAEvB,OAAO,CAACuB,MADsB;QAEtCrd,QAAQ,EAAE,IAAIS,GAAJ,CAAQqb,OAAO,CAACrZ,GAAhB,EAAqBzC,QAFO;QAGtCqc,OAAO,EAAEc,WAAW,CAAChY,KAAZgY,CAAkBxX;MAHW,CAAN,CAAlC;;MAKA,IAAI+f,cAAJ,EAAoB;QAClB,MAAMnhB,KAAN;MACD;;MACDoE,MAAM,GAAG;QACPiG,IAAI,EAAE7J,UAAU,CAACR,KADV;QAEPA;MAFO,CAAToE;IAID,CAbD,MAaO;MACL,IAAI2U,OAAO,GAAG,MAAMC,gBAAgB,CAClC,QADkC,EAElCzB,OAFkC,EAGlC,CAACqB,WAAD,CAHkC,EAIlC1W,OAJkC,EAKlCif,cALkC,EAMlClB,cANkC,EAOlCpQ,qBAPkC,CAApC;MASAzL,MAAM,GAAG2U,OAAO,CAACH,WAAW,CAAChY,KAAZgY,CAAkBxX,EAAnB,CAAhBgD;;MAEA,IAAImT,OAAO,CAACpM,MAARoM,CAAetL,OAAnB,EAA4B;QAC1BmV,8BAA8B,CAAC7J,OAAD,EAAU4J,cAAV,EAA0BlR,MAA1B,CAA9BmR;MACD;IACF;;IAED,IAAInI,gBAAgB,CAAC7U,MAAD,CAApB,EAA8B;MAC5B;MACA;MACA;MACA;MACA,MAAM,IAAI8F,QAAJ,CAAa,IAAb,EAAmB;QACvBL,MAAM,EAAEzF,MAAM,CAACsJ,QAAPtJ,CAAgByF,MADD;QAEvBC,OAAO,EAAE;UACPuX,QAAQ,EAAEjd,MAAM,CAACsJ,QAAPtJ,CAAgB0F,OAAhB1F,CAAwB4H,GAAxB5H,CAA4B,UAA5BA;QADH;MAFc,CAAnB,CAAN;IAMD;;IAED,IAAIgV,gBAAgB,CAAChV,MAAD,CAApB,EAA8B;MAC5B,IAAIpE,KAAK,GAAGiR,sBAAsB,CAAC,GAAD,EAAM;QAAE5G,IAAI,EAAE;MAAR,CAAN,CAAlC;;MACA,IAAI8W,cAAJ,EAAoB;QAClB,MAAMnhB,KAAN;MACD;;MACDoE,MAAM,GAAG;QACPiG,IAAI,EAAE7J,UAAU,CAACR,KADV;QAEPA;MAFO,CAAToE;IAID;;IAED,IAAI+c,cAAJ,EAAoB;MAClB;MACA;MACA,IAAIpJ,aAAa,CAAC3T,MAAD,CAAjB,EAA2B;QACzB,MAAMA,MAAM,CAACpE,KAAb;MACD;;MAED,OAAO;QACLkC,OAAO,EAAE,CAAC0W,WAAD,CADJ;QAELpW,UAAU,EAAE,EAFP;QAGL4P,UAAU,EAAE;UAAE,CAACwG,WAAW,CAAChY,KAAZgY,CAAkBxX,EAAnB,GAAwBgD,MAAM,CAAC1B;QAAjC,CAHP;QAILgP,MAAM,EAAE,IAJH;QAKL;QACA;QACA2O,UAAU,EAAE,GAPP;QAQLC,aAAa,EAAE,EARV;QASLC,aAAa,EAAE,EATV;QAUL5M,eAAe,EAAE;MAVZ,CAAP;IAYD,CA7EsB,CA+EvB;;;IACA,IAAI2N,aAAa,GAAG,IAAIC,OAAJ,CAAYhK,OAAO,CAACrZ,GAApB,EAAyB;MAC3C4L,OAAO,EAAEyN,OAAO,CAACzN,OAD0B;MAE3C0D,QAAQ,EAAE+J,OAAO,CAAC/J,QAFyB;MAG3CrC,MAAM,EAAEoM,OAAO,CAACpM;IAH2B,CAAzB,CAApB;;IAMA,IAAI4M,aAAa,CAAC3T,MAAD,CAAjB,EAA2B;MACzB;MACA;MACA,IAAIiV,aAAa,GAAG6G,uBAAuB,GACvCtH,WADuC,GAEvClB,mBAAmB,CAACxV,OAAD,EAAU0W,WAAW,CAAChY,KAAZgY,CAAkBxX,EAA5B,CAFvB;MAIA,IAAIogB,OAAO,GAAG,MAAMR,aAAa,CAC/BM,aAD+B,EAE/Bpf,OAF+B,EAG/B+d,cAH+B,EAI/BpQ,qBAJ+B,EAK/BqQ,uBAL+B,EAM/B,IAN+B,EAO/B,CAAC7G,aAAa,CAACzY,KAAdyY,CAAoBjY,EAArB,EAAyBgD,MAAzB,CAP+B,CAAjC,CAPyB,CAiBzB;;MACA,oBACKod,OADL,EACY;QACVnB,UAAU,EAAEvS,oBAAoB,CAAC1J,MAAM,CAACpE,KAAR,CAApB8N,GACR1J,MAAM,CAACpE,KAAPoE,CAAayF,MADLiE,GAER1J,MAAM,CAACic,UAAPjc,IAAqB,IAArBA,GACAA,MAAM,CAACic,UADPjc,GAEA,GALM;QAMVgO,UAAU,EAAE,IANF;QAOVmO,aAAa,eACPnc,MAAM,CAAC0F,OAAP1F,GAAiB;UAAE,CAACwU,WAAW,CAAChY,KAAZgY,CAAkBxX,EAAnB,GAAwBgD,MAAM,CAAC0F;QAAjC,CAAjB1F,GAA8D,EADvD;MAPH,CADZ;IAYD;;IAED,IAAIod,OAAO,GAAG,MAAMR,aAAa,CAC/BM,aAD+B,EAE/Bpf,OAF+B,EAG/B+d,cAH+B,EAI/BpQ,qBAJ+B,EAK/BqQ,uBAL+B,EAM/B,IAN+B,CAAjC;IASA,oBACKsB,OADL,EACY;MACVpP,UAAU,EAAE;QACV,CAACwG,WAAW,CAAChY,KAAZgY,CAAkBxX,EAAnB,GAAwBgD,MAAM,CAAC1B;MADrB;IADF,CADZ,EAMM0B,MAAM,CAACic,UAAPjc,GAAoB;MAAEic,UAAU,EAAEjc,MAAM,CAACic;IAArB,CAApBjc,GAAwD,EAN9D,EAMgE;MAC9Dmc,aAAa,EAAEnc,MAAM,CAAC0F,OAAP1F,GACX;QAAE,CAACwU,WAAW,CAAChY,KAAZgY,CAAkBxX,EAAnB,GAAwBgD,MAAM,CAAC0F;MAAjC,CADW1F,GAEX;IAH0D,CANhE;EAWF;;EAEA,eAAe4c,aAAf,CACEzJ,OADF,EAEErV,OAFF,EAGE+d,cAHF,EAIEpQ,qBAJF,EAKEqQ,uBALF,EAMEY,UANF,EAOErJ,mBAPF,EAO2C;IAQzC,IAAI0J,cAAc,GAAGL,UAAU,IAAI,IAAnC,CARyC,CAUzC;;IACA,IACEK,cAAc,IACd,EAACL,UAAU,IAAVA,kBAAU,CAAElgB,KAAZkgB,CAAkBrP,MAAnB,CADA0P,IAEA,EAACL,UAAU,IAAVA,kBAAU,CAAElgB,KAAZkgB,CAAkBtP,IAAnB,CAHF,EAIE;MACA,MAAMP,sBAAsB,CAAC,GAAD,EAAM;QAChC6H,MAAM,EAAEvB,OAAO,CAACuB,MADgB;QAEhCrd,QAAQ,EAAE,IAAIS,GAAJ,CAAQqb,OAAO,CAACrZ,GAAhB,EAAqBzC,QAFC;QAGhCqc,OAAO,EAAEgJ,UAAU,QAAVA,GAAU,MAAVA,aAAU,CAAElgB,KAAZkgB,CAAkB1f;MAHK,CAAN,CAA5B;IAKD;;IAED,IAAIia,cAAc,GAAGyF,UAAU,GAC3B,CAACA,UAAD,CAD2B,GAE3BrJ,mBAAmB,IAAIM,aAAa,CAACN,mBAAmB,CAAC,CAAD,CAApB,CAApCA,GACAgK,6BAA6B,CAACvf,OAAD,EAAUuV,mBAAmB,CAAC,CAAD,CAA7B,CAD7BA,GAEAvV,OAJJ;IAKA,IAAIwX,aAAa,GAAG2B,cAAc,CAACjW,MAAfiW,CACjB9J,CAAC,IAAKA,CAAC,CAAC3Q,KAAF2Q,CAAQE,MAARF,IAAkBA,CAAC,CAAC3Q,KAAF2Q,CAAQC,IADf6J,CAApB,CA5ByC,CAgCzC;;IACA,IAAI3B,aAAa,CAAC9e,MAAd8e,KAAyB,CAA7B,EAAgC;MAC9B,OAAO;QACLxX,OADK;QAEL;QACAM,UAAU,EAAEN,OAAO,CAACmD,MAARnD,CACV,CAACkJ,GAAD,EAAMmG,CAAN,KAAYvL,MAAM,CAAC7F,MAAP6F,CAAcoF,GAAdpF,EAAmB;UAAE,CAACuL,CAAC,CAAC3Q,KAAF2Q,CAAQnQ,EAAT,GAAc;QAAhB,CAAnB4E,CADF9D,EAEV,EAFUA,CAHP;QAOLwP,MAAM,EACJ+F,mBAAmB,IAAIM,aAAa,CAACN,mBAAmB,CAAC,CAAD,CAApB,CAApCA,GACI;UACE,CAACA,mBAAmB,CAAC,CAAD,CAApB,GAA0BA,mBAAmB,CAAC,CAAD,CAAnBA,CAAuBzX;QADnD,CADJyX,GAII,IAZD;QAaL4I,UAAU,EAAE,GAbP;QAcLC,aAAa,EAAE,EAdV;QAeL3M,eAAe,EAAE;MAfZ,CAAP;IAiBD;;IAED,IAAIoF,OAAO,GAAG,MAAMC,gBAAgB,CAClC,QADkC,EAElCzB,OAFkC,EAGlCmC,aAHkC,EAIlCxX,OAJkC,EAKlCif,cALkC,EAMlClB,cANkC,EAOlCpQ,qBAPkC,CAApC;;IAUA,IAAI0H,OAAO,CAACpM,MAARoM,CAAetL,OAAnB,EAA4B;MAC1BmV,8BAA8B,CAAC7J,OAAD,EAAU4J,cAAV,EAA0BlR,MAA1B,CAA9BmR;IACD,CAjEwC,CAmEzC;;;IACA,IAAIzN,eAAe,GAAG,IAAIrB,GAAJ,EAAtB;IACA,IAAIkP,OAAO,GAAGE,sBAAsB,CAClCxf,OADkC,EAElC6W,OAFkC,EAGlCtB,mBAHkC,EAIlC9D,eAJkC,EAKlCuM,uBALkC,CAApC,CArEyC,CA6EzC;;IACA,IAAIyB,eAAe,GAAG,IAAIjhB,GAAJ,CACpBgZ,aAAa,CAACrf,GAAdqf,CAAmBnX,KAAK,IAAKA,KAAK,CAAC3B,KAAN2B,CAAYnB,EAAzCsY,CADoB,CAAtB;IAGAxX,OAAO,CAACqB,OAARrB,CAAiBK,KAAK,IAAI;MACxB,IAAI,CAACof,eAAe,CAAC3X,GAAhB2X,CAAoBpf,KAAK,CAAC3B,KAAN2B,CAAYnB,EAAhCugB,CAAL,EAA0C;QACxCH,OAAO,CAAChf,UAARgf,CAAmBjf,KAAK,CAAC3B,KAAN2B,CAAYnB,EAA/BogB,IAAqC,IAArCA;MACD;IACF,CAJDtf;IAMA,oBACKsf,OADL,EACY;MACVtf,OADU;MAEVyR,eAAe,EACbA,eAAe,CAAC7G,IAAhB6G,GAAuB,CAAvBA,GACI3N,MAAM,CAAC4b,WAAP5b,CAAmB2N,eAAe,CAACvZ,OAAhBuZ,EAAnB3N,CADJ2N,GAEI;IALI,CADZ;EAQF,CAtiBiC,CAwiBjC;EACA;;;EACA,eAAeqF,gBAAf,CACE3O,IADF,EAEEkN,OAFF,EAGEmC,aAHF,EAIExX,OAJF,EAKEif,cALF,EAMElB,cANF,EAOEpQ,qBAPF,EAOoD;IAElD,IAAIkJ,OAAO,GAAG,MAAM6D,oBAAoB,CACtC/M,qBAAqB,IAAIC,mBADa,EAEtCzF,IAFsC,EAGtC,IAHsC,EAItCkN,OAJsC,EAKtCmC,aALsC,EAMtCxX,OANsC,EAOtC,IAPsC,EAQtCjB,QARsC,EAStCF,kBATsC,EAUtCkf,cAVsC,CAAxC;IAaA,IAAItD,WAAW,GAA+B,EAA9C;IACA,MAAM9R,OAAO,CAACuS,GAARvS,CACJ3I,OAAO,CAAC7H,GAAR6H,CAAY,MAAOK,KAAP,IAAgB;MAC1B,IAAI,EAAEA,KAAK,CAAC3B,KAAN2B,CAAYnB,EAAZmB,IAAkBwW,OAApB,CAAJ,EAAkC;QAChC;MACD;;MACD,IAAI3U,MAAM,GAAG2U,OAAO,CAACxW,KAAK,CAAC3B,KAAN2B,CAAYnB,EAAb,CAApB;;MACA,IAAIyb,kCAAkC,CAACzY,MAAD,CAAtC,EAAgD;QAC9C,IAAIsJ,QAAQ,GAAGtJ,MAAM,CAACA,MAAtB,CAD8C,CAE9C;;QACA,MAAM0Y,wCAAwC,CAC5CpP,QAD4C,EAE5C6J,OAF4C,EAG5ChV,KAAK,CAAC3B,KAAN2B,CAAYnB,EAHgC,EAI5Cc,OAJ4C,EAK5CP,QAL4C,EAM5CsO,MAAM,CAACvH,oBANqC,CAA9C;MAQD;;MACD,IAAI+X,UAAU,CAACrc,MAAM,CAACA,MAAR,CAAVqc,IAA6BU,cAAjC,EAAiD;QAC/C;QACA;QACA,MAAM/c,MAAN;MACD;;MAEDuY,WAAW,CAACpa,KAAK,CAAC3B,KAAN2B,CAAYnB,EAAb,CAAXub,GACE,MAAMI,qCAAqC,CAAC3Y,MAAD,CAD7CuY;IAED,CAzBDza,CADI2I,CAAN;IA4BA,OAAO8R,WAAP;EACF;;EAEA,OAAO;IACLjN,UADK;IAELqQ,KAFK;IAGLW;EAHK,CAAP;AAKF,C,CAEA;AAEA;AACA;AACA;;AAEA;;;AAGG;;;SACamB,0BACd/gB,QACA0gB,SACAxhB,OAAU;EAEV,IAAI8hB,UAAU,gBACTN,OADS,EACF;IACVnB,UAAU,EAAEvS,oBAAoB,CAAC9N,KAAD,CAApB8N,GAA8B9N,KAAK,CAAC6J,MAApCiE,GAA6C,GAD/C;IAEV4D,MAAM,EAAE;MACN,CAAC8P,OAAO,CAACO,0BAARP,IAAsC1gB,MAAM,CAAC,CAAD,CAANA,CAAUM,EAAjD,GAAsDpB;IADhD;EAFE,CADE,CAAd;;EAOA,OAAO8hB,UAAP;AACF;;AAEA,SAASV,8BAAT,CACE7J,OADF,EAEE4J,cAFF,EAGElR,MAHF,EAGmC;EAEjC,IAAIA,MAAM,CAAC6P,mBAAP7P,IAA8BsH,OAAO,CAACpM,MAARoM,CAAeyK,MAAfzK,KAA0B7c,SAA5D,EAAuE;IACrE,MAAM6c,OAAO,CAACpM,MAARoM,CAAeyK,MAArB;EACD;;EAED,IAAIlJ,MAAM,GAAGqI,cAAc,GAAG,YAAH,GAAkB,OAA7C;EACA,MAAM,IAAI1iB,KAAJ,CAAaqa,MAAM,GAAoBvB,mBAA1BuB,GAA0BvB,OAAO,CAACuB,MAAlCA,GAA4CvB,GAA5CuB,GAA4CvB,OAAO,CAACrZ,GAAjE,CAAN;AACF;;AAEA,SAAS+jB,sBAAT,CACEjN,IADF,EACkC;EAEhC,OACEA,IAAI,IAAI,IAARA,KACE,cAAcA,IAAd,IAAsBA,IAAI,CAACvG,QAALuG,IAAiB,IAAvC,IACC,UAAUA,IAAV,IAAkBA,IAAI,CAACkN,IAALlN,KAActa,SAFnCsa,CADF;AAKF;;AAEA,SAASoB,WAAT,CACE7a,QADF,EAEE2G,OAFF,EAGEP,QAHF,EAIEwgB,eAJF,EAKE9mB,EALF,EAMEqN,oBANF,EAOE2N,WAPF,EAQEC,QARF,EAQgC;EAE9B,IAAI8L,iBAAJ;EACA,IAAIC,gBAAJ;;EACA,IAAIhM,WAAJ,EAAiB;IACf;IACA;IACA+L,iBAAiB,GAAG,EAApBA;;IACA,KAAK,IAAI7f,KAAT,IAAkBL,OAAlB,EAA2B;MACzBkgB,iBAAiB,CAAC5lB,IAAlB4lB,CAAuB7f,KAAvB6f;;MACA,IAAI7f,KAAK,CAAC3B,KAAN2B,CAAYnB,EAAZmB,KAAmB8T,WAAvB,EAAoC;QAClCgM,gBAAgB,GAAG9f,KAAnB8f;QACA;MACD;IACF;EACF,CAXD,MAWO;IACLD,iBAAiB,GAAGlgB,OAApBkgB;IACAC,gBAAgB,GAAGngB,OAAO,CAACA,OAAO,CAACtH,MAARsH,GAAiB,CAAlB,CAA1BmgB;EACD,CAlB6B,CAoB9B;;;EACA,IAAIjmB,IAAI,GAAGwM,SAAS,CAClBvN,EAAE,GAAGA,EAAH,GAAQ,GADQ,EAElBinB,mBAAmB,CAACF,iBAAD,EAAoB1Z,oBAApB,CAFD,EAGlB5G,aAAa,CAACvG,QAAQ,CAACE,QAAV,EAAoBkG,QAApB,CAAbG,IAA8CvG,QAAQ,CAACE,QAHrC,EAIlB6a,QAAQ,KAAK,MAJK,CAApB,CArB8B,CA4B9B;EACA;EACA;;EACA,IAAIjb,EAAE,IAAI,IAAV,EAAgB;IACde,IAAI,CAACE,MAALF,GAAcb,QAAQ,CAACe,MAAvBF;IACAA,IAAI,CAACG,IAALH,GAAYb,QAAQ,CAACgB,IAArBH;EACD,CAlC6B,CAoC9B;;;EACA,IACE,CAACf,EAAE,IAAI,IAANA,IAAcA,EAAE,KAAK,EAArBA,IAA2BA,EAAE,KAAK,GAAnC,KACAgnB,gBADA,IAEAA,gBAAgB,CAACzhB,KAAjByhB,CAAuB9nB,KAFvB,IAGA,CAACgoB,kBAAkB,CAACnmB,IAAI,CAACE,MAAN,CAJrB,EAKE;IACAF,IAAI,CAACE,MAALF,GAAcA,IAAI,CAACE,MAALF,GACVA,IAAI,CAACE,MAALF,CAAYS,OAAZT,CAAoB,KAApBA,EAA2B,SAA3BA,CADUA,GAEV,QAFJA;EAGD,CA9C6B,CAgD9B;EACA;EACA;EACA;;;EACA,IAAI+lB,eAAe,IAAIxgB,QAAQ,KAAK,GAApC,EAAyC;IACvCvF,IAAI,CAACX,QAALW,GACEA,IAAI,CAACX,QAALW,KAAkB,GAAlBA,GAAwBuF,QAAxBvF,GAAmC8G,SAAS,CAAC,CAACvB,QAAD,EAAWvF,IAAI,CAACX,QAAhB,CAAD,CAD9CW;EAED;;EAED,OAAOL,UAAU,CAACK,IAAD,CAAjB;AACF,C,CAEA;AACA;;;AACA,SAASoa,wBAAT,CACEgM,mBADF,EAEEC,SAFF,EAGErmB,IAHF,EAIE4Y,IAJF,EAImC;EAMjC;EACA,IAAI,CAACA,IAAD,IAAS,CAACiN,sBAAsB,CAACjN,IAAD,CAApC,EAA4C;IAC1C,OAAO;MAAE5Y;IAAF,CAAP;EACD;;EAED,IAAI4Y,IAAI,CAAC1G,UAAL0G,IAAmB,CAACmL,aAAa,CAACnL,IAAI,CAAC1G,UAAN,CAArC,EAAwD;IACtD,OAAO;MACLlS,IADK;MAEL4D,KAAK,EAAEiR,sBAAsB,CAAC,GAAD,EAAM;QAAE6H,MAAM,EAAE9D,IAAI,CAAC1G;MAAf,CAAN;IAFxB,CAAP;EAID;;EAED,IAAIoU,mBAAmB,GAAGA,OAAO;IAC/BtmB,IAD+B;IAE/B4D,KAAK,EAAEiR,sBAAsB,CAAC,GAAD,EAAM;MAAE5G,IAAI,EAAE;IAAR,CAAN;EAFE,CAAPqY,CAA1B,CAlBiC,CAuBjC;;;EACA,IAAIC,aAAa,GAAG3N,IAAI,CAAC1G,UAAL0G,IAAmB,KAAvC;EACA,IAAI1G,UAAU,GAAGkU,mBAAmB,GAC/BG,aAAa,CAACC,WAAdD,EAD+B,GAE/BA,aAAa,CAACjb,WAAdib,EAFL;EAGA,IAAIpU,UAAU,GAAGsU,iBAAiB,CAACzmB,IAAD,CAAlC;;EAEA,IAAI4Y,IAAI,CAACkN,IAALlN,KAActa,SAAlB,EAA6B;IAC3B,IAAIsa,IAAI,CAACxG,WAALwG,KAAqB,YAAzB,EAAuC;MACrC;MACA,IAAI,CAACW,gBAAgB,CAACrH,UAAD,CAArB,EAAmC;QACjC,OAAOoU,mBAAmB,EAA1B;MACD;;MAED,IAAIhU,IAAI,GACN,OAAOsG,IAAI,CAACkN,IAAZ,KAAqB,QAArB,GACIlN,IAAI,CAACkN,IADT,GAEIlN,IAAI,CAACkN,IAALlN,YAAqB8N,QAArB9N,IACAA,IAAI,CAACkN,IAALlN,YAAqB+N,eADrB/N,GAEA;MACAvK,KAAK,CAACvB,IAANuB,CAAWuK,IAAI,CAACkN,IAALlN,CAAU5a,OAAV4a,EAAXvK,EAAgCpF,MAAhCoF,CACE,CAACW,GAAD,EAAI4X,KAAJ,KAAI;QAAA,IAAE,CAAC9iB,IAAD,EAAO3B,KAAP,IAAaykB,KAAf;QAAe,YAAQ5X,GAAR,GAAclL,IAAd,GAAkB,GAAlB,GAAsB3B,KAAtB,GAA2B,IAA3B;MAA+B,CADpDkM,EAEE,EAFFA,CAHAuK,GAOA7T,MAAM,CAAC6T,IAAI,CAACkN,IAAN,CAVZ;MAYA,OAAO;QACL9lB,IADK;QAELma,UAAU,EAAE;UACVjI,UADU;UAEVC,UAFU;UAGVC,WAAW,EAAEwG,IAAI,CAACxG,WAHR;UAIVC,QAAQ,EAAE/T,SAJA;UAKVgP,IAAI,EAAEhP,SALI;UAMVgU;QANU;MAFP,CAAP;IAWD,CA7BD,MA6BO,IAAIsG,IAAI,CAACxG,WAALwG,KAAqB,kBAAzB,EAA6C;MAClD;MACA,IAAI,CAACW,gBAAgB,CAACrH,UAAD,CAArB,EAAmC;QACjC,OAAOoU,mBAAmB,EAA1B;MACD;;MAED,IAAI;QACF,IAAIhZ,IAAI,GACN,OAAOsL,IAAI,CAACkN,IAAZ,KAAqB,QAArB,GAAgCtmB,IAAI,CAACqnB,KAALrnB,CAAWoZ,IAAI,CAACkN,IAAhBtmB,CAAhC,GAAwDoZ,IAAI,CAACkN,IAD/D;QAGA,OAAO;UACL9lB,IADK;UAELma,UAAU,EAAE;YACVjI,UADU;YAEVC,UAFU;YAGVC,WAAW,EAAEwG,IAAI,CAACxG,WAHR;YAIVC,QAAQ,EAAE/T,SAJA;YAKVgP,IALU;YAMVgF,IAAI,EAAEhU;UANI;QAFP,CAAP;MAWD,CAfD,CAeE,OAAOmE,CAAP,EAAU;QACV,OAAO6jB,mBAAmB,EAA1B;MACD;IACF;EACF;;EAEDriB,SAAS,CACP,OAAOyiB,QAAP,KAAoB,UADb,EAEP,+CAFO,CAATziB;EAKA,IAAI6iB,YAAJ;EACA,IAAIzU,QAAJ;;EAEA,IAAIuG,IAAI,CAACvG,QAAT,EAAmB;IACjByU,YAAY,GAAGC,6BAA6B,CAACnO,IAAI,CAACvG,QAAN,CAA5CyU;IACAzU,QAAQ,GAAGuG,IAAI,CAACvG,QAAhBA;EACD,CAHD,MAGO,IAAIuG,IAAI,CAACkN,IAALlN,YAAqB8N,QAAzB,EAAmC;IACxCI,YAAY,GAAGC,6BAA6B,CAACnO,IAAI,CAACkN,IAAN,CAA5CgB;IACAzU,QAAQ,GAAGuG,IAAI,CAACkN,IAAhBzT;EACD,CAHM,MAGA,IAAIuG,IAAI,CAACkN,IAALlN,YAAqB+N,eAAzB,EAA0C;IAC/CG,YAAY,GAAGlO,IAAI,CAACkN,IAApBgB;IACAzU,QAAQ,GAAG2U,6BAA6B,CAACF,YAAD,CAAxCzU;EACD,CAHM,MAGA,IAAIuG,IAAI,CAACkN,IAALlN,IAAa,IAAjB,EAAuB;IAC5BkO,YAAY,GAAG,IAAIH,eAAJ,EAAfG;IACAzU,QAAQ,GAAG,IAAIqU,QAAJ,EAAXrU;EACD,CAHM,MAGA;IACL,IAAI;MACFyU,YAAY,GAAG,IAAIH,eAAJ,CAAoB/N,IAAI,CAACkN,IAAzB,CAAfgB;MACAzU,QAAQ,GAAG2U,6BAA6B,CAACF,YAAD,CAAxCzU;IACD,CAHD,CAGE,OAAO5P,CAAP,EAAU;MACV,OAAO6jB,mBAAmB,EAA1B;IACD;EACF;;EAED,IAAInM,UAAU,GAAe;IAC3BjI,UAD2B;IAE3BC,UAF2B;IAG3BC,WAAW,EACRwG,IAAI,IAAIA,IAAI,CAACxG,WAAbwG,IAA6B,mCAJL;IAK3BvG,QAL2B;IAM3B/E,IAAI,EAAEhP,SANqB;IAO3BgU,IAAI,EAAEhU;EAPqB,CAA7B;;EAUA,IAAIib,gBAAgB,CAACY,UAAU,CAACjI,UAAZ,CAApB,EAA6C;IAC3C,OAAO;MAAElS,IAAF;MAAQma;IAAR,CAAP;EACD,CAhIgC,CAkIjC;;;EACA,IAAIlX,UAAU,GAAGhD,SAAS,CAACD,IAAD,CAA1B,CAnIiC,CAoIjC;EACA;EACA;;EACA,IAAIqmB,SAAS,IAAIpjB,UAAU,CAAC/C,MAAxBmmB,IAAkCF,kBAAkB,CAACljB,UAAU,CAAC/C,MAAZ,CAAxD,EAA6E;IAC3E4mB,YAAY,CAACG,MAAbH,CAAoB,OAApBA,EAA6B,EAA7BA;EACD;;EACD7jB,UAAU,CAAC/C,MAAX+C,GAAiB,MAAO6jB,YAAxB7jB;EAEA,OAAO;IAAEjD,IAAI,EAAEL,UAAU,CAACsD,UAAD,CAAlB;IAAgCkX;EAAhC,CAAP;AACF,C,CAEA;AACA;;;AACA,SAASkL,6BAAT,CACEvf,OADF,EAEEuW,UAFF,EAEoB;EAElB,IAAI6K,eAAe,GAAGphB,OAAtB;;EACA,IAAIuW,UAAJ,EAAgB;IACd,IAAIle,KAAK,GAAG2H,OAAO,CAAC2P,SAAR3P,CAAmBqP,CAAC,IAAKA,CAAC,CAAC3Q,KAAF2Q,CAAQnQ,EAARmQ,KAAekH,UAAxCvW,CAAZ;;IACA,IAAI3H,KAAK,IAAI,CAAb,EAAgB;MACd+oB,eAAe,GAAGphB,OAAO,CAAC7D,KAAR6D,CAAc,CAAdA,EAAiB3H,KAAjB2H,CAAlBohB;IACD;EACF;;EACD,OAAOA,eAAP;AACF;;AAEA,SAAS1J,gBAAT,CACE5d,OADF,EAEEvB,KAFF,EAGEyH,OAHF,EAIEqU,UAJF,EAKEhb,QALF,EAMEgoB,aANF,EAOEC,2BAPF,EAQExQ,sBARF,EASEC,uBATF,EAUEC,qBAVF,EAWEQ,eAXF,EAYEF,gBAZF,EAaED,gBAbF,EAcE2D,WAdF,EAeEvV,QAfF,EAgBE8V,mBAhBF,EAgB2C;EAEzC,IAAIE,YAAY,GAAGF,mBAAmB,GAClCM,aAAa,CAACN,mBAAmB,CAAC,CAAD,CAApB,CAAbM,GACEN,mBAAmB,CAAC,CAAD,CAAnBA,CAAuBzX,KADzB+X,GAEEN,mBAAmB,CAAC,CAAD,CAAnBA,CAAuB/U,IAHS,GAIlChI,SAJJ;EAKA,IAAI+oB,UAAU,GAAGznB,OAAO,CAACC,SAARD,CAAkBvB,KAAK,CAACc,QAAxBS,CAAjB;EACA,IAAI0nB,OAAO,GAAG1nB,OAAO,CAACC,SAARD,CAAkBT,QAAlBS,CAAd,CARyC,CAUzC;;EACA,IAAIyc,UAAU,GACZhB,mBAAmB,IAAIM,aAAa,CAACN,mBAAmB,CAAC,CAAD,CAApB,CAApCA,GACIA,mBAAmB,CAAC,CAAD,CADvBA,GAEI/c,SAHN;EAIA,IAAI4oB,eAAe,GAAG7K,UAAU,GAC5BgJ,6BAA6B,CAACvf,OAAD,EAAUuW,UAAV,CADD,GAE5BvW,OAFJ,CAfyC,CAmBzC;EACA;EACA;;EACA,IAAIyhB,YAAY,GAAGlM,mBAAmB,GAClCA,mBAAmB,CAAC,CAAD,CAAnBA,CAAuB4I,UADW,GAElC3lB,SAFJ;EAGA,IAAIkpB,sBAAsB,GACxBJ,2BAA2B,IAAIG,YAA/BH,IAA+CG,YAAY,IAAI,GADjE;EAGA,IAAIE,iBAAiB,GAAGP,eAAe,CAACle,MAAhBke,CAAuB,CAAC/gB,KAAD,EAAQhI,KAAR,KAAiB;IAC9D,IAAI;MAAEqG;IAAF,IAAY2B,KAAhB;;IACA,IAAI3B,KAAK,CAAC4Q,IAAV,EAAgB;MACd;MACA,OAAO,IAAP;IACD;;IAED,IAAI5Q,KAAK,CAAC6Q,MAAN7Q,IAAgB,IAApB,EAA0B;MACxB,OAAO,KAAP;IACD;;IAED,IAAI2iB,aAAJ,EAAmB;MACjB,IAAI,OAAO3iB,KAAK,CAAC6Q,MAAb,KAAwB,UAAxB,IAAsC7Q,KAAK,CAAC6Q,MAAN7Q,CAAagR,OAAvD,EAAgE;QAC9D,OAAO,IAAP;MACD;;MACD,OACEnX,KAAK,CAAC+H,UAAN/H,CAAiBmG,KAAK,CAACQ,EAAvB3G,MAA+BC,SAA/BD,MACA;MACC,CAACA,KAAK,CAACiX,MAAP,IAAiBjX,KAAK,CAACiX,MAANjX,CAAamG,KAAK,CAACQ,EAAnB3G,MAA2BC,SAF7CD,CADF;IAKD,CApB6D,CAsB9D;;;IACA,IACEqpB,WAAW,CAACrpB,KAAK,CAAC+H,UAAP,EAAmB/H,KAAK,CAACyH,OAANzH,CAAcF,KAAdE,CAAnB,EAAyC8H,KAAzC,CAAXuhB,IACA7Q,uBAAuB,CAAC9N,IAAxB8N,CAA8B7R,EAAE,IAAKA,EAAE,KAAKmB,KAAK,CAAC3B,KAAN2B,CAAYnB,EAAxD6R,CAFF,EAGE;MACA,OAAO,IAAP;IACD,CA5B6D,CA8B9D;IACA;IACA;IACA;;;IACA,IAAI8Q,iBAAiB,GAAGtpB,KAAK,CAACyH,OAANzH,CAAcF,KAAdE,CAAxB;IACA,IAAIupB,cAAc,GAAGzhB,KAArB;IAEA,OAAO0hB,sBAAsB,CAAC1hB,KAAD,EAAM3C;MACjC6jB,UADiC;MAEjCS,aAAa,EAAEH,iBAAiB,CAACthB,MAFA;MAGjCihB,OAHiC;MAIjCS,UAAU,EAAEH,cAAc,CAACvhB;IAJM,GAK9B8T,UAL8B,EAKpB;MACboB,YADa;MAEbgM,YAFa;MAGbS,uBAAuB,EAAER,sBAAsB,GAC3C,KAD2C,GAE3C;MACA5Q,sBAAsB,IACtByQ,UAAU,CAAChoB,QAAXgoB,GAAsBA,UAAU,CAACnnB,MAAjCmnB,KACEC,OAAO,CAACjoB,QAARioB,GAAmBA,OAAO,CAACpnB,MAF7B0W,IAGA;MACAyQ,UAAU,CAACnnB,MAAXmnB,KAAsBC,OAAO,CAACpnB,MAJ9B0W,IAKAqR,kBAAkB,CAACN,iBAAD,EAAoBC,cAApB;IAXT,CALoB,CAAN,CAA7B;EAkBD,CAvDuBV,CAAxB,CA5ByC,CAqFzC;;EACA,IAAI3J,oBAAoB,GAA0B,EAAlD;EACAnG,gBAAgB,CAACjQ,OAAjBiQ,CAAyB,CAAC6G,CAAD,EAAI/e,GAAJ,KAAW;IAClC;IACA;IACA;IACA;IACA;IACA,IACEioB,aAAa,IACb,CAACrhB,OAAO,CAACiD,IAARjD,CAAcqP,CAAC,IAAKA,CAAC,CAAC3Q,KAAF2Q,CAAQnQ,EAARmQ,KAAe8I,CAAC,CAACvC,OAArC5V,CADDqhB,IAEA7P,eAAe,CAAC1J,GAAhB0J,CAAoBpY,GAApBoY,CAHF,EAIE;MACA;IACD;;IAED,IAAI4Q,cAAc,GAAG7iB,WAAW,CAACyV,WAAD,EAAcmD,CAAC,CAACje,IAAhB,EAAsBuF,QAAtB,CAAhC,CAdkC,CAgBlC;IACA;IACA;IACA;;IACA,IAAI,CAAC2iB,cAAL,EAAqB;MACnB3K,oBAAoB,CAACnd,IAArBmd,CAA0B;QACxBre,GADwB;QAExBwc,OAAO,EAAEuC,CAAC,CAACvC,OAFa;QAGxB1b,IAAI,EAAEie,CAAC,CAACje,IAHgB;QAIxB8F,OAAO,EAAE,IAJe;QAKxBK,KAAK,EAAE,IALiB;QAMxBwI,UAAU,EAAE;MANY,CAA1B4O;MAQA;IACD,CA9BiC,CAgClC;IACA;IACA;;;IACA,IAAIxE,OAAO,GAAG1a,KAAK,CAAC4X,QAAN5X,CAAeuR,GAAfvR,CAAmBa,GAAnBb,CAAd;IACA,IAAI8pB,YAAY,GAAG1L,cAAc,CAACyL,cAAD,EAAiBjK,CAAC,CAACje,IAAnB,CAAjC;IAEA,IAAIooB,gBAAgB,GAAG,KAAvB;;IACA,IAAIjR,gBAAgB,CAACvJ,GAAjBuJ,CAAqBjY,GAArBiY,CAAJ,EAA+B;MAC7B;MACAiR,gBAAgB,GAAG,KAAnBA;IACD,CAHD,MAGO,IAAItR,qBAAqB,CAAClJ,GAAtBkJ,CAA0B5X,GAA1B4X,CAAJ,EAAoC;MACzC;MACAA,qBAAqB,CAAChH,MAAtBgH,CAA6B5X,GAA7B4X;MACAsR,gBAAgB,GAAG,IAAnBA;IACD,CAJM,MAIA,IACLrP,OAAO,IACPA,OAAO,CAAC1a,KAAR0a,KAAkB,MADlBA,IAEAA,OAAO,CAACzS,IAARyS,KAAiBza,SAHZ,EAIL;MACA;MACA;MACA;MACA8pB,gBAAgB,GAAGxR,sBAAnBwR;IACD,CATM,MASA;MACL;MACA;MACAA,gBAAgB,GAAGP,sBAAsB,CAACM,YAAD,EAAa3kB;QACpD6jB,UADoD;QAEpDS,aAAa,EAAEzpB,KAAK,CAACyH,OAANzH,CAAcA,KAAK,CAACyH,OAANzH,CAAcG,MAAdH,GAAuB,CAArCA,EAAwCgI,MAFH;QAGpDihB,OAHoD;QAIpDS,UAAU,EAAEjiB,OAAO,CAACA,OAAO,CAACtH,MAARsH,GAAiB,CAAlB,CAAPA,CAA4BO;MAJY,GAKjD8T,UALiD,EAKvC;QACboB,YADa;QAEbgM,YAFa;QAGbS,uBAAuB,EAAER,sBAAsB,GAC3C,KAD2C,GAE3C5Q;MALS,CALuC,CAAb,CAAzCwR;IAYD;;IAED,IAAIA,gBAAJ,EAAsB;MACpB7K,oBAAoB,CAACnd,IAArBmd,CAA0B;QACxBre,GADwB;QAExBwc,OAAO,EAAEuC,CAAC,CAACvC,OAFa;QAGxB1b,IAAI,EAAEie,CAAC,CAACje,IAHgB;QAIxB8F,OAAO,EAAEoiB,cAJe;QAKxB/hB,KAAK,EAAEgiB,YALiB;QAMxBxZ,UAAU,EAAE,IAAIC,eAAJ;MANY,CAA1B2O;IAQD;EACF,CAlFDnG;EAoFA,OAAO,CAACqQ,iBAAD,EAAoBlK,oBAApB,CAAP;AACF;;AAEA,SAASmK,WAAT,CACEW,iBADF,EAEEC,YAFF,EAGEniB,KAHF,EAG+B;EAE7B,IAAIoiB,KAAK,GACP;EACA,CAACD,YAAD,IACA;EACAniB,KAAK,CAAC3B,KAAN2B,CAAYnB,EAAZmB,KAAmBmiB,YAAY,CAAC9jB,KAAb8jB,CAAmBtjB,EAJxC,CAF6B,CAQ7B;EACA;;EACA,IAAIwjB,aAAa,GAAGH,iBAAiB,CAACliB,KAAK,CAAC3B,KAAN2B,CAAYnB,EAAb,CAAjBqjB,KAAsC/pB,SAA1D,CAV6B,CAY7B;;EACA,OAAOiqB,KAAK,IAAIC,aAAhB;AACF;;AAEA,SAASP,kBAAT,CACEK,YADF,EAEEniB,KAFF,EAE+B;EAE7B,IAAIsiB,WAAW,GAAGH,YAAY,CAAC9jB,KAAb8jB,CAAmBtoB,IAArC;EACA,OACE;IACAsoB,YAAY,CAACjpB,QAAbipB,KAA0BniB,KAAK,CAAC9G,QAAhCipB,IACA;IACA;IACCG,WAAW,IAAI,IAAfA,IACCA,WAAW,CAAC5gB,QAAZ4gB,CAAqB,GAArBA,CADDA,IAECH,YAAY,CAACjiB,MAAbiiB,CAAoB,GAApBA,MAA6BniB,KAAK,CAACE,MAANF,CAAa,GAAbA;EAPjC;AASF;;AAEA,SAAS0hB,sBAAT,CACEa,WADF,EAEEC,GAFF,EAEmC;EAEjC,IAAID,WAAW,CAAClkB,KAAZkkB,CAAkBN,gBAAtB,EAAwC;IACtC,IAAIQ,WAAW,GAAGF,WAAW,CAAClkB,KAAZkkB,CAAkBN,gBAAlBM,CAAmCC,GAAnCD,CAAlB;;IACA,IAAI,OAAOE,WAAP,KAAuB,SAA3B,EAAsC;MACpC,OAAOA,WAAP;IACD;EACF;;EAED,OAAOD,GAAG,CAACX,uBAAX;AACF;AAEA;;;AAGG;;;AACH,eAAerF,qBAAf,CACEhP,2BADF,EAEE3T,IAFF,EAGE8F,OAHF,EAIEpB,MAJF,EAKEG,QALF,EAMEF,kBANF,EAOEkkB,oBAPF,EAWE9Z,MAXF,EAWqB;EAEnB,IAAI7P,GAAG,GAAG,CAACc,IAAD,EAAO,GAAG8F,OAAO,CAAC7H,GAAR6H,CAAaqP,CAAC,IAAKA,CAAC,CAAC3Q,KAAF2Q,CAAQnQ,EAA3Bc,CAAV,EAA0Cb,IAA1C,CAA+C,GAA/C,CAAV;;EACA,IAAI;IACF,IAAI6jB,OAAO,GAAGD,oBAAoB,CAACjZ,GAArBiZ,CAAyB3pB,GAAzB2pB,CAAd;;IACA,IAAI,CAACC,OAAL,EAAc;MACZA,OAAO,GAAGnV,2BAA2B,CAAC;QACpC3T,IADoC;QAEpC8F,OAFoC;QAGpCijB,KAAK,EAAEA,CAACrN,OAADqN,EAAU7jB,QAAV6jB,KAAsB;UAC3B,IAAI,CAACha,MAAM,CAACc,OAAZ,EAAqB;YACnBwT,eAAe,CACb3H,OADa,EAEbxW,QAFa,EAGbR,MAHa,EAIbG,QAJa,EAKbF,kBALa,CAAf0e;UAOD;QACH;MAboC,CAAD,CAArCyF;MAeAD,oBAAoB,CAAChb,GAArBgb,CAAyB3pB,GAAzB2pB,EAA8BC,OAA9BD;IACD;;IAED,IAAIC,OAAO,IAAIE,SAAS,CAAwBF,OAAxB,CAAxB,EAA0D;MACxD,MAAMA,OAAN;IACD;EACF,CAxBD,SAwBU;IACRD,oBAAoB,CAAC/Y,MAArB+Y,CAA4B3pB,GAA5B2pB;EACD;AACH;;AAEA,SAASxF,eAAT,CACE3H,OADF,EAEExW,QAFF,EAGE4V,WAHF,EAIEjW,QAJF,EAKEF,kBALF,EAKgD;EAE9C,IAAI+W,OAAJ,EAAa;IAAA;;IACX,IAAIlX,KAAK,GAAGK,QAAQ,CAAC6W,OAAD,CAApB;IACAzX,SAAS,CACPO,KADO,EAE6CkX,6DAF7C,CAATzX;IAIA,IAAIglB,YAAY,GAAGxkB,yBAAyB,CAC1CS,QAD0C,EAE1CP,kBAF0C,EAG1C,CAAC+W,OAAD,EAAU,OAAV,EAAmB3W,MAAM,CAAC,yBAAK,CAACG,QAANgkB,KAAc,IAAdA,GAAc,MAAdA,mBAAgB1qB,MAAhB,KAA0B,GAA3B,CAAzB,CAH0C,EAI1CqG,QAJ0C,CAA5C;;IAMA,IAAIL,KAAK,CAACU,QAAV,EAAoB;MAClBV,KAAK,CAACU,QAANV,CAAepE,IAAfoE,CAAoB,GAAGykB,YAAvBzkB;IACD,CAFD,MAEO;MACLA,KAAK,CAACU,QAANV,GAAiBykB,YAAjBzkB;IACD;EACF,CAjBD,MAiBO;IACL,IAAIykB,YAAY,GAAGxkB,yBAAyB,CAC1CS,QAD0C,EAE1CP,kBAF0C,EAG1C,CAAC,OAAD,EAAUI,MAAM,CAAC+V,WAAW,CAACtc,MAAZsc,IAAsB,GAAvB,CAAhB,CAH0C,EAI1CjW,QAJ0C,CAA5C;IAMAiW,WAAW,CAAC1a,IAAZ0a,CAAiB,GAAGmO,YAApBnO;EACD;AACH;AAEA;;;;AAIG;;;AACH,eAAeqO,mBAAf,CACE3kB,KADF,EAEEG,kBAFF,EAGEE,QAHF,EAGyB;EAEvB,IAAI,CAACL,KAAK,CAAC4Q,IAAX,EAAiB;IACf;EACD;;EAED,IAAIgU,SAAS,GAAG,MAAM5kB,KAAK,CAAC4Q,IAAN5Q,EAAtB,CANuB,CAQvB;EACA;EACA;;EACA,IAAI,CAACA,KAAK,CAAC4Q,IAAX,EAAiB;IACf;EACD;;EAED,IAAIiU,aAAa,GAAGxkB,QAAQ,CAACL,KAAK,CAACQ,EAAP,CAA5B;EACAf,SAAS,CAAColB,aAAD,EAAgB,4BAAhB,CAATplB,CAhBuB,CAkBvB;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EACA,IAAIqlB,YAAY,GAAwB,EAAxC;;EACA,KAAK,IAAIC,iBAAT,IAA8BH,SAA9B,EAAyC;IACvC,IAAII,gBAAgB,GAClBH,aAAa,CAACE,iBAAD,CADf;IAGA,IAAIE,2BAA2B,GAC7BD,gBAAgB,KAAKlrB,SAArBkrB,IACA;IACA;IACAD,iBAAiB,KAAK,kBAJxB;IAMAjqB,OAAO,CACL,CAACmqB,2BADI,EAEL,aAAUJ,aAAa,CAACrkB,EAAxB,GAA0B,6BAA1B,GAAsDukB,iBAAtD,GAAuE,KAAvE,GAAuE,6EAAvE,IAE8BA,mDAAiB,qBAF/C,CAFK,CAAPjqB;;IAOA,IACE,CAACmqB,2BAAD,IACA,CAACplB,kBAAkB,CAACuJ,GAAnBvJ,CAAuBklB,iBAAvBllB,CAFH,EAGE;MACAilB,YAAY,CAACC,iBAAD,CAAZD,GACEF,SAAS,CAACG,iBAAD,CADXD;IAED;EACF,CAnDsB,CAqDvB;EACA;;;EACA1f,MAAM,CAAC7F,MAAP6F,CAAcyf,aAAdzf,EAA6B0f,YAA7B1f,EAvDuB,CAyDvB;EACA;EACA;;EACAA,MAAM,CAAC7F,MAAP6F,CAAcyf,aAAdzf,EAA2BpG,SAKtBmB,EALsB,EAKtBA,kBAAkB,CAAC0kB,aAAD,CALI,EAKW;IACpCjU,IAAI,EAAE9W;EAD8B,CALX,CAA3BsL;AAQF,C,CAEA;;;AACA,eAAe8J,mBAAf,CAAkCgW,KAAlC,EAE2B;EAAA,IAFQ;IACjC5jB;EADiC,IAER4jB;EACzB,IAAIpM,aAAa,GAAGxX,OAAO,CAACkD,MAARlD,CAAgBqP,CAAC,IAAKA,CAAC,CAACwU,UAAxB7jB,CAApB;EACA,IAAI6W,OAAO,GAAG,MAAMlO,OAAO,CAACuS,GAARvS,CAAY6O,aAAa,CAACrf,GAAdqf,CAAmBnI,CAAC,IAAKA,CAAC,CAAC1E,OAAF0E,EAAzBmI,CAAZ7O,CAApB;EACA,OAAOkO,OAAO,CAAC1T,MAAR0T,CACL,CAAC3N,GAAD,EAAMhH,MAAN,EAAcjC,CAAd,KACE6D,MAAM,CAAC7F,MAAP6F,CAAcoF,GAAdpF,EAAmB;IAAE,CAAC0T,aAAa,CAACvX,CAAD,CAAbuX,CAAiB9Y,KAAjB8Y,CAAuBtY,EAAxB,GAA6BgD;EAA/B,CAAnB4B,CAFG+S,EAGL,EAHKA,CAAP;AAKF;;AAEA,eAAe6D,oBAAf,CACEhN,gBADF,EAEEvF,IAFF,EAGE5P,KAHF,EAIE8c,OAJF,EAKEmC,aALF,EAMExX,OANF,EAOEwa,UAPF,EAQEzb,QARF,EASEF,kBATF,EAUEkf,cAVF,EAU0B;EAExB,IAAI+F,4BAA4B,GAAG9jB,OAAO,CAAC7H,GAAR6H,CAAaqP,CAAC,IAC/CA,CAAC,CAAC3Q,KAAF2Q,CAAQC,IAARD,GACIgU,mBAAmB,CAAChU,CAAC,CAAC3Q,KAAH,EAAUG,kBAAV,EAA8BE,QAA9B,CADvBsQ,GAEI7W,SAH6BwH,CAAnC;EAMA,IAAI+jB,SAAS,GAAG/jB,OAAO,CAAC7H,GAAR6H,CAAY,CAACK,KAAD,EAAQJ,CAAR,KAAa;IACvC,IAAI+jB,gBAAgB,GAAGF,4BAA4B,CAAC7jB,CAAD,CAAnD;IACA,IAAI4jB,UAAU,GAAGrM,aAAa,CAACvU,IAAduU,CAAoBnI,CAAC,IAAKA,CAAC,CAAC3Q,KAAF2Q,CAAQnQ,EAARmQ,KAAehP,KAAK,CAAC3B,KAAN2B,CAAYnB,EAArDsY,CAAjB,CAFuC,CAGvC;IACA;IACA;IACA;;IACA,IAAI7M,OAAO,GAAiC,MAAOsZ,eAAP,IAA0B;MACpE,IACEA,eAAe,IACf5O,OAAO,CAACuB,MAARvB,KAAmB,KADnB4O,KAEC5jB,KAAK,CAAC3B,KAAN2B,CAAYiP,IAAZjP,IAAoBA,KAAK,CAAC3B,KAAN2B,CAAYkP,MAFjC0U,CADF,EAIE;QACAJ,UAAU,GAAG,IAAbA;MACD;;MACD,OAAOA,UAAU,GACbK,kBAAkB,CAChB/b,IADgB,EAEhBkN,OAFgB,EAGhBhV,KAHgB,EAIhB2jB,gBAJgB,EAKhBC,eALgB,EAMhBlG,cANgB,CADL,GASbpV,OAAO,CAACgC,OAARhC,CAAgB;QAAER,IAAI,EAAE7J,UAAU,CAACkC,IAAnB;QAAyB0B,MAAM,EAAE1J;MAAjC,CAAhBmQ,CATJ;IAUD,CAlBD;;IAoBA,oBACKtI,KADL,EACU;MACRwjB,UADQ;MAERlZ;IAFQ,CADV;EAKD,CAhCe3K,CAAhB,CARwB,CA0CxB;EACA;EACA;;EACA,IAAI6W,OAAO,GAAG,MAAMnJ,gBAAgB,CAAC;IACnC1N,OAAO,EAAE+jB,SAD0B;IAEnC1O,OAFmC;IAGnC9U,MAAM,EAAEP,OAAO,CAAC,CAAD,CAAPA,CAAWO,MAHgB;IAInCia,UAJmC;IAKnC8E,OAAO,EAAEvB;EAL0B,CAAD,CAApC,CA7CwB,CAqDxB;EACA;EACA;;EACA,IAAI;IACF,MAAMpV,OAAO,CAACuS,GAARvS,CAAYmb,4BAAZnb,CAAN;EACD,CAFD,CAEE,OAAOhM,CAAP,EAAU,CACV;EAAA;;EAGF,OAAOka,OAAP;AACF,C,CAEA;;;AACA,eAAeqN,kBAAf,CACE/b,IADF,EAEEkN,OAFF,EAGEhV,KAHF,EAIE2jB,gBAJF,EAKEC,eALF,EAMEE,aANF,EAMyB;EAEvB,IAAIjiB,MAAJ;EACA,IAAIkiB,QAAJ;;EAEA,IAAIC,UAAU,GACZC,OAAsE,IACvC;IAC/B;IACA,IAAI7b,MAAJ,CAF+B,CAG/B;IACA;;IACA,IAAIC,YAAY,GAAG,IAAIC,OAAJ,CAAgC,CAACvD,CAAD,EAAIwD,CAAJ,KAAWH,MAAM,GAAGG,CAApD,CAAnB;;IACAwb,QAAQ,GAAGA,MAAM3b,MAAM,EAAvB2b;;IACA/O,OAAO,CAACpM,MAARoM,CAAejX,gBAAfiX,CAAgC,OAAhCA,EAAyC+O,QAAzC/O;;IAEA,IAAIkP,aAAa,GAAIC,GAAa,IAAI;MACpC,IAAI,OAAOF,OAAP,KAAmB,UAAvB,EAAmC;QACjC,OAAO3b,OAAO,CAACF,MAARE,CACL,IAAIpM,KAAJ,CACE,6EACM4L,IADN,GACU,eADV,GACyB9H,KAAK,CAAC3B,KAAN2B,CAAYnB,EADrC,GACuC,GADvC,CADF,CADKyJ,CAAP;MAMD;;MACD,OAAO2b,OAAO,CACZ;QACEjP,OADF;QAEE9U,MAAM,EAAEF,KAAK,CAACE,MAFhB;QAGE+e,OAAO,EAAE6E;MAHX,CADY,EAMZ,IAAIK,GAAG,KAAKhsB,SAARgsB,GAAoB,CAACA,GAAD,CAApBA,GAA4B,EAAhC,CANY,CAAd;IAQD,CAjBD;;IAmBA,IAAIC,cAAc,GAAgC,CAAC,YAAW;MAC5D,IAAI;QACF,IAAIC,GAAG,GAAG,OAAOT,eAAe,GAC5BA,eAAe,CAAEO,GAAY,IAAKD,aAAa,CAACC,GAAD,CAAhC,CADa,GAE5BD,aAAa,EAFP,CAAV;QAGA,OAAO;UAAEpc,IAAI,EAAE,MAAR;UAAgBjG,MAAM,EAAEwiB;QAAxB,CAAP;MACD,CALD,CAKE,OAAO/nB,CAAP,EAAU;QACV,OAAO;UAAEwL,IAAI,EAAE,OAAR;UAAiBjG,MAAM,EAAEvF;QAAzB,CAAP;MACD;IACF,CATiD,GAAlD;;IAWA,OAAOgM,OAAO,CAACc,IAARd,CAAa,CAAC8b,cAAD,EAAiB/b,YAAjB,CAAbC,CAAP;EACD,CA1CD;;EA4CA,IAAI;IACF,IAAI2b,OAAO,GAAGjkB,KAAK,CAAC3B,KAAN2B,CAAY8H,IAAZ9H,CAAd,CADE,CAGF;;IACA,IAAI2jB,gBAAJ,EAAsB;MACpB,IAAIM,OAAJ,EAAa;QACX;QACA,IAAIK,YAAJ;QACA,IAAI,CAACtoB,KAAD,IAAU,MAAMsM,OAAO,CAACuS,GAARvS,CAAY,CAC9B;QACA;QACA;QACA0b,UAAU,CAACC,OAAD,CAAVD,CAAoBza,KAApBya,CAA2B1nB,CAAC,IAAI;UAC9BgoB,YAAY,GAAGhoB,CAAfgoB;QACD,CAFDN,CAJ8B,EAO9BL,gBAP8B,CAAZrb,CAApB;;QASA,IAAIgc,YAAY,KAAKnsB,SAArB,EAAgC;UAC9B,MAAMmsB,YAAN;QACD;;QACDziB,MAAM,GAAG7F,KAAT6F;MACD,CAhBD,MAgBO;QACL;QACA,MAAM8hB,gBAAN;QAEAM,OAAO,GAAGjkB,KAAK,CAAC3B,KAAN2B,CAAY8H,IAAZ9H,CAAVikB;;QACA,IAAIA,OAAJ,EAAa;UACX;UACA;UACA;UACApiB,MAAM,GAAG,MAAMmiB,UAAU,CAACC,OAAD,CAAzBpiB;QACD,CALD,MAKO,IAAIiG,IAAI,KAAK,QAAb,EAAuB;UAC5B,IAAInM,GAAG,GAAG,IAAIhC,GAAJ,CAAQqb,OAAO,CAACrZ,GAAhB,CAAV;UACA,IAAIzC,QAAQ,GAAGyC,GAAG,CAACzC,QAAJyC,GAAeA,GAAG,CAAC5B,MAAlC;UACA,MAAM2U,sBAAsB,CAAC,GAAD,EAAM;YAChC6H,MAAM,EAAEvB,OAAO,CAACuB,MADgB;YAEhCrd,QAFgC;YAGhCqc,OAAO,EAAEvV,KAAK,CAAC3B,KAAN2B,CAAYnB;UAHW,CAAN,CAA5B;QAKD,CARM,MAQA;UACL;UACA;UACA,OAAO;YAAEiJ,IAAI,EAAE7J,UAAU,CAACkC,IAAnB;YAAyB0B,MAAM,EAAE1J;UAAjC,CAAP;QACD;MACF;IACF,CAzCD,MAyCO,IAAI,CAAC8rB,OAAL,EAAc;MACnB,IAAItoB,GAAG,GAAG,IAAIhC,GAAJ,CAAQqb,OAAO,CAACrZ,GAAhB,CAAV;MACA,IAAIzC,QAAQ,GAAGyC,GAAG,CAACzC,QAAJyC,GAAeA,GAAG,CAAC5B,MAAlC;MACA,MAAM2U,sBAAsB,CAAC,GAAD,EAAM;QAChCxV;MADgC,CAAN,CAA5B;IAGD,CANM,MAMA;MACL2I,MAAM,GAAG,MAAMmiB,UAAU,CAACC,OAAD,CAAzBpiB;IACD;;IAED/D,SAAS,CACP+D,MAAM,CAACA,MAAPA,KAAkB1J,SADX,EAEP,kBAAe2P,IAAI,KAAK,QAATA,GAAoB,WAApBA,GAAkC,UAAjD,IACM9H,aADN,IACMA,YAAK,CAAC3B,KAAN2B,CAAYnB,EAAZmB,GAA0D8H,2CAA1D9H,GAA0D8H,IAA1D9H,GAAmE,IADzE,IACyE,4CAHlE,CAATlC;EAMD,CA7DD,CA6DE,OAAOxB,CAAP,EAAU;IACV;IACA;IACA;IACA,OAAO;MAAEwL,IAAI,EAAE7J,UAAU,CAACR,KAAnB;MAA0BoE,MAAM,EAAEvF;IAAlC,CAAP;EACD,CAlED,SAkEU;IACR,IAAIynB,QAAJ,EAAc;MACZ/O,OAAO,CAACpM,MAARoM,CAAehX,mBAAfgX,CAAmC,OAAnCA,EAA4C+O,QAA5C/O;IACD;EACF;;EAED,OAAOnT,MAAP;AACF;;AAEA,eAAe2Y,qCAAf,CACE+J,kBADF,EACwC;EAEtC,IAAI;IAAE1iB,MAAF;IAAUiG;EAAV,IAAmByc,kBAAvB;;EAEA,IAAIrG,UAAU,CAACrc,MAAD,CAAd,EAAwB;IACtB,IAAI1B,IAAJ;;IAEA,IAAI;MACF,IAAIqkB,WAAW,GAAG3iB,MAAM,CAAC0F,OAAP1F,CAAe4H,GAAf5H,CAAmB,cAAnBA,CAAlB,CADE,CAEF;MACA;;MACA,IAAI2iB,WAAW,IAAI,wBAAwBxhB,IAAxB,CAA6BwhB,WAA7B,CAAnB,EAA8D;QAC5D,IAAI3iB,MAAM,CAAC8d,IAAP9d,IAAe,IAAnB,EAAyB;UACvB1B,IAAI,GAAG,IAAPA;QACD,CAFD,MAEO;UACLA,IAAI,GAAG,MAAM0B,MAAM,CAACsF,IAAPtF,EAAb1B;QACD;MACF,CAND,MAMO;QACLA,IAAI,GAAG,MAAM0B,MAAM,CAACsK,IAAPtK,EAAb1B;MACD;IACF,CAbD,CAaE,OAAO7D,CAAP,EAAU;MACV,OAAO;QAAEwL,IAAI,EAAE7J,UAAU,CAACR,KAAnB;QAA0BA,KAAK,EAAEnB;MAAjC,CAAP;IACD;;IAED,IAAIwL,IAAI,KAAK7J,UAAU,CAACR,KAAxB,EAA+B;MAC7B,OAAO;QACLqK,IAAI,EAAE7J,UAAU,CAACR,KADZ;QAELA,KAAK,EAAE,IAAI2N,iBAAJ,CAAsBvJ,MAAM,CAACyF,MAA7B,EAAqCzF,MAAM,CAACwJ,UAA5C,EAAwDlL,IAAxD,CAFF;QAGL2d,UAAU,EAAEjc,MAAM,CAACyF,MAHd;QAILC,OAAO,EAAE1F,MAAM,CAAC0F;MAJX,CAAP;IAMD;;IAED,OAAO;MACLO,IAAI,EAAE7J,UAAU,CAACkC,IADZ;MAELA,IAFK;MAGL2d,UAAU,EAAEjc,MAAM,CAACyF,MAHd;MAILC,OAAO,EAAE1F,MAAM,CAAC0F;IAJX,CAAP;EAMD;;EAED,IAAIO,IAAI,KAAK7J,UAAU,CAACR,KAAxB,EAA+B;IAC7B,IAAIgnB,sBAAsB,CAAC5iB,MAAD,CAA1B,EAAoC;MAAA;;MAClC,IAAIA,MAAM,CAAC1B,IAAP0B,YAAuB3F,KAA3B,EAAkC;QAAA;;QAChC,OAAO;UACL4L,IAAI,EAAE7J,UAAU,CAACR,KADZ;UAELA,KAAK,EAAEoE,MAAM,CAAC1B,IAFT;UAGL2d,UAAU,kBAAEjc,MAAM,CAACuF,IAAT,KAAa,IAAb,GAAa,MAAb,GAAEsd,aAAapd;QAHpB,CAAP;MAKD,CAPiC,CASlC;;;MACAzF,MAAM,GAAG,IAAIuJ,iBAAJ,CACP,wBAAM,CAAChE,IAAP,KAAW,IAAX,GAAW,MAAX,iBAAaE,MAAb,KAAuB,GADhB,EAEPnP,SAFO,EAGP0J,MAAM,CAAC1B,IAHA,CAAT0B;IAKD;;IACD,OAAO;MACLiG,IAAI,EAAE7J,UAAU,CAACR,KADZ;MAELA,KAAK,EAAEoE,MAFF;MAGLic,UAAU,EAAEvS,oBAAoB,CAAC1J,MAAD,CAApB0J,GAA+B1J,MAAM,CAACyF,MAAtCiE,GAA+CpT;IAHtD,CAAP;EAKD;;EAED,IAAIwsB,cAAc,CAAC9iB,MAAD,CAAlB,EAA4B;IAAA;;IAC1B,OAAO;MACLiG,IAAI,EAAE7J,UAAU,CAAC2mB,QADZ;MAELxM,YAAY,EAAEvW,MAFT;MAGLic,UAAU,mBAAEjc,MAAM,CAACuF,IAAT,KAAa,IAAb,GAAa,MAAb,GAAEyd,cAAavd,MAHpB;MAILC,OAAO,EAAE,wBAAM,CAACH,IAAP0d,mCAAavd,OAAb,KAAwB,IAAIC,OAAJ,CAAY3F,MAAM,CAACuF,IAAPvF,CAAY0F,OAAxB;IAJ5B,CAAP;EAMD;;EAED,IAAIkd,sBAAsB,CAAC5iB,MAAD,CAA1B,EAAoC;IAAA;;IAClC,OAAO;MACLiG,IAAI,EAAE7J,UAAU,CAACkC,IADZ;MAELA,IAAI,EAAE0B,MAAM,CAAC1B,IAFR;MAGL2d,UAAU,mBAAEjc,MAAM,CAACuF,IAAT,KAAa,IAAb,GAAa,MAAb,GAAE2d,cAAazd,MAHpB;MAILC,OAAO,EAAE,uBAAM,CAACH,IAAP,KAAW,IAAX,kBAAaG,OAAb,GACL,IAAIC,OAAJ,CAAY3F,MAAM,CAACuF,IAAPvF,CAAY0F,OAAxB,CADK,GAELpP;IANC,CAAP;EAQD;;EAED,OAAO;IAAE2P,IAAI,EAAE7J,UAAU,CAACkC,IAAnB;IAAyBA,IAAI,EAAE0B;EAA/B,CAAP;AACF,C,CAEA;;;AACA,SAAS0Y,wCAAT,CACEpP,QADF,EAEE6J,OAFF,EAGEO,OAHF,EAIE5V,OAJF,EAKEP,QALF,EAME+G,oBANF,EAM+B;EAE7B,IAAInN,QAAQ,GAAGmS,QAAQ,CAAC5D,OAAT4D,CAAiB1B,GAAjB0B,CAAqB,UAArBA,CAAf;EACArN,SAAS,CACP9E,QADO,EAEP,4EAFO,CAAT8E;;EAKA,IAAI,CAAC0O,kBAAkB,CAACxJ,IAAnBwJ,CAAwBxT,QAAxBwT,CAAL,EAAwC;IACtC,IAAIwY,cAAc,GAAGrlB,OAAO,CAAC7D,KAAR6D,CACnB,CADmBA,EAEnBA,OAAO,CAAC2P,SAAR3P,CAAmBqP,CAAC,IAAKA,CAAC,CAAC3Q,KAAF2Q,CAAQnQ,EAARmQ,KAAeuG,OAAxC5V,IAAmD,CAFhCA,CAArB;IAIA3G,QAAQ,GAAG6a,WAAW,CACpB,IAAIla,GAAJ,CAAQqb,OAAO,CAACrZ,GAAhB,CADoB,EAEpBqpB,cAFoB,EAGpB5lB,QAHoB,EAIpB,IAJoB,EAKpBpG,QALoB,EAMpBmN,oBANoB,CAAtBnN;IAQAmS,QAAQ,CAAC5D,OAAT4D,CAAiBzD,GAAjByD,CAAqB,UAArBA,EAAiCnS,QAAjCmS;EACD;;EAED,OAAOA,QAAP;AACF;;AAEA,SAASwL,yBAAT,CACE3d,QADF,EAEEkoB,UAFF,EAGE9hB,QAHF,EAGkB;EAEhB,IAAIoN,kBAAkB,CAACxJ,IAAnBwJ,CAAwBxT,QAAxBwT,CAAJ,EAAuC;IACrC;IACA,IAAIyY,kBAAkB,GAAGjsB,QAAzB;IACA,IAAI2C,GAAG,GAAGspB,kBAAkB,CAAC7pB,UAAnB6pB,CAA8B,IAA9BA,IACN,IAAItrB,GAAJ,CAAQunB,UAAU,CAACgE,QAAXhE,GAAsB+D,kBAA9B,CADMA,GAEN,IAAItrB,GAAJ,CAAQsrB,kBAAR,CAFJ;IAGA,IAAIE,cAAc,GAAG5lB,aAAa,CAAC5D,GAAG,CAACzC,QAAL,EAAekG,QAAf,CAAbG,IAAyC,IAA9D;;IACA,IAAI5D,GAAG,CAACkC,MAAJlC,KAAeulB,UAAU,CAACrjB,MAA1BlC,IAAoCwpB,cAAxC,EAAwD;MACtD,OAAOxpB,GAAG,CAACzC,QAAJyC,GAAeA,GAAG,CAAC5B,MAAnB4B,GAA4BA,GAAG,CAAC3B,IAAvC;IACD;EACF;;EACD,OAAOhB,QAAP;AACF,C,CAEA;AACA;AACA;;;AACA,SAASic,uBAAT,CACExb,OADF,EAEET,QAFF,EAGE4P,MAHF,EAIEoL,UAJF,EAIyB;EAEvB,IAAIrY,GAAG,GAAGlC,OAAO,CAACC,SAARD,CAAkB6mB,iBAAiB,CAACtnB,QAAD,CAAnCS,EAA+CgD,QAA/ChD,EAAV;EACA,IAAI2N,IAAI,GAAgB;IAAEwB;EAAF,CAAxB;;EAEA,IAAIoL,UAAU,IAAIZ,gBAAgB,CAACY,UAAU,CAACjI,UAAZ,CAAlC,EAA2D;IACzD,IAAI;MAAEA,UAAF;MAAcE;IAAd,IAA8B+H,UAAlC,CADyD,CAEzD;IACA;IACA;;IACA5M,IAAI,CAACmP,MAALnP,GAAc2E,UAAU,CAACsU,WAAXtU,EAAd3E;;IAEA,IAAI6E,WAAW,KAAK,kBAApB,EAAwC;MACtC7E,IAAI,CAACG,OAALH,GAAe,IAAII,OAAJ,CAAY;QAAE,gBAAgByE;MAAlB,CAAZ,CAAf7E;MACAA,IAAI,CAACuY,IAALvY,GAAY/N,IAAI,CAACC,SAALD,CAAe2a,UAAU,CAAC7M,IAA1B9N,CAAZ+N;IACD,CAHD,MAGO,IAAI6E,WAAW,KAAK,YAApB,EAAkC;MACvC;MACA7E,IAAI,CAACuY,IAALvY,GAAY4M,UAAU,CAAC7H,IAAvB/E;IACD,CAHM,MAGA,IACL6E,WAAW,KAAK,mCAAhBA,IACA+H,UAAU,CAAC9H,QAFN,EAGL;MACA;MACA9E,IAAI,CAACuY,IAALvY,GAAYwZ,6BAA6B,CAAC5M,UAAU,CAAC9H,QAAZ,CAAzC9E;IACD,CANM,MAMA;MACL;MACAA,IAAI,CAACuY,IAALvY,GAAY4M,UAAU,CAAC9H,QAAvB9E;IACD;EACF;;EAED,OAAO,IAAI4X,OAAJ,CAAYrjB,GAAZ,EAAiByL,IAAjB,CAAP;AACF;;AAEA,SAASwZ,6BAAT,CAAuC1U,QAAvC,EAAyD;EACvD,IAAIyU,YAAY,GAAG,IAAIH,eAAJ,EAAnB;;EAEA,KAAK,IAAI,CAACznB,GAAD,EAAMiD,KAAN,CAAT,IAAyBkQ,QAAQ,CAACrU,OAATqU,EAAzB,EAA6C;IAC3C;IACAyU,YAAY,CAACG,MAAbH,CAAoB5nB,GAApB4nB,EAAyB,OAAO3kB,KAAP,KAAiB,QAAjB,GAA4BA,KAA5B,GAAoCA,KAAK,CAAC2B,IAAnEgjB;EACD;;EAED,OAAOA,YAAP;AACF;;AAEA,SAASE,6BAAT,CACEF,YADF,EAC+B;EAE7B,IAAIzU,QAAQ,GAAG,IAAIqU,QAAJ,EAAf;;EACA,KAAK,IAAI,CAACxnB,GAAD,EAAMiD,KAAN,CAAT,IAAyB2kB,YAAY,CAAC9oB,OAAb8oB,EAAzB,EAAiD;IAC/CzU,QAAQ,CAAC4U,MAAT5U,CAAgBnT,GAAhBmT,EAAqBlQ,KAArBkQ;EACD;;EACD,OAAOA,QAAP;AACF;;AAEA,SAASiT,sBAAT,CACExf,OADF,EAEE6W,OAFF,EAGEtB,mBAHF,EAIE9D,eAJF,EAKEuM,uBALF,EAKkC;EAOhC;EACA,IAAI1d,UAAU,GAA8B,EAA5C;EACA,IAAIkP,MAAM,GAAiC,IAA3C;EACA,IAAI2O,UAAJ;EACA,IAAIsH,UAAU,GAAG,KAAjB;EACA,IAAIrH,aAAa,GAA4B,EAA7C;EACA,IAAI5J,YAAY,GACde,mBAAmB,IAAIM,aAAa,CAACN,mBAAmB,CAAC,CAAD,CAApB,CAApCA,GACIA,mBAAmB,CAAC,CAAD,CAAnBA,CAAuBzX,KAD3ByX,GAEI/c,SAHN,CAbgC,CAkBhC;;EACAwH,OAAO,CAACqB,OAARrB,CAAiBK,KAAK,IAAI;IACxB,IAAI,EAAEA,KAAK,CAAC3B,KAAN2B,CAAYnB,EAAZmB,IAAkBwW,OAApB,CAAJ,EAAkC;MAChC;IACD;;IACD,IAAI3X,EAAE,GAAGmB,KAAK,CAAC3B,KAAN2B,CAAYnB,EAArB;IACA,IAAIgD,MAAM,GAAG2U,OAAO,CAAC3X,EAAD,CAApB;IACAf,SAAS,CACP,CAAC4Y,gBAAgB,CAAC7U,MAAD,CADV,EAEP,qDAFO,CAAT/D;;IAIA,IAAI0X,aAAa,CAAC3T,MAAD,CAAjB,EAA2B;MACzB,IAAIpE,KAAK,GAAGoE,MAAM,CAACpE,KAAnB,CADyB,CAEzB;MACA;MACA;;MACA,IAAI0W,YAAY,KAAKhc,SAArB,EAAgC;QAC9BsF,KAAK,GAAG0W,YAAR1W;QACA0W,YAAY,GAAGhc,SAAfgc;MACD;;MAEDhF,MAAM,GAAGA,MAAM,IAAI,EAAnBA;;MAEA,IAAIwO,uBAAJ,EAA6B;QAC3BxO,MAAM,CAACtQ,EAAD,CAANsQ,GAAa1R,KAAb0R;MACD,CAFD,MAEO;QACL;QACA;QACA;QACA,IAAI2H,aAAa,GAAG3B,mBAAmB,CAACxV,OAAD,EAAUd,EAAV,CAAvC;;QACA,IAAIsQ,MAAM,CAAC2H,aAAa,CAACzY,KAAdyY,CAAoBjY,EAArB,CAANsQ,IAAkC,IAAtC,EAA4C;UAC1CA,MAAM,CAAC2H,aAAa,CAACzY,KAAdyY,CAAoBjY,EAArB,CAANsQ,GAAiC1R,KAAjC0R;QACD;MACF,CAtBwB,CAwBzB;;;MACAlP,UAAU,CAACpB,EAAD,CAAVoB,GAAiB9H,SAAjB8H,CAzByB,CA2BzB;MACA;;MACA,IAAI,CAACmlB,UAAL,EAAiB;QACfA,UAAU,GAAG,IAAbA;QACAtH,UAAU,GAAGvS,oBAAoB,CAAC1J,MAAM,CAACpE,KAAR,CAApB8N,GACT1J,MAAM,CAACpE,KAAPoE,CAAayF,MADJiE,GAET,GAFJuS;MAGD;;MACD,IAAIjc,MAAM,CAAC0F,OAAX,EAAoB;QAClBwW,aAAa,CAAClf,EAAD,CAAbkf,GAAoBlc,MAAM,CAAC0F,OAA3BwW;MACD;IACF,CAtCD,MAsCO;MACL,IAAIlH,gBAAgB,CAAChV,MAAD,CAApB,EAA8B;QAC5BuP,eAAe,CAAC1J,GAAhB0J,CAAoBvS,EAApBuS,EAAwBvP,MAAM,CAACuW,YAA/BhH;QACAnR,UAAU,CAACpB,EAAD,CAAVoB,GAAiB4B,MAAM,CAACuW,YAAPvW,CAAoB1B,IAArCF,CAF4B,CAG5B;QACA;;QACA,IACE4B,MAAM,CAACic,UAAPjc,IAAqB,IAArBA,IACAA,MAAM,CAACic,UAAPjc,KAAsB,GADtBA,IAEA,CAACujB,UAHH,EAIE;UACAtH,UAAU,GAAGjc,MAAM,CAACic,UAApBA;QACD;;QACD,IAAIjc,MAAM,CAAC0F,OAAX,EAAoB;UAClBwW,aAAa,CAAClf,EAAD,CAAbkf,GAAoBlc,MAAM,CAAC0F,OAA3BwW;QACD;MACF,CAfD,MAeO;QACL9d,UAAU,CAACpB,EAAD,CAAVoB,GAAiB4B,MAAM,CAAC1B,IAAxBF,CADK,CAEL;QACA;;QACA,IAAI4B,MAAM,CAACic,UAAPjc,IAAqBA,MAAM,CAACic,UAAPjc,KAAsB,GAA3CA,IAAkD,CAACujB,UAAvD,EAAmE;UACjEtH,UAAU,GAAGjc,MAAM,CAACic,UAApBA;QACD;;QACD,IAAIjc,MAAM,CAAC0F,OAAX,EAAoB;UAClBwW,aAAa,CAAClf,EAAD,CAAbkf,GAAoBlc,MAAM,CAAC0F,OAA3BwW;QACD;MACF;IACF;EACF,CA5EDpe,EAnBgC,CAiGhC;EACA;EACA;;EACA,IAAIwU,YAAY,KAAKhc,SAAjBgc,IAA8Be,mBAAlC,EAAuD;IACrD/F,MAAM,GAAG;MAAE,CAAC+F,mBAAmB,CAAC,CAAD,CAApB,GAA0Bf;IAA5B,CAAThF;IACAlP,UAAU,CAACiV,mBAAmB,CAAC,CAAD,CAApB,CAAVjV,GAAqC9H,SAArC8H;EACD;;EAED,OAAO;IACLA,UADK;IAELkP,MAFK;IAGL2O,UAAU,EAAEA,UAAU,IAAI,GAHrB;IAILC;EAJK,CAAP;AAMF;;AAEA,SAAS5F,iBAAT,CACEjgB,KADF,EAEEyH,OAFF,EAGEwX,aAHF,EAIEX,OAJF,EAKEtB,mBALF,EAMEkC,oBANF,EAOEY,cAPF,EAQE5G,eARF,EAQ4C;EAK1C,IAAI;IAAEnR,UAAF;IAAckP;EAAd,IAAyBgQ,sBAAsB,CACjDxf,OADiD,EAEjD6W,OAFiD,EAGjDtB,mBAHiD,EAIjD9D,eAJiD,EAKjD,KALiD,CAK5C;EAL4C,CAAnD,CAL0C,CAa1C;;EACAgG,oBAAoB,CAACpW,OAArBoW,CAA8BO,EAAE,IAAI;IAClC,IAAI;MAAE5e,GAAF;MAAOiH,KAAP;MAAcwI;IAAd,IAA6BmP,EAAjC;IACA,IAAI9V,MAAM,GAAGmW,cAAc,CAACjf,GAAD,CAA3B;IACA+E,SAAS,CAAC+D,MAAD,EAAS,2CAAT,CAAT/D,CAHkC,CAKlC;;IACA,IAAI0K,UAAU,IAAIA,UAAU,CAACI,MAAXJ,CAAkBkB,OAApC,EAA6C;MAC3C;MACA;IACD,CAHD,MAGO,IAAI8L,aAAa,CAAC3T,MAAD,CAAjB,EAA2B;MAChC,IAAIiV,aAAa,GAAG3B,mBAAmB,CAACjd,KAAK,CAACyH,OAAP,EAAgBK,KAAK,QAALA,GAAK,MAALA,QAAK,CAAE3B,KAAP2B,CAAanB,EAA7B,CAAvC;;MACA,IAAI,EAAEsQ,MAAM,IAAIA,MAAM,CAAC2H,aAAa,CAACzY,KAAdyY,CAAoBjY,EAArB,CAAlB,CAAJ,EAAiD;QAC/CsQ,MAAM,gBACDA,MADC,EACK;UACT,CAAC2H,aAAa,CAACzY,KAAdyY,CAAoBjY,EAArB,GAA0BgD,MAAM,CAACpE;QADxB,CADL,CAAN0R;MAID;;MACDjX,KAAK,CAAC4X,QAAN5X,CAAeyR,MAAfzR,CAAsBa,GAAtBb;IACD,CATM,MASA,IAAIwe,gBAAgB,CAAC7U,MAAD,CAApB,EAA8B;MACnC;MACA;MACA/D,SAAS,CAAC,KAAD,EAAQ,yCAAR,CAATA;IACD,CAJM,MAIA,IAAI+Y,gBAAgB,CAAChV,MAAD,CAApB,EAA8B;MACnC;MACA;MACA/D,SAAS,CAAC,KAAD,EAAQ,iCAAR,CAATA;IACD,CAJM,MAIA;MACL,IAAI8b,WAAW,GAAGL,cAAc,CAAC1X,MAAM,CAAC1B,IAAR,CAAhC;MACAjI,KAAK,CAAC4X,QAAN5X,CAAewP,GAAfxP,CAAmBa,GAAnBb,EAAwB0hB,WAAxB1hB;IACD;EACF,CA9BDkf;EAgCA,OAAO;IAAEnX,UAAF;IAAckP;EAAd,CAAP;AACF;;AAEA,SAASoE,eAAT,CACEtT,UADF,EAEEolB,aAFF,EAGE1lB,OAHF,EAIEwP,MAJF,EAIsC;EAEpC,IAAImW,gBAAgB,gBAAQD,aAAR,CAApB;;EACA,KAAK,IAAIrlB,KAAT,IAAkBL,OAAlB,EAA2B;IACzB,IAAId,EAAE,GAAGmB,KAAK,CAAC3B,KAAN2B,CAAYnB,EAArB;;IACA,IAAIwmB,aAAa,CAACE,cAAdF,CAA6BxmB,EAA7BwmB,CAAJ,EAAsC;MACpC,IAAIA,aAAa,CAACxmB,EAAD,CAAbwmB,KAAsBltB,SAA1B,EAAqC;QACnCmtB,gBAAgB,CAACzmB,EAAD,CAAhBymB,GAAuBD,aAAa,CAACxmB,EAAD,CAApCymB;MAIA;IAEH,CARD,MAQO,IAAIrlB,UAAU,CAACpB,EAAD,CAAVoB,KAAmB9H,SAAnB8H,IAAgCD,KAAK,CAAC3B,KAAN2B,CAAYkP,MAAhD,EAAwD;MAC7D;MACA;MACAoW,gBAAgB,CAACzmB,EAAD,CAAhBymB,GAAuBrlB,UAAU,CAACpB,EAAD,CAAjCymB;IACD;;IAED,IAAInW,MAAM,IAAIA,MAAM,CAACoW,cAAPpW,CAAsBtQ,EAAtBsQ,CAAd,EAAyC;MACvC;MACA;IACD;EACF;;EACD,OAAOmW,gBAAP;AACF;;AAEA,SAASzP,sBAAT,CACEX,mBADF,EACsD;EAEpD,IAAI,CAACA,mBAAL,EAA0B;IACxB,OAAO,EAAP;EACD;;EACD,OAAOM,aAAa,CAACN,mBAAmB,CAAC,CAAD,CAApB,CAAbM,GACH;IACE;IACA3F,UAAU,EAAE;EAFd,CADG2F,GAKH;IACE3F,UAAU,EAAE;MACV,CAACqF,mBAAmB,CAAC,CAAD,CAApB,GAA0BA,mBAAmB,CAAC,CAAD,CAAnBA,CAAuB/U;IADvC;EADd,CALJ;AAUF,C,CAEA;AACA;AACA;;;AACA,SAASgV,mBAAT,CACExV,OADF,EAEE4V,OAFF,EAEkB;EAEhB,IAAIiQ,eAAe,GAAGjQ,OAAO,GACzB5V,OAAO,CAAC7D,KAAR6D,CAAc,CAAdA,EAAiBA,OAAO,CAAC2P,SAAR3P,CAAmBqP,CAAC,IAAKA,CAAC,CAAC3Q,KAAF2Q,CAAQnQ,EAARmQ,KAAeuG,OAAxC5V,IAAmD,CAApEA,CADyB,GAEzB,CAAC,GAAGA,OAAJ,CAFJ;EAGA,OACE6lB,eAAe,CAACC,OAAhBD,GAA0BnH,IAA1BmH,CAAgCxW,CAAC,IAAKA,CAAC,CAAC3Q,KAAF2Q,CAAQtC,gBAARsC,KAA6B,IAAnEwW,KACA7lB,OAAO,CAAC,CAAD,CAFT;AAIF;;AAEA,SAASgP,sBAAT,CAAgCpQ,MAAhC,EAAiE;EAI/D;EACA,IAAIF,KAAK,GACPE,MAAM,CAAClG,MAAPkG,KAAkB,CAAlBA,GACIA,MAAM,CAAC,CAAD,CADVA,GAEIA,MAAM,CAAC8f,IAAP9f,CAAagK,CAAC,IAAKA,CAAC,CAACvQ,KAAFuQ,IAAW,CAACA,CAAC,CAAC1O,IAAd0O,IAAsBA,CAAC,CAAC1O,IAAF0O,KAAW,GAApDhK,KAA4D;IAC1DM,EAAE;EADwD,CAHlE;EAOA,OAAO;IACLc,OAAO,EAAE,CACP;MACEO,MAAM,EAAE,EADV;MAEEhH,QAAQ,EAAE,EAFZ;MAGEwK,YAAY,EAAE,EAHhB;MAIErF;IAJF,CADO,CADJ;IASLA;EATK,CAAP;AAWF;;AAEA,SAASqQ,sBAAT,CACEpH,MADF,EACgBoe,MADhB,EAcQ;EAAA,IAZN;IACExsB,QADF;IAEEqc,OAFF;IAGEgB,MAHF;IAIEzO,IAJF;IAKE7L;EALF,wBAYI,KAAEypB;EAEN,IAAIra,UAAU,GAAG,sBAAjB;EACA,IAAIsa,YAAY,GAAG,iCAAnB;;EAEA,IAAIre,MAAM,KAAK,GAAf,EAAoB;IAClB+D,UAAU,GAAG,aAAbA;;IACA,IAAIvD,IAAI,KAAK,iBAAb,EAAgC;MAC9B6d,YAAY,GACV,2BAAwBzsB,QAAxB,GAAgC,gDAAhC,IAAgC,0CACQ+C,OADxC,CADF0pB;IAGD,CAJD,MAIO,IAAIpP,MAAM,IAAIrd,QAAVqd,IAAsBhB,OAA1B,EAAmC;MACxCoQ,YAAY,GACV,gBAAcpP,MAAd,GAAoB,gBAApB,GAAoCrd,QAApC,GAC2Cqc,SAD3C,IAC2CA,sDAAO,MADlD,IAE2C,2CAH7CoQ;IAID,CALM,MAKA,IAAI7d,IAAI,KAAK,cAAb,EAA6B;MAClC6d,YAAY,GAAG,qCAAfA;IACD,CAFM,MAEA,IAAI7d,IAAI,KAAK,cAAb,EAA6B;MAClC6d,YAAY,GAAG,kCAAfA;IACD;EACF,CAhBD,MAgBO,IAAIre,MAAM,KAAK,GAAf,EAAoB;IACzB+D,UAAU,GAAG,WAAbA;IACAsa,YAAY,GAAapQ,uBAAgCrc,0BAAhCqc,GAAgCrc,QAAhCqc,GAA2C,IAApEoQ;EACD,CAHM,MAGA,IAAIre,MAAM,KAAK,GAAf,EAAoB;IACzB+D,UAAU,GAAG,WAAbA;IACAsa,YAAY,+BAA4BzsB,QAA5B,GAAuC,IAAnDysB;EACD,CAHM,MAGA,IAAIre,MAAM,KAAK,GAAf,EAAoB;IACzB+D,UAAU,GAAG,oBAAbA;;IACA,IAAIkL,MAAM,IAAIrd,QAAVqd,IAAsBhB,OAA1B,EAAmC;MACjCoQ,YAAY,GACV,gBAAcpP,MAAM,CAAC8J,WAAP9J,EAAd,GAAkC,gBAAlC,GAAkDrd,QAAlD,GAA0D,SAA1D,IAA0D,6CACdqc,OADc,GACP,MADnD,IAE2C,2CAH7CoQ;IAID,CALD,MAKO,IAAIpP,MAAJ,EAAY;MACjBoP,YAAY,iCAA8BpP,MAAM,CAAC8J,WAAP9J,EAA9B,GAAqD,IAAjEoP;IACD;EACF;;EAED,OAAO,IAAIva,iBAAJ,CACL9D,MAAM,IAAI,GADL,EAEL+D,UAFK,EAGL,IAAInP,KAAJ,CAAUypB,YAAV,CAHK,EAIL,IAJK,CAAP;AAMF,C,CAEA;;;AACA,SAASzN,YAAT,CACE1B,OADF,EACqC;EAEnC,IAAI3e,OAAO,GAAG4L,MAAM,CAAC5L,OAAP4L,CAAe+S,OAAf/S,CAAd;;EACA,KAAK,IAAI7D,CAAC,GAAG/H,OAAO,CAACQ,MAARR,GAAiB,CAA9B,EAAiC+H,CAAC,IAAI,CAAtC,EAAyCA,CAAC,EAA1C,EAA8C;IAC5C,IAAI,CAAC7G,GAAD,EAAM8I,MAAN,IAAgBhK,OAAO,CAAC+H,CAAD,CAA3B;;IACA,IAAI8W,gBAAgB,CAAC7U,MAAD,CAApB,EAA8B;MAC5B,OAAO;QAAE9I,GAAF;QAAO8I;MAAP,CAAP;IACD;EACF;AACH;;AAEA,SAASye,iBAAT,CAA2BzmB,IAA3B,EAAmC;EACjC,IAAIiD,UAAU,GAAG,OAAOjD,IAAP,KAAgB,QAAhB,GAA2BC,SAAS,CAACD,IAAD,CAApC,GAA6CA,IAA9D;EACA,OAAOL,UAAU,cAAMsD,UAAN,EAAgB;IAAE9C,IAAI,EAAE;EAAR,CAAhB,EAAjB;AACF;;AAEA,SAAS+a,gBAAT,CAA0B/S,CAA1B,EAAuCC,CAAvC,EAAkD;EAChD,IAAID,CAAC,CAAC9I,QAAF8I,KAAeC,CAAC,CAAC/I,QAAjB8I,IAA6BA,CAAC,CAACjI,MAAFiI,KAAaC,CAAC,CAAClI,MAAhD,EAAwD;IACtD,OAAO,KAAP;EACD;;EAED,IAAIiI,CAAC,CAAChI,IAAFgI,KAAW,EAAf,EAAmB;IACjB;IACA,OAAOC,CAAC,CAACjI,IAAFiI,KAAW,EAAlB;EACD,CAHD,MAGO,IAAID,CAAC,CAAChI,IAAFgI,KAAWC,CAAC,CAACjI,IAAjB,EAAuB;IAC5B;IACA,OAAO,IAAP;EACD,CAHM,MAGA,IAAIiI,CAAC,CAACjI,IAAFiI,KAAW,EAAf,EAAmB;IACxB;IACA,OAAO,IAAP;EACD,CAd+C,CAgBhD;EACA;;;EACA,OAAO,KAAP;AACF;;AAEA,SAAS4gB,SAAT,CAAgCwB,GAAhC,EAA4C;EAC1C,OAAO,OAAOA,GAAP,KAAe,QAAf,IAA2BA,GAAG,IAAI,IAAlC,IAA0C,UAAUA,GAA3D;AACF;;AAEA,SAAS3F,oBAAT,CAA8B7c,MAA9B,EAA6C;EAC3C,OACEA,MAAM,IAAI,IAAVA,IACA,OAAOA,MAAP,KAAkB,QADlBA,IAEA,UAAUA,MAFVA,IAGA,YAAYA,MAHZA,KAICA,MAAM,CAACiG,IAAPjG,KAAgB5D,UAAU,CAACkC,IAA3B0B,IAAmCA,MAAM,CAACiG,IAAPjG,KAAgB5D,UAAU,CAACR,KAJ/DoE,CADF;AAOF;;AAEA,SAASyY,kCAAT,CAA4CzY,MAA5C,EAAsE;EACpE,OACEqc,UAAU,CAACrc,MAAM,CAACA,MAAR,CAAVqc,IAA6BtS,mBAAmB,CAACnE,GAApBmE,CAAwB/J,MAAM,CAACA,MAAPA,CAAcyF,MAAtCsE,CAD/B;AAGF;;AAEA,SAASiL,gBAAT,CAA0BhV,MAA1B,EAA4C;EAC1C,OAAOA,MAAM,CAACiG,IAAPjG,KAAgB5D,UAAU,CAAC2mB,QAAlC;AACF;;AAEA,SAASpP,aAAT,CAAuB3T,MAAvB,EAAyC;EACvC,OAAOA,MAAM,CAACiG,IAAPjG,KAAgB5D,UAAU,CAACR,KAAlC;AACF;;AAEA,SAASiZ,gBAAT,CAA0B7U,MAA1B,EAA6C;EAC3C,OAAO,CAACA,MAAM,IAAIA,MAAM,CAACiG,IAAlB,MAA4B7J,UAAU,CAACgN,QAA9C;AACF;;AAEM,SAAUwZ,sBAAV,CACJzoB,KADI,EACM;EAEV,OACE,OAAOA,KAAP,KAAiB,QAAjB,IACAA,KAAK,IAAI,IADT,IAEA,UAAUA,KAFV,IAGA,UAAUA,KAHV,IAIA,UAAUA,KAJV,IAKAA,KAAK,CAAC8L,IAAN9L,KAAe,sBANjB;AAQF;;AAEM,SAAU2oB,cAAV,CAAyB3oB,KAAzB,EAAmC;EACvC,IAAI4oB,QAAQ,GAAiB5oB,KAA7B;EACA,OACE4oB,QAAQ,IACR,OAAOA,QAAP,KAAoB,QADpBA,IAEA,OAAOA,QAAQ,CAACzkB,IAAhB,KAAyB,QAFzBykB,IAGA,OAAOA,QAAQ,CAAC3a,SAAhB,KAA8B,UAH9B2a,IAIA,OAAOA,QAAQ,CAAC1a,MAAhB,KAA2B,UAJ3B0a,IAKA,OAAOA,QAAQ,CAACva,WAAhB,KAAgC,UANlC;AAQF;;AAEA,SAAS6T,UAAT,CAAoBliB,KAApB,EAA8B;EAC5B,OACEA,KAAK,IAAI,IAATA,IACA,OAAOA,KAAK,CAACsL,MAAb,KAAwB,QADxBtL,IAEA,OAAOA,KAAK,CAACqP,UAAb,KAA4B,QAF5BrP,IAGA,OAAOA,KAAK,CAACuL,OAAb,KAAyB,QAHzBvL,IAIA,OAAOA,KAAK,CAAC2jB,IAAb,KAAsB,WALxB;AAOF;;AAEA,SAAShB,kBAAT,CAA4B9c,MAA5B,EAAuC;EACrC,IAAI,CAACqc,UAAU,CAACrc,MAAD,CAAf,EAAyB;IACvB,OAAO,KAAP;EACD;;EAED,IAAIyF,MAAM,GAAGzF,MAAM,CAACyF,MAApB;EACA,IAAItO,QAAQ,GAAG6I,MAAM,CAAC0F,OAAP1F,CAAe4H,GAAf5H,CAAmB,UAAnBA,CAAf;EACA,OAAOyF,MAAM,IAAI,GAAVA,IAAiBA,MAAM,IAAI,GAA3BA,IAAkCtO,QAAQ,IAAI,IAArD;AACF;;AAEA,SAAS4kB,aAAT,CAAuBrH,MAAvB,EAAqC;EACnC,OAAO5K,mBAAmB,CAAClE,GAApBkE,CAAwB4K,MAAM,CAACpR,WAAPoR,EAAxB5K,CAAP;AACF;;AAEA,SAASyH,gBAAT,CACEmD,MADF,EACgB;EAEd,OAAO9K,oBAAoB,CAAChE,GAArBgE,CAAyB8K,MAAM,CAACpR,WAAPoR,EAAzB9K,CAAP;AACF;;AAEA,eAAeqP,gCAAf,CACEnb,OADF,EAEE6W,OAFF,EAGE5N,MAHF,EAIE8R,cAJF,EAKEwH,iBALF,EAK8B;EAE5B,IAAIrqB,OAAO,GAAG4L,MAAM,CAAC5L,OAAP4L,CAAe+S,OAAf/S,CAAd;;EACA,KAAK,IAAIzL,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGH,OAAO,CAACQ,MAApC,EAA4CL,KAAK,EAAjD,EAAqD;IACnD,IAAI,CAACud,OAAD,EAAU1T,MAAV,IAAoBhK,OAAO,CAACG,KAAD,CAA/B;IACA,IAAIgI,KAAK,GAAGL,OAAO,CAAC0e,IAAR1e,CAAcqP,CAAC,IAAK,EAAC,QAADA,GAAC,MAADA,IAAC,CAAE3Q,KAAH2Q,CAASnQ,EAAT,MAAgB0W,OAApC5V,CAAZ,CAFmD,CAGnD;IACA;IACA;;IACA,IAAI,CAACK,KAAL,EAAY;MACV;IACD;;IAED,IAAImiB,YAAY,GAAGzH,cAAc,CAAC2D,IAAf3D,CAChB1L,CAAC,IAAKA,CAAC,CAAC3Q,KAAF2Q,CAAQnQ,EAARmQ,KAAehP,KAAM,CAAC3B,KAAP2B,CAAanB,EADlB6b,CAAnB;IAGA,IAAIkL,oBAAoB,GACtBzD,YAAY,IAAI,IAAhBA,IACA,CAACL,kBAAkB,CAACK,YAAD,EAAeniB,KAAf,CADnBmiB,IAEA,CAACD,iBAAiB,IAAIA,iBAAiB,CAACliB,KAAK,CAAC3B,KAAN2B,CAAYnB,EAAb,CAAvC,MAA6D1G,SAH/D;;IAKA,IAAI0e,gBAAgB,CAAChV,MAAD,CAAhBgV,IAA4B+O,oBAAhC,EAAsD;MACpD;MACA;MACA;MACA,MAAM/L,mBAAmB,CAAChY,MAAD,EAAS+G,MAAT,EAAiB,KAAjB,CAAnBiR,CAA2CxQ,IAA3CwQ,CAAiDhY,MAAM,IAAI;QAC/D,IAAIA,MAAJ,EAAY;UACV2U,OAAO,CAACjB,OAAD,CAAPiB,GAAmB3U,MAAnB2U;QACD;MACF,CAJKqD,CAAN;IAKD;EACF;AACH;;AAEA,eAAekB,6BAAf,CACEpb,OADF,EAEE6W,OAFF,EAGEY,oBAHF,EAG6C;EAE3C,KAAK,IAAIpf,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGof,oBAAoB,CAAC/e,MAAjD,EAAyDL,KAAK,EAA9D,EAAkE;IAChE,IAAI;MAAEe,GAAF;MAAOwc,OAAP;MAAgB/M;IAAhB,IAA+B4O,oBAAoB,CAACpf,KAAD,CAAvD;IACA,IAAI6J,MAAM,GAAG2U,OAAO,CAACzd,GAAD,CAApB;IACA,IAAIiH,KAAK,GAAGL,OAAO,CAAC0e,IAAR1e,CAAcqP,CAAC,IAAK,EAAC,QAADA,GAAC,MAADA,IAAC,CAAE3Q,KAAH2Q,CAASnQ,EAAT,MAAgB0W,OAApC5V,CAAZ,CAHgE,CAIhE;IACA;IACA;;IACA,IAAI,CAACK,KAAL,EAAY;MACV;IACD;;IAED,IAAI6W,gBAAgB,CAAChV,MAAD,CAApB,EAA8B;MAC5B;MACA;MACA;MACA/D,SAAS,CACP0K,UADO,EAEP,sEAFO,CAAT1K;MAIA,MAAM+b,mBAAmB,CAAChY,MAAD,EAAS2G,UAAU,CAACI,MAApB,EAA4B,IAA5B,CAAnBiR,CAAqDxQ,IAArDwQ,CACHhY,MAAM,IAAI;QACT,IAAIA,MAAJ,EAAY;UACV2U,OAAO,CAACzd,GAAD,CAAPyd,GAAe3U,MAAf2U;QACD;MACF,CALGqD,CAAN;IAOD;EACF;AACH;;AAEA,eAAeA,mBAAf,CACEhY,MADF,EAEE+G,MAFF,EAGEid,MAHF,EAGgB;EAAA,IAAdA,MAAM,WAAQ,EAAR;IAANA,MAAM,GAAG,KAATA;EAAc;;EAEd,IAAInc,OAAO,GAAG,MAAM7H,MAAM,CAACuW,YAAPvW,CAAoBwI,WAApBxI,CAAgC+G,MAAhC/G,CAApB;;EACA,IAAI6H,OAAJ,EAAa;IACX;EACD;;EAED,IAAImc,MAAJ,EAAY;IACV,IAAI;MACF,OAAO;QACL/d,IAAI,EAAE7J,UAAU,CAACkC,IADZ;QAELA,IAAI,EAAE0B,MAAM,CAACuW,YAAPvW,CAAoB2I;MAFrB,CAAP;IAID,CALD,CAKE,OAAOlO,CAAP,EAAU;MACV;MACA,OAAO;QACLwL,IAAI,EAAE7J,UAAU,CAACR,KADZ;QAELA,KAAK,EAAEnB;MAFF,CAAP;IAID;EACF;;EAED,OAAO;IACLwL,IAAI,EAAE7J,UAAU,CAACkC,IADZ;IAELA,IAAI,EAAE0B,MAAM,CAACuW,YAAPvW,CAAoB1B;EAFrB,CAAP;AAIF;;AAEA,SAAS6f,kBAAT,CAA4BjmB,MAA5B,EAA0C;EACxC,OAAO,IAAIymB,eAAJ,CAAoBzmB,MAApB,EAA4B+rB,MAA5B,CAAmC,OAAnC,EAA4CljB,IAA5C,CAAkDqC,CAAC,IAAKA,CAAC,KAAK,EAA9D,CAAP;AACF;;AAEA,SAASqR,cAAT,CACE3W,OADF,EAEE3G,QAFF,EAE6B;EAE3B,IAAIe,MAAM,GACR,OAAOf,QAAP,KAAoB,QAApB,GAA+Bc,SAAS,CAACd,QAAD,CAATc,CAAoBC,MAAnD,GAA4Df,QAAQ,CAACe,MADvE;;EAEA,IACE4F,OAAO,CAACA,OAAO,CAACtH,MAARsH,GAAiB,CAAlB,CAAPA,CAA4BtB,KAA5BsB,CAAkC3H,KAAlC2H,IACAqgB,kBAAkB,CAACjmB,MAAM,IAAI,EAAX,CAFpB,EAGE;IACA;IACA,OAAO4F,OAAO,CAACA,OAAO,CAACtH,MAARsH,GAAiB,CAAlB,CAAd;EACD,CAV0B,CAW3B;EACA;;;EACA,IAAIyG,WAAW,GAAGF,0BAA0B,CAACvG,OAAD,CAA5C;EACA,OAAOyG,WAAW,CAACA,WAAW,CAAC/N,MAAZ+N,GAAqB,CAAtB,CAAlB;AACF;;AAEA,SAAS4Q,2BAAT,CACEvH,UADF,EACwB;EAEtB,IAAI;IAAE1D,UAAF;IAAcC,UAAd;IAA0BC,WAA1B;IAAuCE,IAAvC;IAA6CD,QAA7C;IAAuD/E;EAAvD,IACFsI,UADF;;EAEA,IAAI,CAAC1D,UAAD,IAAe,CAACC,UAAhB,IAA8B,CAACC,WAAnC,EAAgD;IAC9C;EACD;;EAED,IAAIE,IAAI,IAAI,IAAZ,EAAkB;IAChB,OAAO;MACLJ,UADK;MAELC,UAFK;MAGLC,WAHK;MAILC,QAAQ,EAAE/T,SAJL;MAKLgP,IAAI,EAAEhP,SALD;MAMLgU;IANK,CAAP;EAQD,CATD,MASO,IAAID,QAAQ,IAAI,IAAhB,EAAsB;IAC3B,OAAO;MACLH,UADK;MAELC,UAFK;MAGLC,WAHK;MAILC,QAJK;MAKL/E,IAAI,EAAEhP,SALD;MAMLgU,IAAI,EAAEhU;IAND,CAAP;EAQD,CATM,MASA,IAAIgP,IAAI,KAAKhP,SAAb,EAAwB;IAC7B,OAAO;MACL4T,UADK;MAELC,UAFK;MAGLC,WAHK;MAILC,QAAQ,EAAE/T,SAJL;MAKLgP,IALK;MAMLgF,IAAI,EAAEhU;IAND,CAAP;EAQD;AACH;;AAEA,SAASsd,oBAAT,CACEzc,QADF,EAEEgb,UAFF,EAEyB;EAEvB,IAAIA,UAAJ,EAAgB;IACd,IAAIvE,UAAU,GAAgC;MAC5CvX,KAAK,EAAE,SADqC;MAE5Cc,QAF4C;MAG5C+S,UAAU,EAAEiI,UAAU,CAACjI,UAHqB;MAI5CC,UAAU,EAAEgI,UAAU,CAAChI,UAJqB;MAK5CC,WAAW,EAAE+H,UAAU,CAAC/H,WALoB;MAM5CC,QAAQ,EAAE8H,UAAU,CAAC9H,QANuB;MAO5C/E,IAAI,EAAE6M,UAAU,CAAC7M,IAP2B;MAQ5CgF,IAAI,EAAE6H,UAAU,CAAC7H;IAR2B,CAA9C;IAUA,OAAOsD,UAAP;EACD,CAZD,MAYO;IACL,IAAIA,UAAU,GAAgC;MAC5CvX,KAAK,EAAE,SADqC;MAE5Cc,QAF4C;MAG5C+S,UAAU,EAAE5T,SAHgC;MAI5C6T,UAAU,EAAE7T,SAJgC;MAK5C8T,WAAW,EAAE9T,SAL+B;MAM5C+T,QAAQ,EAAE/T,SANkC;MAO5CgP,IAAI,EAAEhP,SAPsC;MAQ5CgU,IAAI,EAAEhU;IARsC,CAA9C;IAUA,OAAOsX,UAAP;EACD;AACH;;AAEA,SAASsG,uBAAT,CACE/c,QADF,EAEEgb,UAFF,EAEwB;EAEtB,IAAIvE,UAAU,GAAmC;IAC/CvX,KAAK,EAAE,YADwC;IAE/Cc,QAF+C;IAG/C+S,UAAU,EAAEiI,UAAU,CAACjI,UAHwB;IAI/CC,UAAU,EAAEgI,UAAU,CAAChI,UAJwB;IAK/CC,WAAW,EAAE+H,UAAU,CAAC/H,WALuB;IAM/CC,QAAQ,EAAE8H,UAAU,CAAC9H,QAN0B;IAO/C/E,IAAI,EAAE6M,UAAU,CAAC7M,IAP8B;IAQ/CgF,IAAI,EAAE6H,UAAU,CAAC7H;EAR8B,CAAjD;EAUA,OAAOsD,UAAP;AACF;;AAEA,SAASgJ,iBAAT,CACEzE,UADF,EAEE7T,IAFF,EAEwB;EAEtB,IAAI6T,UAAJ,EAAgB;IACd,IAAIpB,OAAO,GAA6B;MACtC1a,KAAK,EAAE,SAD+B;MAEtC6T,UAAU,EAAEiI,UAAU,CAACjI,UAFe;MAGtCC,UAAU,EAAEgI,UAAU,CAAChI,UAHe;MAItCC,WAAW,EAAE+H,UAAU,CAAC/H,WAJc;MAKtCC,QAAQ,EAAE8H,UAAU,CAAC9H,QALiB;MAMtC/E,IAAI,EAAE6M,UAAU,CAAC7M,IANqB;MAOtCgF,IAAI,EAAE6H,UAAU,CAAC7H,IAPqB;MAQtChM;IARsC,CAAxC;IAUA,OAAOyS,OAAP;EACD,CAZD,MAYO;IACL,IAAIA,OAAO,GAA6B;MACtC1a,KAAK,EAAE,SAD+B;MAEtC6T,UAAU,EAAE5T,SAF0B;MAGtC6T,UAAU,EAAE7T,SAH0B;MAItC8T,WAAW,EAAE9T,SAJyB;MAKtC+T,QAAQ,EAAE/T,SAL4B;MAMtCgP,IAAI,EAAEhP,SANgC;MAOtCgU,IAAI,EAAEhU,SAPgC;MAQtCgI;IARsC,CAAxC;IAUA,OAAOyS,OAAP;EACD;AACH;;AAEA,SAASsG,oBAAT,CACElF,UADF,EAEEgF,eAFF,EAE2B;EAEzB,IAAIpG,OAAO,GAAgC;IACzC1a,KAAK,EAAE,YADkC;IAEzC6T,UAAU,EAAEiI,UAAU,CAACjI,UAFkB;IAGzCC,UAAU,EAAEgI,UAAU,CAAChI,UAHkB;IAIzCC,WAAW,EAAE+H,UAAU,CAAC/H,WAJiB;IAKzCC,QAAQ,EAAE8H,UAAU,CAAC9H,QALoB;IAMzC/E,IAAI,EAAE6M,UAAU,CAAC7M,IANwB;IAOzCgF,IAAI,EAAE6H,UAAU,CAAC7H,IAPwB;IAQzChM,IAAI,EAAE6Y,eAAe,GAAGA,eAAe,CAAC7Y,IAAnB,GAA0BhI;EARN,CAA3C;EAUA,OAAOya,OAAP;AACF;;AAEA,SAAS2G,cAAT,CAAwBpZ,IAAxB,EAA6C;EAC3C,IAAIyS,OAAO,GAA0B;IACnC1a,KAAK,EAAE,MAD4B;IAEnC6T,UAAU,EAAE5T,SAFuB;IAGnC6T,UAAU,EAAE7T,SAHuB;IAInC8T,WAAW,EAAE9T,SAJsB;IAKnC+T,QAAQ,EAAE/T,SALyB;IAMnCgP,IAAI,EAAEhP,SAN6B;IAOnCgU,IAAI,EAAEhU,SAP6B;IAQnCgI;EARmC,CAArC;EAUA,OAAOyS,OAAP;AACF;;AAEA,SAASZ,yBAAT,CACE+T,OADF,EAEEC,WAFF,EAEuC;EAErC,IAAI;IACF,IAAIC,gBAAgB,GAAGF,OAAO,CAACG,cAARH,CAAuBI,OAAvBJ,CACrBnZ,uBADqBmZ,CAAvB;;IAGA,IAAIE,gBAAJ,EAAsB;MACpB,IAAI9e,IAAI,GAAG9N,IAAI,CAACqnB,KAALrnB,CAAW4sB,gBAAX5sB,CAAX;;MACA,KAAK,IAAI,CAAC+Q,CAAD,EAAInF,CAAJ,CAAT,IAAmBxB,MAAM,CAAC5L,OAAP4L,CAAe0D,IAAI,IAAI,EAAvB1D,CAAnB,EAA+C;QAC7C,IAAIwB,CAAC,IAAIiD,KAAK,CAACC,OAAND,CAAcjD,CAAdiD,CAAT,EAA2B;UACzB8d,WAAW,CAACte,GAAZse,CAAgB5b,CAAhB4b,EAAmB,IAAI7nB,GAAJ,CAAQ8G,CAAC,IAAI,EAAb,CAAnB+gB;QACD;MACF;IACF;EACF,CAZD,CAYE,OAAO1pB,CAAP,EAAU,CACV;EAAA;AAEJ;;AAEA,SAAS4V,yBAAT,CACE6T,OADF,EAEEC,WAFF,EAEuC;EAErC,IAAIA,WAAW,CAACzb,IAAZyb,GAAmB,CAAvB,EAA0B;IACxB,IAAI7e,IAAI,GAA6B,EAArC;;IACA,KAAK,IAAI,CAACiD,CAAD,EAAInF,CAAJ,CAAT,IAAmB+gB,WAAnB,EAAgC;MAC9B7e,IAAI,CAACiD,CAAD,CAAJjD,GAAU,CAAC,GAAGlC,CAAJ,CAAVkC;IACD;;IACD,IAAI;MACF4e,OAAO,CAACG,cAARH,CAAuBK,OAAvBL,CACEnZ,uBADFmZ,EAEE1sB,IAAI,CAACC,SAALD,CAAe8N,IAAf9N,CAFF0sB;IAID,CALD,CAKE,OAAOtoB,KAAP,EAAc;MACdtE,OAAO,CACL,KADK,EAEyDsE,wEAAK,IAF9D,CAAPtE;IAID;EACF;AACH,C,CACA","names":["Action","PopStateEventType","options","initialEntries","initialIndex","v5Compat","entries","map","entry","index","createMemoryLocation","state","undefined","clampIndex","length","action","Pop","listener","n","Math","min","max","getCurrentLocation","to","key","location","createLocation","pathname","warning","charAt","JSON","stringify","createHref","createPath","history","createURL","URL","encodeLocation","path","parsePath","search","hash","push","Push","nextLocation","splice","delta","replace","Replace","go","nextIndex","listen","fn","createBrowserLocation","window","globalHistory","usr","createBrowserHref","getUrlBasedHistory","createHashLocation","substr","startsWith","createHashHref","base","document","querySelector","href","getAttribute","url","hashIndex","indexOf","slice","validateHashLocation","value","message","Error","cond","console","warn","e","createKey","random","toString","getHistoryState","idx","current","_ref","parsedPath","searchIndex","getLocation","validateLocation","defaultView","getIndex","replaceState","_extends","handlePop","historyState","pushState","error","DOMException","name","assign","origin","invariant","addEventListener","removeEventListener","ResultType","immutableRouteKeys","Set","isIndexRoute","route","convertRoutesToDataRoutes","routes","mapRouteProperties","parentPath","manifest","treePath","String","id","join","children","indexRoute","pathOrLayoutRoute","matchRoutes","locationArg","basename","matchRoutesImpl","allowPartial","stripBasename","branches","flattenRoutes","rankRouteBranches","matches","i","decoded","decodePath","matchRouteBranch","match","loaderData","params","data","handle","parentsMeta","flattenRoute","relativePath","meta","caseSensitive","childrenIndex","joinPaths","routesMeta","concat","score","computeScore","forEach","_route$path","includes","exploded","explodeOptionalSegments","segments","split","first","rest","isOptional","endsWith","required","restExploded","result","subpath","sort","a","b","compareIndexes","paramRe","dynamicSegmentValue","indexRouteValue","emptySegmentValue","staticSegmentValue","splatPenalty","isSplat","s","initialScore","some","filter","reduce","segment","test","siblings","every","branch","matchedParams","matchedPathname","end","remainingPathname","matchPath","Object","pathnameBase","normalizePathname","generatePath","originalPath","prefix","p","array","isLastSegment","star","keyMatch","optional","param","pattern","matcher","compiledParams","compilePath","captureGroups","memo","paramName","splatValue","regexpSource","_","RegExp","v","decodeURIComponent","toLowerCase","startIndex","nextChar","resolvePath","fromPathname","toPathname","resolvePathname","normalizeSearch","normalizeHash","relativeSegments","pop","getInvalidPathError","char","field","dest","getPathContributingMatches","v7_relativeSplatPath","pathMatches","resolveTo","toArg","routePathnames","locationPathname","isPathRelative","isEmptyPath","from","routePathnameIndex","toSegments","shift","hasExplicitTrailingSlash","hasCurrentTrailingSlash","getToPathname","paths","json","init","responseInit","status","headers","Headers","has","set","Response","DataWithResponseInit","constructor","type","AbortedDeferredError","DeferredData","deferredKeys","Array","isArray","reject","abortPromise","Promise","r","controller","AbortController","onAbort","unlistenAbortSignal","signal","acc","_ref2","trackPromise","done","pendingKeysSet","add","promise","race","then","onSettle","catch","defineProperty","get","aborted","delete","undefinedError","emit","settledKey","subscribers","subscriber","subscribe","cancel","abort","k","resolveData","resolve","size","unwrappedData","_ref3","unwrapTrackedPromise","pendingKeys","isTrackedPromise","_tracked","_error","_data","defer","redirect","redirectDocument","response","ErrorResponseImpl","statusText","internal","isRouteErrorResponse","validMutationMethodsArr","validMutationMethods","validRequestMethodsArr","validRequestMethods","redirectStatusCodes","redirectPreserveMethodStatusCodes","IDLE_NAVIGATION","formMethod","formAction","formEncType","formData","text","IDLE_FETCHER","IDLE_BLOCKER","proceed","reset","ABSOLUTE_URL_REGEX","defaultMapRouteProperties","hasErrorBoundary","Boolean","TRANSITIONS_STORAGE_KEY","createRouter","routerWindow","isBrowser","createElement","isServer","detectErrorBoundary","dataRoutes","inFlightDataRoutes","dataStrategyImpl","unstable_dataStrategy","defaultDataStrategy","patchRoutesOnNavigationImpl","unstable_patchRoutesOnNavigation","future","v7_fetcherPersist","v7_normalizeFormMethod","v7_partialHydration","v7_prependBasename","v7_skipActionErrorRevalidation","unlistenHistory","discoveredRoutesMaxSize","discoveredRoutes","savedScrollPositions","getScrollRestorationKey","getScrollPosition","initialScrollRestored","hydrationData","initialMatches","initialErrors","getInternalRouterError","getShortCircuitMatches","fogOfWar","checkFogOfWar","active","initialized","m","lazy","loader","errors","isRouteInitialized","hydrate","findIndex","router","historyAction","navigation","restoreScrollPosition","preventScrollReset","revalidation","actionData","fetchers","Map","blockers","pendingAction","HistoryAction","pendingPreventScrollReset","pendingNavigationController","pendingViewTransitionEnabled","appliedViewTransitions","removePageHideEventListener","isUninterruptedRevalidation","isRevalidationRequired","cancelledDeferredRoutes","cancelledFetcherLoads","fetchControllers","incrementingLoadId","pendingNavigationLoadId","fetchReloadIds","fetchRedirectIds","fetchLoadMatches","activeFetchers","deletedFetchers","activeDeferreds","blockerFunctions","pendingPatchRoutes","unblockBlockerHistoryUpdate","initialize","blockerKey","shouldBlockNavigation","currentLocation","nextHistoryUpdatePromise","updateBlocker","updateState","startNavigation","restoreAppliedTransitions","_saveAppliedTransitions","persistAppliedTransitions","initialHydration","dispose","clear","deleteFetcher","deleteBlocker","newState","opts","completedFetchers","deletedFetchersKeys","fetcher","unstable_viewTransitionOpts","viewTransitionOpts","unstable_flushSync","flushSync","completeNavigation","_temp","isActionReload","isMutationMethod","_isRedirect","keys","mergeLoaderData","priorPaths","toPaths","getSavedScrollPosition","navigate","normalizedPath","normalizeTo","fromRouteId","relative","submission","normalizeNavigateOptions","userReplace","pendingError","enableViewTransition","unstable_viewTransition","revalidate","interruptActiveLoads","startUninterruptedRevalidation","overrideNavigation","saveScrollPosition","routesToUse","loadingNavigation","notFoundMatches","handleNavigational404","isHashChangeOnly","request","createClientSideRequest","pendingActionResult","findNearestBoundary","actionResult","handleAction","shortCircuited","routeId","isErrorResult","getLoadingNavigation","updatedMatches","handleLoaders","fetcherSubmission","getActionDataForCommit","isFogOfWar","getSubmittingNavigation","discoverResult","discoverRoutes","boundaryId","handleDiscoverRouteError","partialMatches","actionMatch","getTargetMatch","method","results","callDataStrategy","isRedirectResult","normalizeRedirectLocation","startRedirectNavigation","isDeferredResult","boundaryMatch","activeSubmission","getSubmissionFromNavigation","shouldUpdateNavigationState","getUpdatedActionData","matchesToLoad","revalidatingFetchers","getMatchesToLoad","cancelActiveDeferreds","updatedFetchers","markFetchRedirectsDone","updates","getUpdatedRevalidatingFetchers","rf","abortFetcher","abortPendingFetchRevalidations","f","loaderResults","fetcherResults","callLoadersAndMaybeResolveData","findRedirect","processLoaderData","deferredData","didAbortFetchLoads","abortStaleFetchLoads","shouldUpdateFetchers","revalidatingFetcher","getLoadingFetcher","fetch","setFetcherError","handleFetcherAction","handleFetcherLoader","requestMatches","detectAndHandle405Error","existingFetcher","updateFetcherState","getSubmittingFetcher","abortController","fetchRequest","originatingLoadId","actionResults","getDoneFetcher","revalidationRequest","loadId","loadFetcher","staleKey","doneFetcher","resolveDeferredData","isNavigation","_temp2","redirectLocation","isDocumentReload","redirectHistoryAction","fetcherKey","dataResults","callDataStrategyImpl","isRedirectDataStrategyResultResult","normalizeRelativeRoutingRedirectResponse","convertDataStrategyResultToDataResult","fetchersToLoad","currentMatches","loaderResultsPromise","fetcherResultsPromise","all","resolveNavigationDeferredResults","resolveFetcherDeferredResults","getFetcher","deleteFetcherAndUpdateState","count","markFetchersDone","doneKeys","landedId","yeetedKeys","getBlocker","blocker","newBlocker","_ref4","blockerFunction","predicate","cancelledRouteIds","dfd","enableScrollRestoration","positions","getPosition","getKey","y","getScrollKey","convertRouteMatchToUiMatch","fogMatches","isNonHMR","loadLazyRouteChildren","newMatches","addToFifoQueue","newPartialMatches","queue","values","next","_internalSetRoutes","newRoutes","patchRoutes","patchRoutesImpl","_internalFetchControllers","_internalActiveDeferreds","UNSAFE_DEFERRED_SYMBOL","Symbol","v7_throwAbortReason","query","_temp3","requestContext","skipLoaderErrorBubbling","isValidMethod","methodNotAllowedMatches","statusCode","loaderHeaders","actionHeaders","queryImpl","isResponse","queryRoute","_temp4","find","_result$activeDeferre","routeMatch","submit","loadRouteData","isDataStrategyResult","isRedirectResponse","isRouteRequest","throwStaticHandlerAbortedError","Location","loaderRequest","Request","context","getLoaderMatchesUntilBoundary","processRouteLoaderData","executedLoaders","fromEntries","getStaticContextFromError","newContext","_deepestRenderedBoundaryId","reason","isSubmissionNavigation","body","prependBasename","contextualMatches","activeRouteMatch","getResolveToMatches","hasNakedIndexQuery","normalizeFormMethod","isFetcher","getInvalidBodyError","rawFormMethod","toUpperCase","stripHashFromPath","FormData","URLSearchParams","_ref5","parse","searchParams","convertFormDataToSearchParams","convertSearchParamsToFormData","append","boundaryMatches","isInitialLoad","skipActionErrorRevalidation","currentUrl","nextUrl","actionStatus","shouldSkipRevalidation","navigationMatches","isNewLoader","currentRouteMatch","nextRouteMatch","shouldRevalidateLoader","currentParams","nextParams","defaultShouldRevalidate","isNewRouteInstance","fetcherMatches","fetcherMatch","shouldRevalidate","currentLoaderData","currentMatch","isNew","isMissingData","currentPath","loaderMatch","arg","routeChoice","pendingRouteChildren","pending","patch","isPromise","dataChildren","_route$children","loadLazyRouteModule","lazyRoute","routeToUpdate","routeUpdates","lazyRouteProperty","staticRouteValue","isPropertyStaticallyDefined","_ref6","shouldLoad","loadRouteDefinitionsPromises","dsMatches","loadRoutePromise","handlerOverride","callLoaderOrAction","staticContext","onReject","runHandler","handler","actualHandler","ctx","handlerPromise","val","handlerError","dataStrategyResult","contentType","isDataWithResponseInit","_result$init","isDeferredData","deferred","_result$init3","_result$init4","_result$init5","trimmedMatches","normalizedLocation","protocol","isSameBasename","foundError","newLoaderData","mergedLoaderData","hasOwnProperty","eligibleMatches","reverse","_temp5","errorMessage","isRevalidatingLoader","unwrap","getAll","_window","transitions","sessionPositions","sessionStorage","getItem","setItem"],"sources":["E:\\Project\\EAD 2\\react-shopping-main\\node_modules\\@remix-run\\router\\history.ts","E:\\Project\\EAD 2\\react-shopping-main\\node_modules\\@remix-run\\router\\utils.ts","E:\\Project\\EAD 2\\react-shopping-main\\node_modules\\@remix-run\\router\\router.ts"],"sourcesContent":["////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Actions represent the type of change to a location value.\n */\nexport enum Action {\n  /**\n   * A POP indicates a change to an arbitrary index in the history stack, such\n   * as a back or forward navigation. It does not describe the direction of the\n   * navigation, only that the current index changed.\n   *\n   * Note: This is the default action for newly created history objects.\n   */\n  Pop = \"POP\",\n\n  /**\n   * A PUSH indicates a new entry being added to the history stack, such as when\n   * a link is clicked and a new page loads. When this happens, all subsequent\n   * entries in the stack are lost.\n   */\n  Push = \"PUSH\",\n\n  /**\n   * A REPLACE indicates the entry at the current index in the history stack\n   * being replaced by a new one.\n   */\n  Replace = \"REPLACE\",\n}\n\n/**\n * The pathname, search, and hash values of a URL.\n */\nexport interface Path {\n  /**\n   * A URL pathname, beginning with a /.\n   */\n  pathname: string;\n\n  /**\n   * A URL search string, beginning with a ?.\n   */\n  search: string;\n\n  /**\n   * A URL fragment identifier, beginning with a #.\n   */\n  hash: string;\n}\n\n// TODO: (v7) Change the Location generic default from `any` to `unknown` and\n// remove Remix `useLocation` wrapper.\n\n/**\n * An entry in a history stack. A location contains information about the\n * URL path, as well as possibly some arbitrary state and a key.\n */\nexport interface Location<State = any> extends Path {\n  /**\n   * A value of arbitrary data associated with this location.\n   */\n  state: State;\n\n  /**\n   * A unique string associated with this location. May be used to safely store\n   * and retrieve data in some other storage API, like `localStorage`.\n   *\n   * Note: This value is always \"default\" on the initial location.\n   */\n  key: string;\n}\n\n/**\n * A change to the current location.\n */\nexport interface Update {\n  /**\n   * The action that triggered the change.\n   */\n  action: Action;\n\n  /**\n   * The new location.\n   */\n  location: Location;\n\n  /**\n   * The delta between this location and the former location in the history stack\n   */\n  delta: number | null;\n}\n\n/**\n * A function that receives notifications about location changes.\n */\nexport interface Listener {\n  (update: Update): void;\n}\n\n/**\n * Describes a location that is the destination of some navigation, either via\n * `history.push` or `history.replace`. This may be either a URL or the pieces\n * of a URL path.\n */\nexport type To = string | Partial<Path>;\n\n/**\n * A history is an interface to the navigation stack. The history serves as the\n * source of truth for the current location, as well as provides a set of\n * methods that may be used to change it.\n *\n * It is similar to the DOM's `window.history` object, but with a smaller, more\n * focused API.\n */\nexport interface History {\n  /**\n   * The last action that modified the current location. This will always be\n   * Action.Pop when a history instance is first created. This value is mutable.\n   */\n  readonly action: Action;\n\n  /**\n   * The current location. This value is mutable.\n   */\n  readonly location: Location;\n\n  /**\n   * Returns a valid href for the given `to` value that may be used as\n   * the value of an <a href> attribute.\n   *\n   * @param to - The destination URL\n   */\n  createHref(to: To): string;\n\n  /**\n   * Returns a URL for the given `to` value\n   *\n   * @param to - The destination URL\n   */\n  createURL(to: To): URL;\n\n  /**\n   * Encode a location the same way window.history would do (no-op for memory\n   * history) so we ensure our PUSH/REPLACE navigations for data routers\n   * behave the same as POP\n   *\n   * @param to Unencoded path\n   */\n  encodeLocation(to: To): Path;\n\n  /**\n   * Pushes a new location onto the history stack, increasing its length by one.\n   * If there were any entries in the stack after the current one, they are\n   * lost.\n   *\n   * @param to - The new URL\n   * @param state - Data to associate with the new location\n   */\n  push(to: To, state?: any): void;\n\n  /**\n   * Replaces the current location in the history stack with a new one.  The\n   * location that was replaced will no longer be available.\n   *\n   * @param to - The new URL\n   * @param state - Data to associate with the new location\n   */\n  replace(to: To, state?: any): void;\n\n  /**\n   * Navigates `n` entries backward/forward in the history stack relative to the\n   * current index. For example, a \"back\" navigation would use go(-1).\n   *\n   * @param delta - The delta in the stack index\n   */\n  go(delta: number): void;\n\n  /**\n   * Sets up a listener that will be called whenever the current location\n   * changes.\n   *\n   * @param listener - A function that will be called when the location changes\n   * @returns unlisten - A function that may be used to stop listening\n   */\n  listen(listener: Listener): () => void;\n}\n\ntype HistoryState = {\n  usr: any;\n  key?: string;\n  idx: number;\n};\n\nconst PopStateEventType = \"popstate\";\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Memory History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A user-supplied object that describes a location. Used when providing\n * entries to `createMemoryHistory` via its `initialEntries` option.\n */\nexport type InitialEntry = string | Partial<Location>;\n\nexport type MemoryHistoryOptions = {\n  initialEntries?: InitialEntry[];\n  initialIndex?: number;\n  v5Compat?: boolean;\n};\n\n/**\n * A memory history stores locations in memory. This is useful in stateful\n * environments where there is no web browser, such as node tests or React\n * Native.\n */\nexport interface MemoryHistory extends History {\n  /**\n   * The current index in the history stack.\n   */\n  readonly index: number;\n}\n\n/**\n * Memory history stores the current location in memory. It is designed for use\n * in stateful non-browser environments like tests and React Native.\n */\nexport function createMemoryHistory(\n  options: MemoryHistoryOptions = {}\n): MemoryHistory {\n  let { initialEntries = [\"/\"], initialIndex, v5Compat = false } = options;\n  let entries: Location[]; // Declare so we can access from createMemoryLocation\n  entries = initialEntries.map((entry, index) =>\n    createMemoryLocation(\n      entry,\n      typeof entry === \"string\" ? null : entry.state,\n      index === 0 ? \"default\" : undefined\n    )\n  );\n  let index = clampIndex(\n    initialIndex == null ? entries.length - 1 : initialIndex\n  );\n  let action = Action.Pop;\n  let listener: Listener | null = null;\n\n  function clampIndex(n: number): number {\n    return Math.min(Math.max(n, 0), entries.length - 1);\n  }\n  function getCurrentLocation(): Location {\n    return entries[index];\n  }\n  function createMemoryLocation(\n    to: To,\n    state: any = null,\n    key?: string\n  ): Location {\n    let location = createLocation(\n      entries ? getCurrentLocation().pathname : \"/\",\n      to,\n      state,\n      key\n    );\n    warning(\n      location.pathname.charAt(0) === \"/\",\n      `relative pathnames are not supported in memory history: ${JSON.stringify(\n        to\n      )}`\n    );\n    return location;\n  }\n\n  function createHref(to: To) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  let history: MemoryHistory = {\n    get index() {\n      return index;\n    },\n    get action() {\n      return action;\n    },\n    get location() {\n      return getCurrentLocation();\n    },\n    createHref,\n    createURL(to) {\n      return new URL(createHref(to), \"http://localhost\");\n    },\n    encodeLocation(to: To) {\n      let path = typeof to === \"string\" ? parsePath(to) : to;\n      return {\n        pathname: path.pathname || \"\",\n        search: path.search || \"\",\n        hash: path.hash || \"\",\n      };\n    },\n    push(to, state) {\n      action = Action.Push;\n      let nextLocation = createMemoryLocation(to, state);\n      index += 1;\n      entries.splice(index, entries.length, nextLocation);\n      if (v5Compat && listener) {\n        listener({ action, location: nextLocation, delta: 1 });\n      }\n    },\n    replace(to, state) {\n      action = Action.Replace;\n      let nextLocation = createMemoryLocation(to, state);\n      entries[index] = nextLocation;\n      if (v5Compat && listener) {\n        listener({ action, location: nextLocation, delta: 0 });\n      }\n    },\n    go(delta) {\n      action = Action.Pop;\n      let nextIndex = clampIndex(index + delta);\n      let nextLocation = entries[nextIndex];\n      index = nextIndex;\n      if (listener) {\n        listener({ action, location: nextLocation, delta });\n      }\n    },\n    listen(fn: Listener) {\n      listener = fn;\n      return () => {\n        listener = null;\n      };\n    },\n  };\n\n  return history;\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Browser History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A browser history stores the current location in regular URLs in a web\n * browser environment. This is the standard for most web apps and provides the\n * cleanest URLs the browser's address bar.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#browserhistory\n */\nexport interface BrowserHistory extends UrlHistory {}\n\nexport type BrowserHistoryOptions = UrlHistoryOptions;\n\n/**\n * Browser history stores the location in regular URLs. This is the standard for\n * most web apps, but it requires some configuration on the server to ensure you\n * serve the same app at multiple URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createbrowserhistory\n */\nexport function createBrowserHistory(\n  options: BrowserHistoryOptions = {}\n): BrowserHistory {\n  function createBrowserLocation(\n    window: Window,\n    globalHistory: Window[\"history\"]\n  ) {\n    let { pathname, search, hash } = window.location;\n    return createLocation(\n      \"\",\n      { pathname, search, hash },\n      // state defaults to `null` because `window.history.state` does\n      (globalHistory.state && globalHistory.state.usr) || null,\n      (globalHistory.state && globalHistory.state.key) || \"default\"\n    );\n  }\n\n  function createBrowserHref(window: Window, to: To) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  return getUrlBasedHistory(\n    createBrowserLocation,\n    createBrowserHref,\n    null,\n    options\n  );\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Hash History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A hash history stores the current location in the fragment identifier portion\n * of the URL in a web browser environment.\n *\n * This is ideal for apps that do not control the server for some reason\n * (because the fragment identifier is never sent to the server), including some\n * shared hosting environments that do not provide fine-grained controls over\n * which pages are served at which URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#hashhistory\n */\nexport interface HashHistory extends UrlHistory {}\n\nexport type HashHistoryOptions = UrlHistoryOptions;\n\n/**\n * Hash history stores the location in window.location.hash. This makes it ideal\n * for situations where you don't want to send the location to the server for\n * some reason, either because you do cannot configure it or the URL space is\n * reserved for something else.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createhashhistory\n */\nexport function createHashHistory(\n  options: HashHistoryOptions = {}\n): HashHistory {\n  function createHashLocation(\n    window: Window,\n    globalHistory: Window[\"history\"]\n  ) {\n    let {\n      pathname = \"/\",\n      search = \"\",\n      hash = \"\",\n    } = parsePath(window.location.hash.substr(1));\n\n    // Hash URL should always have a leading / just like window.location.pathname\n    // does, so if an app ends up at a route like /#something then we add a\n    // leading slash so all of our path-matching behaves the same as if it would\n    // in a browser router.  This is particularly important when there exists a\n    // root splat route (<Route path=\"*\">) since that matches internally against\n    // \"/*\" and we'd expect /#something to 404 in a hash router app.\n    if (!pathname.startsWith(\"/\") && !pathname.startsWith(\".\")) {\n      pathname = \"/\" + pathname;\n    }\n\n    return createLocation(\n      \"\",\n      { pathname, search, hash },\n      // state defaults to `null` because `window.history.state` does\n      (globalHistory.state && globalHistory.state.usr) || null,\n      (globalHistory.state && globalHistory.state.key) || \"default\"\n    );\n  }\n\n  function createHashHref(window: Window, to: To) {\n    let base = window.document.querySelector(\"base\");\n    let href = \"\";\n\n    if (base && base.getAttribute(\"href\")) {\n      let url = window.location.href;\n      let hashIndex = url.indexOf(\"#\");\n      href = hashIndex === -1 ? url : url.slice(0, hashIndex);\n    }\n\n    return href + \"#\" + (typeof to === \"string\" ? to : createPath(to));\n  }\n\n  function validateHashLocation(location: Location, to: To) {\n    warning(\n      location.pathname.charAt(0) === \"/\",\n      `relative pathnames are not supported in hash history.push(${JSON.stringify(\n        to\n      )})`\n    );\n  }\n\n  return getUrlBasedHistory(\n    createHashLocation,\n    createHashHref,\n    validateHashLocation,\n    options\n  );\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region UTILS\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * @private\n */\nexport function invariant(value: boolean, message?: string): asserts value;\nexport function invariant<T>(\n  value: T | null | undefined,\n  message?: string\n): asserts value is T;\nexport function invariant(value: any, message?: string) {\n  if (value === false || value === null || typeof value === \"undefined\") {\n    throw new Error(message);\n  }\n}\n\nexport function warning(cond: any, message: string) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging history!\n      //\n      // This error is thrown as a convenience, so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\nfunction createKey() {\n  return Math.random().toString(36).substr(2, 8);\n}\n\n/**\n * For browser-based histories, we combine the state and key into an object\n */\nfunction getHistoryState(location: Location, index: number): HistoryState {\n  return {\n    usr: location.state,\n    key: location.key,\n    idx: index,\n  };\n}\n\n/**\n * Creates a Location object with a unique key from the given Path\n */\nexport function createLocation(\n  current: string | Location,\n  to: To,\n  state: any = null,\n  key?: string\n): Readonly<Location> {\n  let location: Readonly<Location> = {\n    pathname: typeof current === \"string\" ? current : current.pathname,\n    search: \"\",\n    hash: \"\",\n    ...(typeof to === \"string\" ? parsePath(to) : to),\n    state,\n    // TODO: This could be cleaned up.  push/replace should probably just take\n    // full Locations now and avoid the need to run through this flow at all\n    // But that's a pretty big refactor to the current test suite so going to\n    // keep as is for the time being and just let any incoming keys take precedence\n    key: (to && (to as Location).key) || key || createKey(),\n  };\n  return location;\n}\n\n/**\n * Creates a string URL path from the given pathname, search, and hash components.\n */\nexport function createPath({\n  pathname = \"/\",\n  search = \"\",\n  hash = \"\",\n}: Partial<Path>) {\n  if (search && search !== \"?\")\n    pathname += search.charAt(0) === \"?\" ? search : \"?\" + search;\n  if (hash && hash !== \"#\")\n    pathname += hash.charAt(0) === \"#\" ? hash : \"#\" + hash;\n  return pathname;\n}\n\n/**\n * Parses a string URL path into its separate pathname, search, and hash components.\n */\nexport function parsePath(path: string): Partial<Path> {\n  let parsedPath: Partial<Path> = {};\n\n  if (path) {\n    let hashIndex = path.indexOf(\"#\");\n    if (hashIndex >= 0) {\n      parsedPath.hash = path.substr(hashIndex);\n      path = path.substr(0, hashIndex);\n    }\n\n    let searchIndex = path.indexOf(\"?\");\n    if (searchIndex >= 0) {\n      parsedPath.search = path.substr(searchIndex);\n      path = path.substr(0, searchIndex);\n    }\n\n    if (path) {\n      parsedPath.pathname = path;\n    }\n  }\n\n  return parsedPath;\n}\n\nexport interface UrlHistory extends History {}\n\nexport type UrlHistoryOptions = {\n  window?: Window;\n  v5Compat?: boolean;\n};\n\nfunction getUrlBasedHistory(\n  getLocation: (window: Window, globalHistory: Window[\"history\"]) => Location,\n  createHref: (window: Window, to: To) => string,\n  validateLocation: ((location: Location, to: To) => void) | null,\n  options: UrlHistoryOptions = {}\n): UrlHistory {\n  let { window = document.defaultView!, v5Compat = false } = options;\n  let globalHistory = window.history;\n  let action = Action.Pop;\n  let listener: Listener | null = null;\n\n  let index = getIndex()!;\n  // Index should only be null when we initialize. If not, it's because the\n  // user called history.pushState or history.replaceState directly, in which\n  // case we should log a warning as it will result in bugs.\n  if (index == null) {\n    index = 0;\n    globalHistory.replaceState({ ...globalHistory.state, idx: index }, \"\");\n  }\n\n  function getIndex(): number {\n    let state = globalHistory.state || { idx: null };\n    return state.idx;\n  }\n\n  function handlePop() {\n    action = Action.Pop;\n    let nextIndex = getIndex();\n    let delta = nextIndex == null ? null : nextIndex - index;\n    index = nextIndex;\n    if (listener) {\n      listener({ action, location: history.location, delta });\n    }\n  }\n\n  function push(to: To, state?: any) {\n    action = Action.Push;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n\n    index = getIndex() + 1;\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n\n    // try...catch because iOS limits us to 100 pushState calls :/\n    try {\n      globalHistory.pushState(historyState, \"\", url);\n    } catch (error) {\n      // If the exception is because `state` can't be serialized, let that throw\n      // outwards just like a replace call would so the dev knows the cause\n      // https://html.spec.whatwg.org/multipage/nav-history-apis.html#shared-history-push/replace-state-steps\n      // https://html.spec.whatwg.org/multipage/structured-data.html#structuredserializeinternal\n      if (error instanceof DOMException && error.name === \"DataCloneError\") {\n        throw error;\n      }\n      // They are going to lose state here, but there is no real\n      // way to warn them about it since the page will refresh...\n      window.location.assign(url);\n    }\n\n    if (v5Compat && listener) {\n      listener({ action, location: history.location, delta: 1 });\n    }\n  }\n\n  function replace(to: To, state?: any) {\n    action = Action.Replace;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n\n    index = getIndex();\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n    globalHistory.replaceState(historyState, \"\", url);\n\n    if (v5Compat && listener) {\n      listener({ action, location: history.location, delta: 0 });\n    }\n  }\n\n  function createURL(to: To): URL {\n    // window.location.origin is \"null\" (the literal string value) in Firefox\n    // under certain conditions, notably when serving from a local HTML file\n    // See https://bugzilla.mozilla.org/show_bug.cgi?id=878297\n    let base =\n      window.location.origin !== \"null\"\n        ? window.location.origin\n        : window.location.href;\n\n    let href = typeof to === \"string\" ? to : createPath(to);\n    // Treating this as a full URL will strip any trailing spaces so we need to\n    // pre-encode them since they might be part of a matching splat param from\n    // an ancestor route\n    href = href.replace(/ $/, \"%20\");\n    invariant(\n      base,\n      `No window.location.(origin|href) available to create URL for href: ${href}`\n    );\n    return new URL(href, base);\n  }\n\n  let history: History = {\n    get action() {\n      return action;\n    },\n    get location() {\n      return getLocation(window, globalHistory);\n    },\n    listen(fn: Listener) {\n      if (listener) {\n        throw new Error(\"A history only accepts one active listener\");\n      }\n      window.addEventListener(PopStateEventType, handlePop);\n      listener = fn;\n\n      return () => {\n        window.removeEventListener(PopStateEventType, handlePop);\n        listener = null;\n      };\n    },\n    createHref(to) {\n      return createHref(window, to);\n    },\n    createURL,\n    encodeLocation(to) {\n      // Encode a Location the same way window.location would\n      let url = createURL(to);\n      return {\n        pathname: url.pathname,\n        search: url.search,\n        hash: url.hash,\n      };\n    },\n    push,\n    replace,\n    go(n) {\n      return globalHistory.go(n);\n    },\n  };\n\n  return history;\n}\n\n//#endregion\n","import type { Location, Path, To } from \"./history\";\nimport { invariant, parsePath, warning } from \"./history\";\n\n/**\n * Map of routeId -> data returned from a loader/action/error\n */\nexport interface RouteData {\n  [routeId: string]: any;\n}\n\nexport enum ResultType {\n  data = \"data\",\n  deferred = \"deferred\",\n  redirect = \"redirect\",\n  error = \"error\",\n}\n\n/**\n * Successful result from a loader or action\n */\nexport interface SuccessResult {\n  type: ResultType.data;\n  data: unknown;\n  statusCode?: number;\n  headers?: Headers;\n}\n\n/**\n * Successful defer() result from a loader or action\n */\nexport interface DeferredResult {\n  type: ResultType.deferred;\n  deferredData: DeferredData;\n  statusCode?: number;\n  headers?: Headers;\n}\n\n/**\n * Redirect result from a loader or action\n */\nexport interface RedirectResult {\n  type: ResultType.redirect;\n  // We keep the raw Response for redirects so we can return it verbatim\n  response: Response;\n}\n\n/**\n * Unsuccessful result from a loader or action\n */\nexport interface ErrorResult {\n  type: ResultType.error;\n  error: unknown;\n  statusCode?: number;\n  headers?: Headers;\n}\n\n/**\n * Result from a loader or action - potentially successful or unsuccessful\n */\nexport type DataResult =\n  | SuccessResult\n  | DeferredResult\n  | RedirectResult\n  | ErrorResult;\n\ntype LowerCaseFormMethod = \"get\" | \"post\" | \"put\" | \"patch\" | \"delete\";\ntype UpperCaseFormMethod = Uppercase<LowerCaseFormMethod>;\n\n/**\n * Users can specify either lowercase or uppercase form methods on `<Form>`,\n * useSubmit(), `<fetcher.Form>`, etc.\n */\nexport type HTMLFormMethod = LowerCaseFormMethod | UpperCaseFormMethod;\n\n/**\n * Active navigation/fetcher form methods are exposed in lowercase on the\n * RouterState\n */\nexport type FormMethod = LowerCaseFormMethod;\nexport type MutationFormMethod = Exclude<FormMethod, \"get\">;\n\n/**\n * In v7, active navigation/fetcher form methods are exposed in uppercase on the\n * RouterState.  This is to align with the normalization done via fetch().\n */\nexport type V7_FormMethod = UpperCaseFormMethod;\nexport type V7_MutationFormMethod = Exclude<V7_FormMethod, \"GET\">;\n\nexport type FormEncType =\n  | \"application/x-www-form-urlencoded\"\n  | \"multipart/form-data\"\n  | \"application/json\"\n  | \"text/plain\";\n\n// Thanks https://github.com/sindresorhus/type-fest!\ntype JsonObject = { [Key in string]: JsonValue } & {\n  [Key in string]?: JsonValue | undefined;\n};\ntype JsonArray = JsonValue[] | readonly JsonValue[];\ntype JsonPrimitive = string | number | boolean | null;\ntype JsonValue = JsonPrimitive | JsonObject | JsonArray;\n\n/**\n * @private\n * Internal interface to pass around for action submissions, not intended for\n * external consumption\n */\nexport type Submission =\n  | {\n      formMethod: FormMethod | V7_FormMethod;\n      formAction: string;\n      formEncType: FormEncType;\n      formData: FormData;\n      json: undefined;\n      text: undefined;\n    }\n  | {\n      formMethod: FormMethod | V7_FormMethod;\n      formAction: string;\n      formEncType: FormEncType;\n      formData: undefined;\n      json: JsonValue;\n      text: undefined;\n    }\n  | {\n      formMethod: FormMethod | V7_FormMethod;\n      formAction: string;\n      formEncType: FormEncType;\n      formData: undefined;\n      json: undefined;\n      text: string;\n    };\n\n/**\n * @private\n * Arguments passed to route loader/action functions.  Same for now but we keep\n * this as a private implementation detail in case they diverge in the future.\n */\ninterface DataFunctionArgs<Context> {\n  request: Request;\n  params: Params;\n  context?: Context;\n}\n\n// TODO: (v7) Change the defaults from any to unknown in and remove Remix wrappers:\n//   ActionFunction, ActionFunctionArgs, LoaderFunction, LoaderFunctionArgs\n//   Also, make them a type alias instead of an interface\n\n/**\n * Arguments passed to loader functions\n */\nexport interface LoaderFunctionArgs<Context = any>\n  extends DataFunctionArgs<Context> {}\n\n/**\n * Arguments passed to action functions\n */\nexport interface ActionFunctionArgs<Context = any>\n  extends DataFunctionArgs<Context> {}\n\n/**\n * Loaders and actions can return anything except `undefined` (`null` is a\n * valid return value if there is no data to return).  Responses are preferred\n * and will ease any future migration to Remix\n */\ntype DataFunctionValue = Response | NonNullable<unknown> | null;\n\ntype DataFunctionReturnValue = Promise<DataFunctionValue> | DataFunctionValue;\n\n/**\n * Route loader function signature\n */\nexport type LoaderFunction<Context = any> = {\n  (\n    args: LoaderFunctionArgs<Context>,\n    handlerCtx?: unknown\n  ): DataFunctionReturnValue;\n} & { hydrate?: boolean };\n\n/**\n * Route action function signature\n */\nexport interface ActionFunction<Context = any> {\n  (\n    args: ActionFunctionArgs<Context>,\n    handlerCtx?: unknown\n  ): DataFunctionReturnValue;\n}\n\n/**\n * Arguments passed to shouldRevalidate function\n */\nexport interface ShouldRevalidateFunctionArgs {\n  currentUrl: URL;\n  currentParams: AgnosticDataRouteMatch[\"params\"];\n  nextUrl: URL;\n  nextParams: AgnosticDataRouteMatch[\"params\"];\n  formMethod?: Submission[\"formMethod\"];\n  formAction?: Submission[\"formAction\"];\n  formEncType?: Submission[\"formEncType\"];\n  text?: Submission[\"text\"];\n  formData?: Submission[\"formData\"];\n  json?: Submission[\"json\"];\n  actionStatus?: number;\n  actionResult?: any;\n  defaultShouldRevalidate: boolean;\n}\n\n/**\n * Route shouldRevalidate function signature.  This runs after any submission\n * (navigation or fetcher), so we flatten the navigation/fetcher submission\n * onto the arguments.  It shouldn't matter whether it came from a navigation\n * or a fetcher, what really matters is the URLs and the formData since loaders\n * have to re-run based on the data models that were potentially mutated.\n */\nexport interface ShouldRevalidateFunction {\n  (args: ShouldRevalidateFunctionArgs): boolean;\n}\n\n/**\n * Function provided by the framework-aware layers to set `hasErrorBoundary`\n * from the framework-aware `errorElement` prop\n *\n * @deprecated Use `mapRouteProperties` instead\n */\nexport interface DetectErrorBoundaryFunction {\n  (route: AgnosticRouteObject): boolean;\n}\n\nexport interface DataStrategyMatch\n  extends AgnosticRouteMatch<string, AgnosticDataRouteObject> {\n  shouldLoad: boolean;\n  resolve: (\n    handlerOverride?: (\n      handler: (ctx?: unknown) => DataFunctionReturnValue\n    ) => DataFunctionReturnValue\n  ) => Promise<DataStrategyResult>;\n}\n\nexport interface DataStrategyFunctionArgs<Context = any>\n  extends DataFunctionArgs<Context> {\n  matches: DataStrategyMatch[];\n  fetcherKey: string | null;\n}\n\n/**\n * Result from a loader or action called via dataStrategy\n */\nexport interface DataStrategyResult {\n  type: \"data\" | \"error\";\n  result: unknown; // data, Error, Response, DeferredData, DataWithResponseInit\n}\n\nexport interface DataStrategyFunction {\n  (args: DataStrategyFunctionArgs): Promise<Record<string, DataStrategyResult>>;\n}\n\nexport interface AgnosticPatchRoutesOnNavigationFunction<\n  M extends AgnosticRouteMatch = AgnosticRouteMatch\n> {\n  (opts: {\n    path: string;\n    matches: M[];\n    patch: (routeId: string | null, children: AgnosticRouteObject[]) => void;\n  }): void | Promise<void>;\n}\n\n/**\n * Function provided by the framework-aware layers to set any framework-specific\n * properties from framework-agnostic properties\n */\nexport interface MapRoutePropertiesFunction {\n  (route: AgnosticRouteObject): {\n    hasErrorBoundary: boolean;\n  } & Record<string, any>;\n}\n\n/**\n * Keys we cannot change from within a lazy() function. We spread all other keys\n * onto the route. Either they're meaningful to the router, or they'll get\n * ignored.\n */\nexport type ImmutableRouteKey =\n  | \"lazy\"\n  | \"caseSensitive\"\n  | \"path\"\n  | \"id\"\n  | \"index\"\n  | \"children\";\n\nexport const immutableRouteKeys = new Set<ImmutableRouteKey>([\n  \"lazy\",\n  \"caseSensitive\",\n  \"path\",\n  \"id\",\n  \"index\",\n  \"children\",\n]);\n\ntype RequireOne<T, Key = keyof T> = Exclude<\n  {\n    [K in keyof T]: K extends Key ? Omit<T, K> & Required<Pick<T, K>> : never;\n  }[keyof T],\n  undefined\n>;\n\n/**\n * lazy() function to load a route definition, which can add non-matching\n * related properties to a route\n */\nexport interface LazyRouteFunction<R extends AgnosticRouteObject> {\n  (): Promise<RequireOne<Omit<R, ImmutableRouteKey>>>;\n}\n\n/**\n * Base RouteObject with common props shared by all types of routes\n */\ntype AgnosticBaseRouteObject = {\n  caseSensitive?: boolean;\n  path?: string;\n  id?: string;\n  loader?: LoaderFunction | boolean;\n  action?: ActionFunction | boolean;\n  hasErrorBoundary?: boolean;\n  shouldRevalidate?: ShouldRevalidateFunction;\n  handle?: any;\n  lazy?: LazyRouteFunction<AgnosticBaseRouteObject>;\n};\n\n/**\n * Index routes must not have children\n */\nexport type AgnosticIndexRouteObject = AgnosticBaseRouteObject & {\n  children?: undefined;\n  index: true;\n};\n\n/**\n * Non-index routes may have children, but cannot have index\n */\nexport type AgnosticNonIndexRouteObject = AgnosticBaseRouteObject & {\n  children?: AgnosticRouteObject[];\n  index?: false;\n};\n\n/**\n * A route object represents a logical route, with (optionally) its child\n * routes organized in a tree-like structure.\n */\nexport type AgnosticRouteObject =\n  | AgnosticIndexRouteObject\n  | AgnosticNonIndexRouteObject;\n\nexport type AgnosticDataIndexRouteObject = AgnosticIndexRouteObject & {\n  id: string;\n};\n\nexport type AgnosticDataNonIndexRouteObject = AgnosticNonIndexRouteObject & {\n  children?: AgnosticDataRouteObject[];\n  id: string;\n};\n\n/**\n * A data route object, which is just a RouteObject with a required unique ID\n */\nexport type AgnosticDataRouteObject =\n  | AgnosticDataIndexRouteObject\n  | AgnosticDataNonIndexRouteObject;\n\nexport type RouteManifest = Record<string, AgnosticDataRouteObject | undefined>;\n\n// Recursive helper for finding path parameters in the absence of wildcards\ntype _PathParam<Path extends string> =\n  // split path into individual path segments\n  Path extends `${infer L}/${infer R}`\n    ? _PathParam<L> | _PathParam<R>\n    : // find params after `:`\n    Path extends `:${infer Param}`\n    ? Param extends `${infer Optional}?`\n      ? Optional\n      : Param\n    : // otherwise, there aren't any params present\n      never;\n\n/**\n * Examples:\n * \"/a/b/*\" -> \"*\"\n * \":a\" -> \"a\"\n * \"/a/:b\" -> \"b\"\n * \"/a/blahblahblah:b\" -> \"b\"\n * \"/:a/:b\" -> \"a\" | \"b\"\n * \"/:a/b/:c/*\" -> \"a\" | \"c\" | \"*\"\n */\nexport type PathParam<Path extends string> =\n  // check if path is just a wildcard\n  Path extends \"*\" | \"/*\"\n    ? \"*\"\n    : // look for wildcard at the end of the path\n    Path extends `${infer Rest}/*`\n    ? \"*\" | _PathParam<Rest>\n    : // look for params in the absence of wildcards\n      _PathParam<Path>;\n\n// Attempt to parse the given string segment. If it fails, then just return the\n// plain string type as a default fallback. Otherwise, return the union of the\n// parsed string literals that were referenced as dynamic segments in the route.\nexport type ParamParseKey<Segment extends string> =\n  // if you could not find path params, fallback to `string`\n  [PathParam<Segment>] extends [never] ? string : PathParam<Segment>;\n\n/**\n * The parameters that were parsed from the URL path.\n */\nexport type Params<Key extends string = string> = {\n  readonly [key in Key]: string | undefined;\n};\n\n/**\n * A RouteMatch contains info about how a route matched a URL.\n */\nexport interface AgnosticRouteMatch<\n  ParamKey extends string = string,\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The route object that was used to match.\n   */\n  route: RouteObjectType;\n}\n\nexport interface AgnosticDataRouteMatch\n  extends AgnosticRouteMatch<string, AgnosticDataRouteObject> {}\n\nfunction isIndexRoute(\n  route: AgnosticRouteObject\n): route is AgnosticIndexRouteObject {\n  return route.index === true;\n}\n\n// Walk the route tree generating unique IDs where necessary, so we are working\n// solely with AgnosticDataRouteObject's within the Router\nexport function convertRoutesToDataRoutes(\n  routes: AgnosticRouteObject[],\n  mapRouteProperties: MapRoutePropertiesFunction,\n  parentPath: string[] = [],\n  manifest: RouteManifest = {}\n): AgnosticDataRouteObject[] {\n  return routes.map((route, index) => {\n    let treePath = [...parentPath, String(index)];\n    let id = typeof route.id === \"string\" ? route.id : treePath.join(\"-\");\n    invariant(\n      route.index !== true || !route.children,\n      `Cannot specify children on an index route`\n    );\n    invariant(\n      !manifest[id],\n      `Found a route id collision on id \"${id}\".  Route ` +\n        \"id's must be globally unique within Data Router usages\"\n    );\n\n    if (isIndexRoute(route)) {\n      let indexRoute: AgnosticDataIndexRouteObject = {\n        ...route,\n        ...mapRouteProperties(route),\n        id,\n      };\n      manifest[id] = indexRoute;\n      return indexRoute;\n    } else {\n      let pathOrLayoutRoute: AgnosticDataNonIndexRouteObject = {\n        ...route,\n        ...mapRouteProperties(route),\n        id,\n        children: undefined,\n      };\n      manifest[id] = pathOrLayoutRoute;\n\n      if (route.children) {\n        pathOrLayoutRoute.children = convertRoutesToDataRoutes(\n          route.children,\n          mapRouteProperties,\n          treePath,\n          manifest\n        );\n      }\n\n      return pathOrLayoutRoute;\n    }\n  });\n}\n\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/utils/match-routes\n */\nexport function matchRoutes<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  routes: RouteObjectType[],\n  locationArg: Partial<Location> | string,\n  basename = \"/\"\n): AgnosticRouteMatch<string, RouteObjectType>[] | null {\n  return matchRoutesImpl(routes, locationArg, basename, false);\n}\n\nexport function matchRoutesImpl<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  routes: RouteObjectType[],\n  locationArg: Partial<Location> | string,\n  basename: string,\n  allowPartial: boolean\n): AgnosticRouteMatch<string, RouteObjectType>[] | null {\n  let location =\n    typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n\n  let pathname = stripBasename(location.pathname || \"/\", basename);\n\n  if (pathname == null) {\n    return null;\n  }\n\n  let branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n\n  let matches = null;\n  for (let i = 0; matches == null && i < branches.length; ++i) {\n    // Incoming pathnames are generally encoded from either window.location\n    // or from router.navigate, but we want to match against the unencoded\n    // paths in the route definitions.  Memory router locations won't be\n    // encoded here but there also shouldn't be anything to decode so this\n    // should be a safe operation.  This avoids needing matchRoutes to be\n    // history-aware.\n    let decoded = decodePath(pathname);\n    matches = matchRouteBranch<string, RouteObjectType>(\n      branches[i],\n      decoded,\n      allowPartial\n    );\n  }\n\n  return matches;\n}\n\nexport interface UIMatch<Data = unknown, Handle = unknown> {\n  id: string;\n  pathname: string;\n  params: AgnosticRouteMatch[\"params\"];\n  data: Data;\n  handle: Handle;\n}\n\nexport function convertRouteMatchToUiMatch(\n  match: AgnosticDataRouteMatch,\n  loaderData: RouteData\n): UIMatch {\n  let { route, pathname, params } = match;\n  return {\n    id: route.id,\n    pathname,\n    params,\n    data: loaderData[route.id],\n    handle: route.handle,\n  };\n}\n\ninterface RouteMeta<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  relativePath: string;\n  caseSensitive: boolean;\n  childrenIndex: number;\n  route: RouteObjectType;\n}\n\ninterface RouteBranch<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  path: string;\n  score: number;\n  routesMeta: RouteMeta<RouteObjectType>[];\n}\n\nfunction flattenRoutes<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  routes: RouteObjectType[],\n  branches: RouteBranch<RouteObjectType>[] = [],\n  parentsMeta: RouteMeta<RouteObjectType>[] = [],\n  parentPath = \"\"\n): RouteBranch<RouteObjectType>[] {\n  let flattenRoute = (\n    route: RouteObjectType,\n    index: number,\n    relativePath?: string\n  ) => {\n    let meta: RouteMeta<RouteObjectType> = {\n      relativePath:\n        relativePath === undefined ? route.path || \"\" : relativePath,\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index,\n      route,\n    };\n\n    if (meta.relativePath.startsWith(\"/\")) {\n      invariant(\n        meta.relativePath.startsWith(parentPath),\n        `Absolute route path \"${meta.relativePath}\" nested under path ` +\n          `\"${parentPath}\" is not valid. An absolute child route path ` +\n          `must start with the combined path of all its parent routes.`\n      );\n\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n\n    let path = joinPaths([parentPath, meta.relativePath]);\n    let routesMeta = parentsMeta.concat(meta);\n\n    // Add the children before adding this route to the array, so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n    if (route.children && route.children.length > 0) {\n      invariant(\n        // Our types know better, but runtime JS may not!\n        // @ts-expect-error\n        route.index !== true,\n        `Index routes must not have child routes. Please remove ` +\n          `all child routes from route path \"${path}\".`\n      );\n      flattenRoutes(route.children, branches, routesMeta, path);\n    }\n\n    // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n    if (route.path == null && !route.index) {\n      return;\n    }\n\n    branches.push({\n      path,\n      score: computeScore(path, route.index),\n      routesMeta,\n    });\n  };\n  routes.forEach((route, index) => {\n    // coarse-grain check for optional params\n    if (route.path === \"\" || !route.path?.includes(\"?\")) {\n      flattenRoute(route, index);\n    } else {\n      for (let exploded of explodeOptionalSegments(route.path)) {\n        flattenRoute(route, index, exploded);\n      }\n    }\n  });\n\n  return branches;\n}\n\n/**\n * Computes all combinations of optional path segments for a given path,\n * excluding combinations that are ambiguous and of lower priority.\n *\n * For example, `/one/:two?/three/:four?/:five?` explodes to:\n * - `/one/three`\n * - `/one/:two/three`\n * - `/one/three/:four`\n * - `/one/three/:five`\n * - `/one/:two/three/:four`\n * - `/one/:two/three/:five`\n * - `/one/three/:four/:five`\n * - `/one/:two/three/:four/:five`\n */\nfunction explodeOptionalSegments(path: string): string[] {\n  let segments = path.split(\"/\");\n  if (segments.length === 0) return [];\n\n  let [first, ...rest] = segments;\n\n  // Optional path segments are denoted by a trailing `?`\n  let isOptional = first.endsWith(\"?\");\n  // Compute the corresponding required segment: `foo?` -> `foo`\n  let required = first.replace(/\\?$/, \"\");\n\n  if (rest.length === 0) {\n    // Intepret empty string as omitting an optional segment\n    // `[\"one\", \"\", \"three\"]` corresponds to omitting `:two` from `/one/:two?/three` -> `/one/three`\n    return isOptional ? [required, \"\"] : [required];\n  }\n\n  let restExploded = explodeOptionalSegments(rest.join(\"/\"));\n\n  let result: string[] = [];\n\n  // All child paths with the prefix.  Do this for all children before the\n  // optional version for all children, so we get consistent ordering where the\n  // parent optional aspect is preferred as required.  Otherwise, we can get\n  // child sections interspersed where deeper optional segments are higher than\n  // parent optional segments, where for example, /:two would explode _earlier_\n  // then /:one.  By always including the parent as required _for all children_\n  // first, we avoid this issue\n  result.push(\n    ...restExploded.map((subpath) =>\n      subpath === \"\" ? required : [required, subpath].join(\"/\")\n    )\n  );\n\n  // Then, if this is an optional value, add all child versions without\n  if (isOptional) {\n    result.push(...restExploded);\n  }\n\n  // for absolute paths, ensure `/` instead of empty segment\n  return result.map((exploded) =>\n    path.startsWith(\"/\") && exploded === \"\" ? \"/\" : exploded\n  );\n}\n\nfunction rankRouteBranches(branches: RouteBranch[]): void {\n  branches.sort((a, b) =>\n    a.score !== b.score\n      ? b.score - a.score // Higher score first\n      : compareIndexes(\n          a.routesMeta.map((meta) => meta.childrenIndex),\n          b.routesMeta.map((meta) => meta.childrenIndex)\n        )\n  );\n}\n\nconst paramRe = /^:[\\w-]+$/;\nconst dynamicSegmentValue = 3;\nconst indexRouteValue = 2;\nconst emptySegmentValue = 1;\nconst staticSegmentValue = 10;\nconst splatPenalty = -2;\nconst isSplat = (s: string) => s === \"*\";\n\nfunction computeScore(path: string, index: boolean | undefined): number {\n  let segments = path.split(\"/\");\n  let initialScore = segments.length;\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n\n  return segments\n    .filter((s) => !isSplat(s))\n    .reduce(\n      (score, segment) =>\n        score +\n        (paramRe.test(segment)\n          ? dynamicSegmentValue\n          : segment === \"\"\n          ? emptySegmentValue\n          : staticSegmentValue),\n      initialScore\n    );\n}\n\nfunction compareIndexes(a: number[], b: number[]): number {\n  let siblings =\n    a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);\n\n  return siblings\n    ? // If two routes are siblings, we should try to match the earlier sibling\n      // first. This allows people to have fine-grained control over the matching\n      // behavior by simply putting routes with identical paths in the order they\n      // want them tried.\n      a[a.length - 1] - b[b.length - 1]\n    : // Otherwise, it doesn't really make sense to rank non-siblings by index,\n      // so they sort equally.\n      0;\n}\n\nfunction matchRouteBranch<\n  ParamKey extends string = string,\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  branch: RouteBranch<RouteObjectType>,\n  pathname: string,\n  allowPartial = false\n): AgnosticRouteMatch<ParamKey, RouteObjectType>[] | null {\n  let { routesMeta } = branch;\n\n  let matchedParams = {};\n  let matchedPathname = \"/\";\n  let matches: AgnosticRouteMatch<ParamKey, RouteObjectType>[] = [];\n  for (let i = 0; i < routesMeta.length; ++i) {\n    let meta = routesMeta[i];\n    let end = i === routesMeta.length - 1;\n    let remainingPathname =\n      matchedPathname === \"/\"\n        ? pathname\n        : pathname.slice(matchedPathname.length) || \"/\";\n    let match = matchPath(\n      { path: meta.relativePath, caseSensitive: meta.caseSensitive, end },\n      remainingPathname\n    );\n\n    let route = meta.route;\n\n    if (\n      !match &&\n      end &&\n      allowPartial &&\n      !routesMeta[routesMeta.length - 1].route.index\n    ) {\n      match = matchPath(\n        {\n          path: meta.relativePath,\n          caseSensitive: meta.caseSensitive,\n          end: false,\n        },\n        remainingPathname\n      );\n    }\n\n    if (!match) {\n      return null;\n    }\n\n    Object.assign(matchedParams, match.params);\n\n    matches.push({\n      // TODO: Can this as be avoided?\n      params: matchedParams as Params<ParamKey>,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: normalizePathname(\n        joinPaths([matchedPathname, match.pathnameBase])\n      ),\n      route,\n    });\n\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n  }\n\n  return matches;\n}\n\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/utils/generate-path\n */\nexport function generatePath<Path extends string>(\n  originalPath: Path,\n  params: {\n    [key in PathParam<Path>]: string | null;\n  } = {} as any\n): string {\n  let path: string = originalPath;\n  if (path.endsWith(\"*\") && path !== \"*\" && !path.endsWith(\"/*\")) {\n    warning(\n      false,\n      `Route path \"${path}\" will be treated as if it were ` +\n        `\"${path.replace(/\\*$/, \"/*\")}\" because the \\`*\\` character must ` +\n        `always follow a \\`/\\` in the pattern. To get rid of this warning, ` +\n        `please change the route path to \"${path.replace(/\\*$/, \"/*\")}\".`\n    );\n    path = path.replace(/\\*$/, \"/*\") as Path;\n  }\n\n  // ensure `/` is added at the beginning if the path is absolute\n  const prefix = path.startsWith(\"/\") ? \"/\" : \"\";\n\n  const stringify = (p: any) =>\n    p == null ? \"\" : typeof p === \"string\" ? p : String(p);\n\n  const segments = path\n    .split(/\\/+/)\n    .map((segment, index, array) => {\n      const isLastSegment = index === array.length - 1;\n\n      // only apply the splat if it's the last segment\n      if (isLastSegment && segment === \"*\") {\n        const star = \"*\" as PathParam<Path>;\n        // Apply the splat\n        return stringify(params[star]);\n      }\n\n      const keyMatch = segment.match(/^:([\\w-]+)(\\??)$/);\n      if (keyMatch) {\n        const [, key, optional] = keyMatch;\n        let param = params[key as PathParam<Path>];\n        invariant(optional === \"?\" || param != null, `Missing \":${key}\" param`);\n        return stringify(param);\n      }\n\n      // Remove any optional markers from optional static segments\n      return segment.replace(/\\?$/g, \"\");\n    })\n    // Remove empty segments\n    .filter((segment) => !!segment);\n\n  return prefix + segments.join(\"/\");\n}\n\n/**\n * A PathPattern is used to match on some portion of a URL pathname.\n */\nexport interface PathPattern<Path extends string = string> {\n  /**\n   * A string to match against a URL pathname. May contain `:id`-style segments\n   * to indicate placeholders for dynamic parameters. May also end with `/*` to\n   * indicate matching the rest of the URL pathname.\n   */\n  path: Path;\n  /**\n   * Should be `true` if the static portions of the `path` should be matched in\n   * the same case.\n   */\n  caseSensitive?: boolean;\n  /**\n   * Should be `true` if this pattern should match the entire URL pathname.\n   */\n  end?: boolean;\n}\n\n/**\n * A PathMatch contains info about how a PathPattern matched on a URL pathname.\n */\nexport interface PathMatch<ParamKey extends string = string> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The pattern that was used to match.\n   */\n  pattern: PathPattern;\n}\n\ntype Mutable<T> = {\n  -readonly [P in keyof T]: T[P];\n};\n\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/utils/match-path\n */\nexport function matchPath<\n  ParamKey extends ParamParseKey<Path>,\n  Path extends string\n>(\n  pattern: PathPattern<Path> | Path,\n  pathname: string\n): PathMatch<ParamKey> | null {\n  if (typeof pattern === \"string\") {\n    pattern = { path: pattern, caseSensitive: false, end: true };\n  }\n\n  let [matcher, compiledParams] = compilePath(\n    pattern.path,\n    pattern.caseSensitive,\n    pattern.end\n  );\n\n  let match = pathname.match(matcher);\n  if (!match) return null;\n\n  let matchedPathname = match[0];\n  let pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  let captureGroups = match.slice(1);\n  let params: Params = compiledParams.reduce<Mutable<Params>>(\n    (memo, { paramName, isOptional }, index) => {\n      // We need to compute the pathnameBase here using the raw splat value\n      // instead of using params[\"*\"] later because it will be decoded then\n      if (paramName === \"*\") {\n        let splatValue = captureGroups[index] || \"\";\n        pathnameBase = matchedPathname\n          .slice(0, matchedPathname.length - splatValue.length)\n          .replace(/(.)\\/+$/, \"$1\");\n      }\n\n      const value = captureGroups[index];\n      if (isOptional && !value) {\n        memo[paramName] = undefined;\n      } else {\n        memo[paramName] = (value || \"\").replace(/%2F/g, \"/\");\n      }\n      return memo;\n    },\n    {}\n  );\n\n  return {\n    params,\n    pathname: matchedPathname,\n    pathnameBase,\n    pattern,\n  };\n}\n\ntype CompiledPathParam = { paramName: string; isOptional?: boolean };\n\nfunction compilePath(\n  path: string,\n  caseSensitive = false,\n  end = true\n): [RegExp, CompiledPathParam[]] {\n  warning(\n    path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"),\n    `Route path \"${path}\" will be treated as if it were ` +\n      `\"${path.replace(/\\*$/, \"/*\")}\" because the \\`*\\` character must ` +\n      `always follow a \\`/\\` in the pattern. To get rid of this warning, ` +\n      `please change the route path to \"${path.replace(/\\*$/, \"/*\")}\".`\n  );\n\n  let params: CompiledPathParam[] = [];\n  let regexpSource =\n    \"^\" +\n    path\n      .replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n      .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n      .replace(/[\\\\.*+^${}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n      .replace(\n        /\\/:([\\w-]+)(\\?)?/g,\n        (_: string, paramName: string, isOptional) => {\n          params.push({ paramName, isOptional: isOptional != null });\n          return isOptional ? \"/?([^\\\\/]+)?\" : \"/([^\\\\/]+)\";\n        }\n      );\n\n  if (path.endsWith(\"*\")) {\n    params.push({ paramName: \"*\" });\n    regexpSource +=\n      path === \"*\" || path === \"/*\"\n        ? \"(.*)$\" // Already matched the initial /, just match the rest\n        : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else if (end) {\n    // When matching to the end, ignore trailing slashes\n    regexpSource += \"\\\\/*$\";\n  } else if (path !== \"\" && path !== \"/\") {\n    // If our path is non-empty and contains anything beyond an initial slash,\n    // then we have _some_ form of path in our regex, so we should expect to\n    // match only if we find the end of this path segment.  Look for an optional\n    // non-captured trailing slash (to match a portion of the URL) or the end\n    // of the path (if we've matched to the end).  We used to do this with a\n    // word boundary but that gives false positives on routes like\n    // /user-preferences since `-` counts as a word boundary.\n    regexpSource += \"(?:(?=\\\\/|$))\";\n  } else {\n    // Nothing to match for \"\" or \"/\"\n  }\n\n  let matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n\n  return [matcher, params];\n}\n\nexport function decodePath(value: string) {\n  try {\n    return value\n      .split(\"/\")\n      .map((v) => decodeURIComponent(v).replace(/\\//g, \"%2F\"))\n      .join(\"/\");\n  } catch (error) {\n    warning(\n      false,\n      `The URL path \"${value}\" could not be decoded because it is is a ` +\n        `malformed URL segment. This is probably due to a bad percent ` +\n        `encoding (${error}).`\n    );\n\n    return value;\n  }\n}\n\n/**\n * @private\n */\nexport function stripBasename(\n  pathname: string,\n  basename: string\n): string | null {\n  if (basename === \"/\") return pathname;\n\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  }\n\n  // We want to leave trailing slash behavior in the user's control, so if they\n  // specify a basename with a trailing slash, we should support it\n  let startIndex = basename.endsWith(\"/\")\n    ? basename.length - 1\n    : basename.length;\n  let nextChar = pathname.charAt(startIndex);\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n\n  return pathname.slice(startIndex) || \"/\";\n}\n\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/utils/resolve-path\n */\nexport function resolvePath(to: To, fromPathname = \"/\"): Path {\n  let {\n    pathname: toPathname,\n    search = \"\",\n    hash = \"\",\n  } = typeof to === \"string\" ? parsePath(to) : to;\n\n  let pathname = toPathname\n    ? toPathname.startsWith(\"/\")\n      ? toPathname\n      : resolvePathname(toPathname, fromPathname)\n    : fromPathname;\n\n  return {\n    pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash),\n  };\n}\n\nfunction resolvePathname(relativePath: string, fromPathname: string): string {\n  let segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  let relativeSegments = relativePath.split(\"/\");\n\n  relativeSegments.forEach((segment) => {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\n\nfunction getInvalidPathError(\n  char: string,\n  field: string,\n  dest: string,\n  path: Partial<Path>\n) {\n  return (\n    `Cannot include a '${char}' character in a manually specified ` +\n    `\\`to.${field}\\` field [${JSON.stringify(\n      path\n    )}].  Please separate it out to the ` +\n    `\\`to.${dest}\\` field. Alternatively you may provide the full path as ` +\n    `a string in <Link to=\"...\"> and the router will parse it for you.`\n  );\n}\n\n/**\n * @private\n *\n * When processing relative navigation we want to ignore ancestor routes that\n * do not contribute to the path, such that index/pathless layout routes don't\n * interfere.\n *\n * For example, when moving a route element into an index route and/or a\n * pathless layout route, relative link behavior contained within should stay\n * the same.  Both of the following examples should link back to the root:\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\" element={<Link to=\"..\"}>\n *   </Route>\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\">\n *       <Route element={<AccountsLayout />}>       // <-- Does not contribute\n *         <Route index element={<Link to=\"..\"} />  // <-- Does not contribute\n *       </Route\n *     </Route>\n *   </Route>\n */\nexport function getPathContributingMatches<\n  T extends AgnosticRouteMatch = AgnosticRouteMatch\n>(matches: T[]) {\n  return matches.filter(\n    (match, index) =>\n      index === 0 || (match.route.path && match.route.path.length > 0)\n  );\n}\n\n// Return the array of pathnames for the current route matches - used to\n// generate the routePathnames input for resolveTo()\nexport function getResolveToMatches<\n  T extends AgnosticRouteMatch = AgnosticRouteMatch\n>(matches: T[], v7_relativeSplatPath: boolean) {\n  let pathMatches = getPathContributingMatches(matches);\n\n  // When v7_relativeSplatPath is enabled, use the full pathname for the leaf\n  // match so we include splat values for \".\" links.  See:\n  // https://github.com/remix-run/react-router/issues/11052#issuecomment-1836589329\n  if (v7_relativeSplatPath) {\n    return pathMatches.map((match, idx) =>\n      idx === pathMatches.length - 1 ? match.pathname : match.pathnameBase\n    );\n  }\n\n  return pathMatches.map((match) => match.pathnameBase);\n}\n\n/**\n * @private\n */\nexport function resolveTo(\n  toArg: To,\n  routePathnames: string[],\n  locationPathname: string,\n  isPathRelative = false\n): Path {\n  let to: Partial<Path>;\n  if (typeof toArg === \"string\") {\n    to = parsePath(toArg);\n  } else {\n    to = { ...toArg };\n\n    invariant(\n      !to.pathname || !to.pathname.includes(\"?\"),\n      getInvalidPathError(\"?\", \"pathname\", \"search\", to)\n    );\n    invariant(\n      !to.pathname || !to.pathname.includes(\"#\"),\n      getInvalidPathError(\"#\", \"pathname\", \"hash\", to)\n    );\n    invariant(\n      !to.search || !to.search.includes(\"#\"),\n      getInvalidPathError(\"#\", \"search\", \"hash\", to)\n    );\n  }\n\n  let isEmptyPath = toArg === \"\" || to.pathname === \"\";\n  let toPathname = isEmptyPath ? \"/\" : to.pathname;\n\n  let from: string;\n\n  // Routing is relative to the current pathname if explicitly requested.\n  //\n  // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n  if (toPathname == null) {\n    from = locationPathname;\n  } else {\n    let routePathnameIndex = routePathnames.length - 1;\n\n    // With relative=\"route\" (the default), each leading .. segment means\n    // \"go up one route\" instead of \"go up one URL segment\".  This is a key\n    // difference from how <a href> works and a major reason we call this a\n    // \"to\" value instead of a \"href\".\n    if (!isPathRelative && toPathname.startsWith(\"..\")) {\n      let toSegments = toPathname.split(\"/\");\n\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n\n      to.pathname = toSegments.join(\"/\");\n    }\n\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n\n  let path = resolvePath(to, from);\n\n  // Ensure the pathname has a trailing slash if the original \"to\" had one\n  let hasExplicitTrailingSlash =\n    toPathname && toPathname !== \"/\" && toPathname.endsWith(\"/\");\n  // Or if this was a link to the current path which has a trailing slash\n  let hasCurrentTrailingSlash =\n    (isEmptyPath || toPathname === \".\") && locationPathname.endsWith(\"/\");\n  if (\n    !path.pathname.endsWith(\"/\") &&\n    (hasExplicitTrailingSlash || hasCurrentTrailingSlash)\n  ) {\n    path.pathname += \"/\";\n  }\n\n  return path;\n}\n\n/**\n * @private\n */\nexport function getToPathname(to: To): string | undefined {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || (to as Path).pathname === \"\"\n    ? \"/\"\n    : typeof to === \"string\"\n    ? parsePath(to).pathname\n    : to.pathname;\n}\n\n/**\n * @private\n */\nexport const joinPaths = (paths: string[]): string =>\n  paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n\n/**\n * @private\n */\nexport const normalizePathname = (pathname: string): string =>\n  pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n\n/**\n * @private\n */\nexport const normalizeSearch = (search: string): string =>\n  !search || search === \"?\"\n    ? \"\"\n    : search.startsWith(\"?\")\n    ? search\n    : \"?\" + search;\n\n/**\n * @private\n */\nexport const normalizeHash = (hash: string): string =>\n  !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash;\n\nexport type JsonFunction = <Data>(\n  data: Data,\n  init?: number | ResponseInit\n) => Response;\n\n/**\n * This is a shortcut for creating `application/json` responses. Converts `data`\n * to JSON and sets the `Content-Type` header.\n */\nexport const json: JsonFunction = (data, init = {}) => {\n  let responseInit = typeof init === \"number\" ? { status: init } : init;\n\n  let headers = new Headers(responseInit.headers);\n  if (!headers.has(\"Content-Type\")) {\n    headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n  }\n\n  return new Response(JSON.stringify(data), {\n    ...responseInit,\n    headers,\n  });\n};\n\nexport class DataWithResponseInit<D> {\n  type: string = \"DataWithResponseInit\";\n  data: D;\n  init: ResponseInit | null;\n\n  constructor(data: D, init?: ResponseInit) {\n    this.data = data;\n    this.init = init || null;\n  }\n}\n\n/**\n * Create \"responses\" that contain `status`/`headers` without forcing\n * serialization into an actual `Response` - used by Remix single fetch\n */\nexport function data<D>(data: D, init?: number | ResponseInit) {\n  return new DataWithResponseInit(\n    data,\n    typeof init === \"number\" ? { status: init } : init\n  );\n}\n\nexport interface TrackedPromise extends Promise<any> {\n  _tracked?: boolean;\n  _data?: any;\n  _error?: any;\n}\n\nexport class AbortedDeferredError extends Error {}\n\nexport class DeferredData {\n  private pendingKeysSet: Set<string> = new Set<string>();\n  private controller: AbortController;\n  private abortPromise: Promise<void>;\n  private unlistenAbortSignal: () => void;\n  private subscribers: Set<(aborted: boolean, settledKey?: string) => void> =\n    new Set();\n  data: Record<string, unknown>;\n  init?: ResponseInit;\n  deferredKeys: string[] = [];\n\n  constructor(data: Record<string, unknown>, responseInit?: ResponseInit) {\n    invariant(\n      data && typeof data === \"object\" && !Array.isArray(data),\n      \"defer() only accepts plain objects\"\n    );\n\n    // Set up an AbortController + Promise we can race against to exit early\n    // cancellation\n    let reject: (e: AbortedDeferredError) => void;\n    this.abortPromise = new Promise((_, r) => (reject = r));\n    this.controller = new AbortController();\n    let onAbort = () =>\n      reject(new AbortedDeferredError(\"Deferred data aborted\"));\n    this.unlistenAbortSignal = () =>\n      this.controller.signal.removeEventListener(\"abort\", onAbort);\n    this.controller.signal.addEventListener(\"abort\", onAbort);\n\n    this.data = Object.entries(data).reduce(\n      (acc, [key, value]) =>\n        Object.assign(acc, {\n          [key]: this.trackPromise(key, value),\n        }),\n      {}\n    );\n\n    if (this.done) {\n      // All incoming values were resolved\n      this.unlistenAbortSignal();\n    }\n\n    this.init = responseInit;\n  }\n\n  private trackPromise(\n    key: string,\n    value: Promise<unknown> | unknown\n  ): TrackedPromise | unknown {\n    if (!(value instanceof Promise)) {\n      return value;\n    }\n\n    this.deferredKeys.push(key);\n    this.pendingKeysSet.add(key);\n\n    // We store a little wrapper promise that will be extended with\n    // _data/_error props upon resolve/reject\n    let promise: TrackedPromise = Promise.race([value, this.abortPromise]).then(\n      (data) => this.onSettle(promise, key, undefined, data as unknown),\n      (error) => this.onSettle(promise, key, error as unknown)\n    );\n\n    // Register rejection listeners to avoid uncaught promise rejections on\n    // errors or aborted deferred values\n    promise.catch(() => {});\n\n    Object.defineProperty(promise, \"_tracked\", { get: () => true });\n    return promise;\n  }\n\n  private onSettle(\n    promise: TrackedPromise,\n    key: string,\n    error: unknown,\n    data?: unknown\n  ): unknown {\n    if (\n      this.controller.signal.aborted &&\n      error instanceof AbortedDeferredError\n    ) {\n      this.unlistenAbortSignal();\n      Object.defineProperty(promise, \"_error\", { get: () => error });\n      return Promise.reject(error);\n    }\n\n    this.pendingKeysSet.delete(key);\n\n    if (this.done) {\n      // Nothing left to abort!\n      this.unlistenAbortSignal();\n    }\n\n    // If the promise was resolved/rejected with undefined, we'll throw an error as you\n    // should always resolve with a value or null\n    if (error === undefined && data === undefined) {\n      let undefinedError = new Error(\n        `Deferred data for key \"${key}\" resolved/rejected with \\`undefined\\`, ` +\n          `you must resolve/reject with a value or \\`null\\`.`\n      );\n      Object.defineProperty(promise, \"_error\", { get: () => undefinedError });\n      this.emit(false, key);\n      return Promise.reject(undefinedError);\n    }\n\n    if (data === undefined) {\n      Object.defineProperty(promise, \"_error\", { get: () => error });\n      this.emit(false, key);\n      return Promise.reject(error);\n    }\n\n    Object.defineProperty(promise, \"_data\", { get: () => data });\n    this.emit(false, key);\n    return data;\n  }\n\n  private emit(aborted: boolean, settledKey?: string) {\n    this.subscribers.forEach((subscriber) => subscriber(aborted, settledKey));\n  }\n\n  subscribe(fn: (aborted: boolean, settledKey?: string) => void) {\n    this.subscribers.add(fn);\n    return () => this.subscribers.delete(fn);\n  }\n\n  cancel() {\n    this.controller.abort();\n    this.pendingKeysSet.forEach((v, k) => this.pendingKeysSet.delete(k));\n    this.emit(true);\n  }\n\n  async resolveData(signal: AbortSignal) {\n    let aborted = false;\n    if (!this.done) {\n      let onAbort = () => this.cancel();\n      signal.addEventListener(\"abort\", onAbort);\n      aborted = await new Promise((resolve) => {\n        this.subscribe((aborted) => {\n          signal.removeEventListener(\"abort\", onAbort);\n          if (aborted || this.done) {\n            resolve(aborted);\n          }\n        });\n      });\n    }\n    return aborted;\n  }\n\n  get done() {\n    return this.pendingKeysSet.size === 0;\n  }\n\n  get unwrappedData() {\n    invariant(\n      this.data !== null && this.done,\n      \"Can only unwrap data on initialized and settled deferreds\"\n    );\n\n    return Object.entries(this.data).reduce(\n      (acc, [key, value]) =>\n        Object.assign(acc, {\n          [key]: unwrapTrackedPromise(value),\n        }),\n      {}\n    );\n  }\n\n  get pendingKeys() {\n    return Array.from(this.pendingKeysSet);\n  }\n}\n\nfunction isTrackedPromise(value: any): value is TrackedPromise {\n  return (\n    value instanceof Promise && (value as TrackedPromise)._tracked === true\n  );\n}\n\nfunction unwrapTrackedPromise(value: any) {\n  if (!isTrackedPromise(value)) {\n    return value;\n  }\n\n  if (value._error) {\n    throw value._error;\n  }\n  return value._data;\n}\n\nexport type DeferFunction = (\n  data: Record<string, unknown>,\n  init?: number | ResponseInit\n) => DeferredData;\n\nexport const defer: DeferFunction = (data, init = {}) => {\n  let responseInit = typeof init === \"number\" ? { status: init } : init;\n\n  return new DeferredData(data, responseInit);\n};\n\nexport type RedirectFunction = (\n  url: string,\n  init?: number | ResponseInit\n) => Response;\n\n/**\n * A redirect response. Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nexport const redirect: RedirectFunction = (url, init = 302) => {\n  let responseInit = init;\n  if (typeof responseInit === \"number\") {\n    responseInit = { status: responseInit };\n  } else if (typeof responseInit.status === \"undefined\") {\n    responseInit.status = 302;\n  }\n\n  let headers = new Headers(responseInit.headers);\n  headers.set(\"Location\", url);\n\n  return new Response(null, {\n    ...responseInit,\n    headers,\n  });\n};\n\n/**\n * A redirect response that will force a document reload to the new location.\n * Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nexport const redirectDocument: RedirectFunction = (url, init) => {\n  let response = redirect(url, init);\n  response.headers.set(\"X-Remix-Reload-Document\", \"true\");\n  return response;\n};\n\n/**\n * A redirect response that will perform a `history.replaceState` instead of a\n * `history.pushState` for client-side navigation redirects.\n * Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nexport const replace: RedirectFunction = (url, init) => {\n  let response = redirect(url, init);\n  response.headers.set(\"X-Remix-Replace\", \"true\");\n  return response;\n};\n\nexport type ErrorResponse = {\n  status: number;\n  statusText: string;\n  data: any;\n};\n\n/**\n * @private\n * Utility class we use to hold auto-unwrapped 4xx/5xx Response bodies\n *\n * We don't export the class for public use since it's an implementation\n * detail, but we export the interface above so folks can build their own\n * abstractions around instances via isRouteErrorResponse()\n */\nexport class ErrorResponseImpl implements ErrorResponse {\n  status: number;\n  statusText: string;\n  data: any;\n  private error?: Error;\n  private internal: boolean;\n\n  constructor(\n    status: number,\n    statusText: string | undefined,\n    data: any,\n    internal = false\n  ) {\n    this.status = status;\n    this.statusText = statusText || \"\";\n    this.internal = internal;\n    if (data instanceof Error) {\n      this.data = data.toString();\n      this.error = data;\n    } else {\n      this.data = data;\n    }\n  }\n}\n\n/**\n * Check if the given error is an ErrorResponse generated from a 4xx/5xx\n * Response thrown from an action/loader\n */\nexport function isRouteErrorResponse(error: any): error is ErrorResponse {\n  return (\n    error != null &&\n    typeof error.status === \"number\" &&\n    typeof error.statusText === \"string\" &&\n    typeof error.internal === \"boolean\" &&\n    \"data\" in error\n  );\n}\n","import type { History, Location, Path, To } from \"./history\";\nimport {\n  Action as HistoryAction,\n  createLocation,\n  createPath,\n  invariant,\n  parsePath,\n  warning,\n} from \"./history\";\nimport type {\n  AgnosticDataRouteMatch,\n  AgnosticDataRouteObject,\n  DataStrategyMatch,\n  AgnosticRouteObject,\n  DataResult,\n  DataStrategyFunction,\n  DataStrategyFunctionArgs,\n  DeferredData,\n  DeferredResult,\n  DetectErrorBoundaryFunction,\n  ErrorResult,\n  FormEncType,\n  FormMethod,\n  HTMLFormMethod,\n  DataStrategyResult,\n  ImmutableRouteKey,\n  MapRoutePropertiesFunction,\n  MutationFormMethod,\n  RedirectResult,\n  RouteData,\n  RouteManifest,\n  ShouldRevalidateFunctionArgs,\n  Submission,\n  SuccessResult,\n  UIMatch,\n  V7_FormMethod,\n  V7_MutationFormMethod,\n  AgnosticPatchRoutesOnNavigationFunction,\n  DataWithResponseInit,\n} from \"./utils\";\nimport {\n  ErrorResponseImpl,\n  ResultType,\n  convertRouteMatchToUiMatch,\n  convertRoutesToDataRoutes,\n  getPathContributingMatches,\n  getResolveToMatches,\n  immutableRouteKeys,\n  isRouteErrorResponse,\n  joinPaths,\n  matchRoutes,\n  matchRoutesImpl,\n  resolveTo,\n  stripBasename,\n} from \"./utils\";\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A Router instance manages all navigation and data loading/mutations\n */\nexport interface Router {\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the basename for the router\n   */\n  get basename(): RouterInit[\"basename\"];\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the future config for the router\n   */\n  get future(): FutureConfig;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the current state of the router\n   */\n  get state(): RouterState;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the routes for this router instance\n   */\n  get routes(): AgnosticDataRouteObject[];\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the window associated with the router\n   */\n  get window(): RouterInit[\"window\"];\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Initialize the router, including adding history listeners and kicking off\n   * initial data fetches.  Returns a function to cleanup listeners and abort\n   * any in-progress loads\n   */\n  initialize(): Router;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Subscribe to router.state updates\n   *\n   * @param fn function to call with the new state\n   */\n  subscribe(fn: RouterSubscriber): () => void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Enable scroll restoration behavior in the router\n   *\n   * @param savedScrollPositions Object that will manage positions, in case\n   *                             it's being restored from sessionStorage\n   * @param getScrollPosition    Function to get the active Y scroll position\n   * @param getKey               Function to get the key to use for restoration\n   */\n  enableScrollRestoration(\n    savedScrollPositions: Record<string, number>,\n    getScrollPosition: GetScrollPositionFunction,\n    getKey?: GetScrollRestorationKeyFunction\n  ): () => void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Navigate forward/backward in the history stack\n   * @param to Delta to move in the history stack\n   */\n  navigate(to: number): Promise<void>;\n\n  /**\n   * Navigate to the given path\n   * @param to Path to navigate to\n   * @param opts Navigation options (method, submission, etc.)\n   */\n  navigate(to: To | null, opts?: RouterNavigateOptions): Promise<void>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Trigger a fetcher load/submission\n   *\n   * @param key     Fetcher key\n   * @param routeId Route that owns the fetcher\n   * @param href    href to fetch\n   * @param opts    Fetcher options, (method, submission, etc.)\n   */\n  fetch(\n    key: string,\n    routeId: string,\n    href: string | null,\n    opts?: RouterFetchOptions\n  ): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Trigger a revalidation of all current route loaders and fetcher loads\n   */\n  revalidate(): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Utility function to create an href for the given location\n   * @param location\n   */\n  createHref(location: Location | URL): string;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Utility function to URL encode a destination path according to the internal\n   * history implementation\n   * @param to\n   */\n  encodeLocation(to: To): Path;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Get/create a fetcher for the given key\n   * @param key\n   */\n  getFetcher<TData = any>(key: string): Fetcher<TData>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Delete the fetcher for a given key\n   * @param key\n   */\n  deleteFetcher(key: string): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Cleanup listeners and abort any in-progress loads\n   */\n  dispose(): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Get a navigation blocker\n   * @param key The identifier for the blocker\n   * @param fn The blocker function implementation\n   */\n  getBlocker(key: string, fn: BlockerFunction): Blocker;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Delete a navigation blocker\n   * @param key The identifier for the blocker\n   */\n  deleteBlocker(key: string): void;\n\n  /**\n   * @internal\n   * PRIVATE DO NOT USE\n   *\n   * Patch additional children routes into an existing parent route\n   * @param routeId The parent route id or a callback function accepting `patch`\n   *                to perform batch patching\n   * @param children The additional children routes\n   */\n  patchRoutes(routeId: string | null, children: AgnosticRouteObject[]): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * HMR needs to pass in-flight route updates to React Router\n   * TODO: Replace this with granular route update APIs (addRoute, updateRoute, deleteRoute)\n   */\n  _internalSetRoutes(routes: AgnosticRouteObject[]): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Internal fetch AbortControllers accessed by unit tests\n   */\n  _internalFetchControllers: Map<string, AbortController>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Internal pending DeferredData instances accessed by unit tests\n   */\n  _internalActiveDeferreds: Map<string, DeferredData>;\n}\n\n/**\n * State maintained internally by the router.  During a navigation, all states\n * reflect the the \"old\" location unless otherwise noted.\n */\nexport interface RouterState {\n  /**\n   * The action of the most recent navigation\n   */\n  historyAction: HistoryAction;\n\n  /**\n   * The current location reflected by the router\n   */\n  location: Location;\n\n  /**\n   * The current set of route matches\n   */\n  matches: AgnosticDataRouteMatch[];\n\n  /**\n   * Tracks whether we've completed our initial data load\n   */\n  initialized: boolean;\n\n  /**\n   * Current scroll position we should start at for a new view\n   *  - number -> scroll position to restore to\n   *  - false -> do not restore scroll at all (used during submissions)\n   *  - null -> don't have a saved position, scroll to hash or top of page\n   */\n  restoreScrollPosition: number | false | null;\n\n  /**\n   * Indicate whether this navigation should skip resetting the scroll position\n   * if we are unable to restore the scroll position\n   */\n  preventScrollReset: boolean;\n\n  /**\n   * Tracks the state of the current navigation\n   */\n  navigation: Navigation;\n\n  /**\n   * Tracks any in-progress revalidations\n   */\n  revalidation: RevalidationState;\n\n  /**\n   * Data from the loaders for the current matches\n   */\n  loaderData: RouteData;\n\n  /**\n   * Data from the action for the current matches\n   */\n  actionData: RouteData | null;\n\n  /**\n   * Errors caught from loaders for the current matches\n   */\n  errors: RouteData | null;\n\n  /**\n   * Map of current fetchers\n   */\n  fetchers: Map<string, Fetcher>;\n\n  /**\n   * Map of current blockers\n   */\n  blockers: Map<string, Blocker>;\n}\n\n/**\n * Data that can be passed into hydrate a Router from SSR\n */\nexport type HydrationState = Partial<\n  Pick<RouterState, \"loaderData\" | \"actionData\" | \"errors\">\n>;\n\n/**\n * Future flags to toggle new feature behavior\n */\nexport interface FutureConfig {\n  v7_fetcherPersist: boolean;\n  v7_normalizeFormMethod: boolean;\n  v7_partialHydration: boolean;\n  v7_prependBasename: boolean;\n  v7_relativeSplatPath: boolean;\n  v7_skipActionErrorRevalidation: boolean;\n}\n\n/**\n * Initialization options for createRouter\n */\nexport interface RouterInit {\n  routes: AgnosticRouteObject[];\n  history: History;\n  basename?: string;\n  /**\n   * @deprecated Use `mapRouteProperties` instead\n   */\n  detectErrorBoundary?: DetectErrorBoundaryFunction;\n  mapRouteProperties?: MapRoutePropertiesFunction;\n  future?: Partial<FutureConfig>;\n  hydrationData?: HydrationState;\n  window?: Window;\n  unstable_patchRoutesOnNavigation?: AgnosticPatchRoutesOnNavigationFunction;\n  unstable_dataStrategy?: DataStrategyFunction;\n}\n\n/**\n * State returned from a server-side query() call\n */\nexport interface StaticHandlerContext {\n  basename: Router[\"basename\"];\n  location: RouterState[\"location\"];\n  matches: RouterState[\"matches\"];\n  loaderData: RouterState[\"loaderData\"];\n  actionData: RouterState[\"actionData\"];\n  errors: RouterState[\"errors\"];\n  statusCode: number;\n  loaderHeaders: Record<string, Headers>;\n  actionHeaders: Record<string, Headers>;\n  activeDeferreds: Record<string, DeferredData> | null;\n  _deepestRenderedBoundaryId?: string | null;\n}\n\n/**\n * A StaticHandler instance manages a singular SSR navigation/fetch event\n */\nexport interface StaticHandler {\n  dataRoutes: AgnosticDataRouteObject[];\n  query(\n    request: Request,\n    opts?: {\n      requestContext?: unknown;\n      skipLoaderErrorBubbling?: boolean;\n      unstable_dataStrategy?: DataStrategyFunction;\n    }\n  ): Promise<StaticHandlerContext | Response>;\n  queryRoute(\n    request: Request,\n    opts?: {\n      routeId?: string;\n      requestContext?: unknown;\n      unstable_dataStrategy?: DataStrategyFunction;\n    }\n  ): Promise<any>;\n}\n\ntype ViewTransitionOpts = {\n  currentLocation: Location;\n  nextLocation: Location;\n};\n\n/**\n * Subscriber function signature for changes to router state\n */\nexport interface RouterSubscriber {\n  (\n    state: RouterState,\n    opts: {\n      deletedFetchers: string[];\n      unstable_viewTransitionOpts?: ViewTransitionOpts;\n      unstable_flushSync: boolean;\n    }\n  ): void;\n}\n\n/**\n * Function signature for determining the key to be used in scroll restoration\n * for a given location\n */\nexport interface GetScrollRestorationKeyFunction {\n  (location: Location, matches: UIMatch[]): string | null;\n}\n\n/**\n * Function signature for determining the current scroll position\n */\nexport interface GetScrollPositionFunction {\n  (): number;\n}\n\nexport type RelativeRoutingType = \"route\" | \"path\";\n\n// Allowed for any navigation or fetch\ntype BaseNavigateOrFetchOptions = {\n  preventScrollReset?: boolean;\n  relative?: RelativeRoutingType;\n  unstable_flushSync?: boolean;\n};\n\n// Only allowed for navigations\ntype BaseNavigateOptions = BaseNavigateOrFetchOptions & {\n  replace?: boolean;\n  state?: any;\n  fromRouteId?: string;\n  unstable_viewTransition?: boolean;\n};\n\n// Only allowed for submission navigations\ntype BaseSubmissionOptions = {\n  formMethod?: HTMLFormMethod;\n  formEncType?: FormEncType;\n} & (\n  | { formData: FormData; body?: undefined }\n  | { formData?: undefined; body: any }\n);\n\n/**\n * Options for a navigate() call for a normal (non-submission) navigation\n */\ntype LinkNavigateOptions = BaseNavigateOptions;\n\n/**\n * Options for a navigate() call for a submission navigation\n */\ntype SubmissionNavigateOptions = BaseNavigateOptions & BaseSubmissionOptions;\n\n/**\n * Options to pass to navigate() for a navigation\n */\nexport type RouterNavigateOptions =\n  | LinkNavigateOptions\n  | SubmissionNavigateOptions;\n\n/**\n * Options for a fetch() load\n */\ntype LoadFetchOptions = BaseNavigateOrFetchOptions;\n\n/**\n * Options for a fetch() submission\n */\ntype SubmitFetchOptions = BaseNavigateOrFetchOptions & BaseSubmissionOptions;\n\n/**\n * Options to pass to fetch()\n */\nexport type RouterFetchOptions = LoadFetchOptions | SubmitFetchOptions;\n\n/**\n * Potential states for state.navigation\n */\nexport type NavigationStates = {\n  Idle: {\n    state: \"idle\";\n    location: undefined;\n    formMethod: undefined;\n    formAction: undefined;\n    formEncType: undefined;\n    formData: undefined;\n    json: undefined;\n    text: undefined;\n  };\n  Loading: {\n    state: \"loading\";\n    location: Location;\n    formMethod: Submission[\"formMethod\"] | undefined;\n    formAction: Submission[\"formAction\"] | undefined;\n    formEncType: Submission[\"formEncType\"] | undefined;\n    formData: Submission[\"formData\"] | undefined;\n    json: Submission[\"json\"] | undefined;\n    text: Submission[\"text\"] | undefined;\n  };\n  Submitting: {\n    state: \"submitting\";\n    location: Location;\n    formMethod: Submission[\"formMethod\"];\n    formAction: Submission[\"formAction\"];\n    formEncType: Submission[\"formEncType\"];\n    formData: Submission[\"formData\"];\n    json: Submission[\"json\"];\n    text: Submission[\"text\"];\n  };\n};\n\nexport type Navigation = NavigationStates[keyof NavigationStates];\n\nexport type RevalidationState = \"idle\" | \"loading\";\n\n/**\n * Potential states for fetchers\n */\ntype FetcherStates<TData = any> = {\n  Idle: {\n    state: \"idle\";\n    formMethod: undefined;\n    formAction: undefined;\n    formEncType: undefined;\n    text: undefined;\n    formData: undefined;\n    json: undefined;\n    data: TData | undefined;\n  };\n  Loading: {\n    state: \"loading\";\n    formMethod: Submission[\"formMethod\"] | undefined;\n    formAction: Submission[\"formAction\"] | undefined;\n    formEncType: Submission[\"formEncType\"] | undefined;\n    text: Submission[\"text\"] | undefined;\n    formData: Submission[\"formData\"] | undefined;\n    json: Submission[\"json\"] | undefined;\n    data: TData | undefined;\n  };\n  Submitting: {\n    state: \"submitting\";\n    formMethod: Submission[\"formMethod\"];\n    formAction: Submission[\"formAction\"];\n    formEncType: Submission[\"formEncType\"];\n    text: Submission[\"text\"];\n    formData: Submission[\"formData\"];\n    json: Submission[\"json\"];\n    data: TData | undefined;\n  };\n};\n\nexport type Fetcher<TData = any> =\n  FetcherStates<TData>[keyof FetcherStates<TData>];\n\ninterface BlockerBlocked {\n  state: \"blocked\";\n  reset(): void;\n  proceed(): void;\n  location: Location;\n}\n\ninterface BlockerUnblocked {\n  state: \"unblocked\";\n  reset: undefined;\n  proceed: undefined;\n  location: undefined;\n}\n\ninterface BlockerProceeding {\n  state: \"proceeding\";\n  reset: undefined;\n  proceed: undefined;\n  location: Location;\n}\n\nexport type Blocker = BlockerUnblocked | BlockerBlocked | BlockerProceeding;\n\nexport type BlockerFunction = (args: {\n  currentLocation: Location;\n  nextLocation: Location;\n  historyAction: HistoryAction;\n}) => boolean;\n\ninterface ShortCircuitable {\n  /**\n   * startNavigation does not need to complete the navigation because we\n   * redirected or got interrupted\n   */\n  shortCircuited?: boolean;\n}\n\ntype PendingActionResult = [string, SuccessResult | ErrorResult];\n\ninterface HandleActionResult extends ShortCircuitable {\n  /**\n   * Route matches which may have been updated from fog of war discovery\n   */\n  matches?: RouterState[\"matches\"];\n  /**\n   * Tuple for the returned or thrown value from the current action.  The routeId\n   * is the action route for success and the bubbled boundary route for errors.\n   */\n  pendingActionResult?: PendingActionResult;\n}\n\ninterface HandleLoadersResult extends ShortCircuitable {\n  /**\n   * Route matches which may have been updated from fog of war discovery\n   */\n  matches?: RouterState[\"matches\"];\n  /**\n   * loaderData returned from the current set of loaders\n   */\n  loaderData?: RouterState[\"loaderData\"];\n  /**\n   * errors thrown from the current set of loaders\n   */\n  errors?: RouterState[\"errors\"];\n}\n\n/**\n * Cached info for active fetcher.load() instances so they can participate\n * in revalidation\n */\ninterface FetchLoadMatch {\n  routeId: string;\n  path: string;\n}\n\n/**\n * Identified fetcher.load() calls that need to be revalidated\n */\ninterface RevalidatingFetcher extends FetchLoadMatch {\n  key: string;\n  match: AgnosticDataRouteMatch | null;\n  matches: AgnosticDataRouteMatch[] | null;\n  controller: AbortController | null;\n}\n\nconst validMutationMethodsArr: MutationFormMethod[] = [\n  \"post\",\n  \"put\",\n  \"patch\",\n  \"delete\",\n];\nconst validMutationMethods = new Set<MutationFormMethod>(\n  validMutationMethodsArr\n);\n\nconst validRequestMethodsArr: FormMethod[] = [\n  \"get\",\n  ...validMutationMethodsArr,\n];\nconst validRequestMethods = new Set<FormMethod>(validRequestMethodsArr);\n\nconst redirectStatusCodes = new Set([301, 302, 303, 307, 308]);\nconst redirectPreserveMethodStatusCodes = new Set([307, 308]);\n\nexport const IDLE_NAVIGATION: NavigationStates[\"Idle\"] = {\n  state: \"idle\",\n  location: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n  json: undefined,\n  text: undefined,\n};\n\nexport const IDLE_FETCHER: FetcherStates[\"Idle\"] = {\n  state: \"idle\",\n  data: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n  json: undefined,\n  text: undefined,\n};\n\nexport const IDLE_BLOCKER: BlockerUnblocked = {\n  state: \"unblocked\",\n  proceed: undefined,\n  reset: undefined,\n  location: undefined,\n};\n\nconst ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\\/\\/)/i;\n\nconst defaultMapRouteProperties: MapRoutePropertiesFunction = (route) => ({\n  hasErrorBoundary: Boolean(route.hasErrorBoundary),\n});\n\nconst TRANSITIONS_STORAGE_KEY = \"remix-router-transitions\";\n\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region createRouter\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Create a router and listen to history POP navigations\n */\nexport function createRouter(init: RouterInit): Router {\n  const routerWindow = init.window\n    ? init.window\n    : typeof window !== \"undefined\"\n    ? window\n    : undefined;\n  const isBrowser =\n    typeof routerWindow !== \"undefined\" &&\n    typeof routerWindow.document !== \"undefined\" &&\n    typeof routerWindow.document.createElement !== \"undefined\";\n  const isServer = !isBrowser;\n\n  invariant(\n    init.routes.length > 0,\n    \"You must provide a non-empty routes array to createRouter\"\n  );\n\n  let mapRouteProperties: MapRoutePropertiesFunction;\n  if (init.mapRouteProperties) {\n    mapRouteProperties = init.mapRouteProperties;\n  } else if (init.detectErrorBoundary) {\n    // If they are still using the deprecated version, wrap it with the new API\n    let detectErrorBoundary = init.detectErrorBoundary;\n    mapRouteProperties = (route) => ({\n      hasErrorBoundary: detectErrorBoundary(route),\n    });\n  } else {\n    mapRouteProperties = defaultMapRouteProperties;\n  }\n\n  // Routes keyed by ID\n  let manifest: RouteManifest = {};\n  // Routes in tree format for matching\n  let dataRoutes = convertRoutesToDataRoutes(\n    init.routes,\n    mapRouteProperties,\n    undefined,\n    manifest\n  );\n  let inFlightDataRoutes: AgnosticDataRouteObject[] | undefined;\n  let basename = init.basename || \"/\";\n  let dataStrategyImpl = init.unstable_dataStrategy || defaultDataStrategy;\n  let patchRoutesOnNavigationImpl = init.unstable_patchRoutesOnNavigation;\n\n  // Config driven behavior flags\n  let future: FutureConfig = {\n    v7_fetcherPersist: false,\n    v7_normalizeFormMethod: false,\n    v7_partialHydration: false,\n    v7_prependBasename: false,\n    v7_relativeSplatPath: false,\n    v7_skipActionErrorRevalidation: false,\n    ...init.future,\n  };\n  // Cleanup function for history\n  let unlistenHistory: (() => void) | null = null;\n  // Externally-provided functions to call on all state changes\n  let subscribers = new Set<RouterSubscriber>();\n  // FIFO queue of previously discovered routes to prevent re-calling on\n  // subsequent navigations to the same path\n  let discoveredRoutesMaxSize = 1000;\n  let discoveredRoutes = new Set<string>();\n  // Externally-provided object to hold scroll restoration locations during routing\n  let savedScrollPositions: Record<string, number> | null = null;\n  // Externally-provided function to get scroll restoration keys\n  let getScrollRestorationKey: GetScrollRestorationKeyFunction | null = null;\n  // Externally-provided function to get current scroll position\n  let getScrollPosition: GetScrollPositionFunction | null = null;\n  // One-time flag to control the initial hydration scroll restoration.  Because\n  // we don't get the saved positions from <ScrollRestoration /> until _after_\n  // the initial render, we need to manually trigger a separate updateState to\n  // send along the restoreScrollPosition\n  // Set to true if we have `hydrationData` since we assume we were SSR'd and that\n  // SSR did the initial scroll restoration.\n  let initialScrollRestored = init.hydrationData != null;\n\n  let initialMatches = matchRoutes(dataRoutes, init.history.location, basename);\n  let initialErrors: RouteData | null = null;\n\n  if (initialMatches == null && !patchRoutesOnNavigationImpl) {\n    // If we do not match a user-provided-route, fall back to the root\n    // to allow the error boundary to take over\n    let error = getInternalRouterError(404, {\n      pathname: init.history.location.pathname,\n    });\n    let { matches, route } = getShortCircuitMatches(dataRoutes);\n    initialMatches = matches;\n    initialErrors = { [route.id]: error };\n  }\n\n  // In SPA apps, if the user provided a patchRoutesOnNavigation implementation and\n  // our initial match is a splat route, clear them out so we run through lazy\n  // discovery on hydration in case there's a more accurate lazy route match.\n  // In SSR apps (with `hydrationData`), we expect that the server will send\n  // up the proper matched routes so we don't want to run lazy discovery on\n  // initial hydration and want to hydrate into the splat route.\n  if (initialMatches && !init.hydrationData) {\n    let fogOfWar = checkFogOfWar(\n      initialMatches,\n      dataRoutes,\n      init.history.location.pathname\n    );\n    if (fogOfWar.active) {\n      initialMatches = null;\n    }\n  }\n\n  let initialized: boolean;\n  if (!initialMatches) {\n    initialized = false;\n    initialMatches = [];\n\n    // If partial hydration and fog of war is enabled, we will be running\n    // `patchRoutesOnNavigation` during hydration so include any partial matches as\n    // the initial matches so we can properly render `HydrateFallback`'s\n    if (future.v7_partialHydration) {\n      let fogOfWar = checkFogOfWar(\n        null,\n        dataRoutes,\n        init.history.location.pathname\n      );\n      if (fogOfWar.active && fogOfWar.matches) {\n        initialMatches = fogOfWar.matches;\n      }\n    }\n  } else if (initialMatches.some((m) => m.route.lazy)) {\n    // All initialMatches need to be loaded before we're ready.  If we have lazy\n    // functions around still then we'll need to run them in initialize()\n    initialized = false;\n  } else if (!initialMatches.some((m) => m.route.loader)) {\n    // If we've got no loaders to run, then we're good to go\n    initialized = true;\n  } else if (future.v7_partialHydration) {\n    // If partial hydration is enabled, we're initialized so long as we were\n    // provided with hydrationData for every route with a loader, and no loaders\n    // were marked for explicit hydration\n    let loaderData = init.hydrationData ? init.hydrationData.loaderData : null;\n    let errors = init.hydrationData ? init.hydrationData.errors : null;\n    let isRouteInitialized = (m: AgnosticDataRouteMatch) => {\n      // No loader, nothing to initialize\n      if (!m.route.loader) {\n        return true;\n      }\n      // Explicitly opting-in to running on hydration\n      if (\n        typeof m.route.loader === \"function\" &&\n        m.route.loader.hydrate === true\n      ) {\n        return false;\n      }\n      // Otherwise, initialized if hydrated with data or an error\n      return (\n        (loaderData && loaderData[m.route.id] !== undefined) ||\n        (errors && errors[m.route.id] !== undefined)\n      );\n    };\n\n    // If errors exist, don't consider routes below the boundary\n    if (errors) {\n      let idx = initialMatches.findIndex(\n        (m) => errors![m.route.id] !== undefined\n      );\n      initialized = initialMatches.slice(0, idx + 1).every(isRouteInitialized);\n    } else {\n      initialized = initialMatches.every(isRouteInitialized);\n    }\n  } else {\n    // Without partial hydration - we're initialized if we were provided any\n    // hydrationData - which is expected to be complete\n    initialized = init.hydrationData != null;\n  }\n\n  let router: Router;\n  let state: RouterState = {\n    historyAction: init.history.action,\n    location: init.history.location,\n    matches: initialMatches,\n    initialized,\n    navigation: IDLE_NAVIGATION,\n    // Don't restore on initial updateState() if we were SSR'd\n    restoreScrollPosition: init.hydrationData != null ? false : null,\n    preventScrollReset: false,\n    revalidation: \"idle\",\n    loaderData: (init.hydrationData && init.hydrationData.loaderData) || {},\n    actionData: (init.hydrationData && init.hydrationData.actionData) || null,\n    errors: (init.hydrationData && init.hydrationData.errors) || initialErrors,\n    fetchers: new Map(),\n    blockers: new Map(),\n  };\n\n  // -- Stateful internal variables to manage navigations --\n  // Current navigation in progress (to be committed in completeNavigation)\n  let pendingAction: HistoryAction = HistoryAction.Pop;\n\n  // Should the current navigation prevent the scroll reset if scroll cannot\n  // be restored?\n  let pendingPreventScrollReset = false;\n\n  // AbortController for the active navigation\n  let pendingNavigationController: AbortController | null;\n\n  // Should the current navigation enable document.startViewTransition?\n  let pendingViewTransitionEnabled = false;\n\n  // Store applied view transitions so we can apply them on POP\n  let appliedViewTransitions: Map<string, Set<string>> = new Map<\n    string,\n    Set<string>\n  >();\n\n  // Cleanup function for persisting applied transitions to sessionStorage\n  let removePageHideEventListener: (() => void) | null = null;\n\n  // We use this to avoid touching history in completeNavigation if a\n  // revalidation is entirely uninterrupted\n  let isUninterruptedRevalidation = false;\n\n  // Use this internal flag to force revalidation of all loaders:\n  //  - submissions (completed or interrupted)\n  //  - useRevalidator()\n  //  - X-Remix-Revalidate (from redirect)\n  let isRevalidationRequired = false;\n\n  // Use this internal array to capture routes that require revalidation due\n  // to a cancelled deferred on action submission\n  let cancelledDeferredRoutes: string[] = [];\n\n  // Use this internal array to capture fetcher loads that were cancelled by an\n  // action navigation and require revalidation\n  let cancelledFetcherLoads: Set<string> = new Set();\n\n  // AbortControllers for any in-flight fetchers\n  let fetchControllers = new Map<string, AbortController>();\n\n  // Track loads based on the order in which they started\n  let incrementingLoadId = 0;\n\n  // Track the outstanding pending navigation data load to be compared against\n  // the globally incrementing load when a fetcher load lands after a completed\n  // navigation\n  let pendingNavigationLoadId = -1;\n\n  // Fetchers that triggered data reloads as a result of their actions\n  let fetchReloadIds = new Map<string, number>();\n\n  // Fetchers that triggered redirect navigations\n  let fetchRedirectIds = new Set<string>();\n\n  // Most recent href/match for fetcher.load calls for fetchers\n  let fetchLoadMatches = new Map<string, FetchLoadMatch>();\n\n  // Ref-count mounted fetchers so we know when it's ok to clean them up\n  let activeFetchers = new Map<string, number>();\n\n  // Fetchers that have requested a delete when using v7_fetcherPersist,\n  // they'll be officially removed after they return to idle\n  let deletedFetchers = new Set<string>();\n\n  // Store DeferredData instances for active route matches.  When a\n  // route loader returns defer() we stick one in here.  Then, when a nested\n  // promise resolves we update loaderData.  If a new navigation starts we\n  // cancel active deferreds for eliminated routes.\n  let activeDeferreds = new Map<string, DeferredData>();\n\n  // Store blocker functions in a separate Map outside of router state since\n  // we don't need to update UI state if they change\n  let blockerFunctions = new Map<string, BlockerFunction>();\n\n  // Map of pending patchRoutesOnNavigation() promises (keyed by path/matches) so\n  // that we only kick them off once for a given combo\n  let pendingPatchRoutes = new Map<\n    string,\n    ReturnType<AgnosticPatchRoutesOnNavigationFunction>\n  >();\n\n  // Flag to ignore the next history update, so we can revert the URL change on\n  // a POP navigation that was blocked by the user without touching router state\n  let unblockBlockerHistoryUpdate: (() => void) | undefined = undefined;\n\n  // Initialize the router, all side effects should be kicked off from here.\n  // Implemented as a Fluent API for ease of:\n  //   let router = createRouter(init).initialize();\n  function initialize() {\n    // If history informs us of a POP navigation, start the navigation but do not update\n    // state.  We'll update our own state once the navigation completes\n    unlistenHistory = init.history.listen(\n      ({ action: historyAction, location, delta }) => {\n        // Ignore this event if it was just us resetting the URL from a\n        // blocked POP navigation\n        if (unblockBlockerHistoryUpdate) {\n          unblockBlockerHistoryUpdate();\n          unblockBlockerHistoryUpdate = undefined;\n          return;\n        }\n\n        warning(\n          blockerFunctions.size === 0 || delta != null,\n          \"You are trying to use a blocker on a POP navigation to a location \" +\n            \"that was not created by @remix-run/router. This will fail silently in \" +\n            \"production. This can happen if you are navigating outside the router \" +\n            \"via `window.history.pushState`/`window.location.hash` instead of using \" +\n            \"router navigation APIs.  This can also happen if you are using \" +\n            \"createHashRouter and the user manually changes the URL.\"\n        );\n\n        let blockerKey = shouldBlockNavigation({\n          currentLocation: state.location,\n          nextLocation: location,\n          historyAction,\n        });\n\n        if (blockerKey && delta != null) {\n          // Restore the URL to match the current UI, but don't update router state\n          let nextHistoryUpdatePromise = new Promise<void>((resolve) => {\n            unblockBlockerHistoryUpdate = resolve;\n          });\n          init.history.go(delta * -1);\n\n          // Put the blocker into a blocked state\n          updateBlocker(blockerKey, {\n            state: \"blocked\",\n            location,\n            proceed() {\n              updateBlocker(blockerKey!, {\n                state: \"proceeding\",\n                proceed: undefined,\n                reset: undefined,\n                location,\n              });\n              // Re-do the same POP navigation we just blocked, after the url\n              // restoration is also complete.  See:\n              // https://github.com/remix-run/react-router/issues/11613\n              nextHistoryUpdatePromise.then(() => init.history.go(delta));\n            },\n            reset() {\n              let blockers = new Map(state.blockers);\n              blockers.set(blockerKey!, IDLE_BLOCKER);\n              updateState({ blockers });\n            },\n          });\n          return;\n        }\n\n        return startNavigation(historyAction, location);\n      }\n    );\n\n    if (isBrowser) {\n      // FIXME: This feels gross.  How can we cleanup the lines between\n      // scrollRestoration/appliedTransitions persistance?\n      restoreAppliedTransitions(routerWindow, appliedViewTransitions);\n      let _saveAppliedTransitions = () =>\n        persistAppliedTransitions(routerWindow, appliedViewTransitions);\n      routerWindow.addEventListener(\"pagehide\", _saveAppliedTransitions);\n      removePageHideEventListener = () =>\n        routerWindow.removeEventListener(\"pagehide\", _saveAppliedTransitions);\n    }\n\n    // Kick off initial data load if needed.  Use Pop to avoid modifying history\n    // Note we don't do any handling of lazy here.  For SPA's it'll get handled\n    // in the normal navigation flow.  For SSR it's expected that lazy modules are\n    // resolved prior to router creation since we can't go into a fallbackElement\n    // UI for SSR'd apps\n    if (!state.initialized) {\n      startNavigation(HistoryAction.Pop, state.location, {\n        initialHydration: true,\n      });\n    }\n\n    return router;\n  }\n\n  // Clean up a router and it's side effects\n  function dispose() {\n    if (unlistenHistory) {\n      unlistenHistory();\n    }\n    if (removePageHideEventListener) {\n      removePageHideEventListener();\n    }\n    subscribers.clear();\n    pendingNavigationController && pendingNavigationController.abort();\n    state.fetchers.forEach((_, key) => deleteFetcher(key));\n    state.blockers.forEach((_, key) => deleteBlocker(key));\n  }\n\n  // Subscribe to state updates for the router\n  function subscribe(fn: RouterSubscriber) {\n    subscribers.add(fn);\n    return () => subscribers.delete(fn);\n  }\n\n  // Update our state and notify the calling context of the change\n  function updateState(\n    newState: Partial<RouterState>,\n    opts: {\n      flushSync?: boolean;\n      viewTransitionOpts?: ViewTransitionOpts;\n    } = {}\n  ): void {\n    state = {\n      ...state,\n      ...newState,\n    };\n\n    // Prep fetcher cleanup so we can tell the UI which fetcher data entries\n    // can be removed\n    let completedFetchers: string[] = [];\n    let deletedFetchersKeys: string[] = [];\n\n    if (future.v7_fetcherPersist) {\n      state.fetchers.forEach((fetcher, key) => {\n        if (fetcher.state === \"idle\") {\n          if (deletedFetchers.has(key)) {\n            // Unmounted from the UI and can be totally removed\n            deletedFetchersKeys.push(key);\n          } else {\n            // Returned to idle but still mounted in the UI, so semi-remains for\n            // revalidations and such\n            completedFetchers.push(key);\n          }\n        }\n      });\n    }\n\n    // Iterate over a local copy so that if flushSync is used and we end up\n    // removing and adding a new subscriber due to the useCallback dependencies,\n    // we don't get ourselves into a loop calling the new subscriber immediately\n    [...subscribers].forEach((subscriber) =>\n      subscriber(state, {\n        deletedFetchers: deletedFetchersKeys,\n        unstable_viewTransitionOpts: opts.viewTransitionOpts,\n        unstable_flushSync: opts.flushSync === true,\n      })\n    );\n\n    // Remove idle fetchers from state since we only care about in-flight fetchers.\n    if (future.v7_fetcherPersist) {\n      completedFetchers.forEach((key) => state.fetchers.delete(key));\n      deletedFetchersKeys.forEach((key) => deleteFetcher(key));\n    }\n  }\n\n  // Complete a navigation returning the state.navigation back to the IDLE_NAVIGATION\n  // and setting state.[historyAction/location/matches] to the new route.\n  // - Location is a required param\n  // - Navigation will always be set to IDLE_NAVIGATION\n  // - Can pass any other state in newState\n  function completeNavigation(\n    location: Location,\n    newState: Partial<Omit<RouterState, \"action\" | \"location\" | \"navigation\">>,\n    { flushSync }: { flushSync?: boolean } = {}\n  ): void {\n    // Deduce if we're in a loading/actionReload state:\n    // - We have committed actionData in the store\n    // - The current navigation was a mutation submission\n    // - We're past the submitting state and into the loading state\n    // - The location being loaded is not the result of a redirect\n    let isActionReload =\n      state.actionData != null &&\n      state.navigation.formMethod != null &&\n      isMutationMethod(state.navigation.formMethod) &&\n      state.navigation.state === \"loading\" &&\n      location.state?._isRedirect !== true;\n\n    let actionData: RouteData | null;\n    if (newState.actionData) {\n      if (Object.keys(newState.actionData).length > 0) {\n        actionData = newState.actionData;\n      } else {\n        // Empty actionData -> clear prior actionData due to an action error\n        actionData = null;\n      }\n    } else if (isActionReload) {\n      // Keep the current data if we're wrapping up the action reload\n      actionData = state.actionData;\n    } else {\n      // Clear actionData on any other completed navigations\n      actionData = null;\n    }\n\n    // Always preserve any existing loaderData from re-used routes\n    let loaderData = newState.loaderData\n      ? mergeLoaderData(\n          state.loaderData,\n          newState.loaderData,\n          newState.matches || [],\n          newState.errors\n        )\n      : state.loaderData;\n\n    // On a successful navigation we can assume we got through all blockers\n    // so we can start fresh\n    let blockers = state.blockers;\n    if (blockers.size > 0) {\n      blockers = new Map(blockers);\n      blockers.forEach((_, k) => blockers.set(k, IDLE_BLOCKER));\n    }\n\n    // Always respect the user flag.  Otherwise don't reset on mutation\n    // submission navigations unless they redirect\n    let preventScrollReset =\n      pendingPreventScrollReset === true ||\n      (state.navigation.formMethod != null &&\n        isMutationMethod(state.navigation.formMethod) &&\n        location.state?._isRedirect !== true);\n\n    // Commit any in-flight routes at the end of the HMR revalidation \"navigation\"\n    if (inFlightDataRoutes) {\n      dataRoutes = inFlightDataRoutes;\n      inFlightDataRoutes = undefined;\n    }\n\n    if (isUninterruptedRevalidation) {\n      // If this was an uninterrupted revalidation then do not touch history\n    } else if (pendingAction === HistoryAction.Pop) {\n      // Do nothing for POP - URL has already been updated\n    } else if (pendingAction === HistoryAction.Push) {\n      init.history.push(location, location.state);\n    } else if (pendingAction === HistoryAction.Replace) {\n      init.history.replace(location, location.state);\n    }\n\n    let viewTransitionOpts: ViewTransitionOpts | undefined;\n\n    // On POP, enable transitions if they were enabled on the original navigation\n    if (pendingAction === HistoryAction.Pop) {\n      // Forward takes precedence so they behave like the original navigation\n      let priorPaths = appliedViewTransitions.get(state.location.pathname);\n      if (priorPaths && priorPaths.has(location.pathname)) {\n        viewTransitionOpts = {\n          currentLocation: state.location,\n          nextLocation: location,\n        };\n      } else if (appliedViewTransitions.has(location.pathname)) {\n        // If we don't have a previous forward nav, assume we're popping back to\n        // the new location and enable if that location previously enabled\n        viewTransitionOpts = {\n          currentLocation: location,\n          nextLocation: state.location,\n        };\n      }\n    } else if (pendingViewTransitionEnabled) {\n      // Store the applied transition on PUSH/REPLACE\n      let toPaths = appliedViewTransitions.get(state.location.pathname);\n      if (toPaths) {\n        toPaths.add(location.pathname);\n      } else {\n        toPaths = new Set<string>([location.pathname]);\n        appliedViewTransitions.set(state.location.pathname, toPaths);\n      }\n      viewTransitionOpts = {\n        currentLocation: state.location,\n        nextLocation: location,\n      };\n    }\n\n    updateState(\n      {\n        ...newState, // matches, errors, fetchers go through as-is\n        actionData,\n        loaderData,\n        historyAction: pendingAction,\n        location,\n        initialized: true,\n        navigation: IDLE_NAVIGATION,\n        revalidation: \"idle\",\n        restoreScrollPosition: getSavedScrollPosition(\n          location,\n          newState.matches || state.matches\n        ),\n        preventScrollReset,\n        blockers,\n      },\n      {\n        viewTransitionOpts,\n        flushSync: flushSync === true,\n      }\n    );\n\n    // Reset stateful navigation vars\n    pendingAction = HistoryAction.Pop;\n    pendingPreventScrollReset = false;\n    pendingViewTransitionEnabled = false;\n    isUninterruptedRevalidation = false;\n    isRevalidationRequired = false;\n    cancelledDeferredRoutes = [];\n  }\n\n  // Trigger a navigation event, which can either be a numerical POP or a PUSH\n  // replace with an optional submission\n  async function navigate(\n    to: number | To | null,\n    opts?: RouterNavigateOptions\n  ): Promise<void> {\n    if (typeof to === \"number\") {\n      init.history.go(to);\n      return;\n    }\n\n    let normalizedPath = normalizeTo(\n      state.location,\n      state.matches,\n      basename,\n      future.v7_prependBasename,\n      to,\n      future.v7_relativeSplatPath,\n      opts?.fromRouteId,\n      opts?.relative\n    );\n    let { path, submission, error } = normalizeNavigateOptions(\n      future.v7_normalizeFormMethod,\n      false,\n      normalizedPath,\n      opts\n    );\n\n    let currentLocation = state.location;\n    let nextLocation = createLocation(state.location, path, opts && opts.state);\n\n    // When using navigate as a PUSH/REPLACE we aren't reading an already-encoded\n    // URL from window.location, so we need to encode it here so the behavior\n    // remains the same as POP and non-data-router usages.  new URL() does all\n    // the same encoding we'd get from a history.pushState/window.location read\n    // without having to touch history\n    nextLocation = {\n      ...nextLocation,\n      ...init.history.encodeLocation(nextLocation),\n    };\n\n    let userReplace = opts && opts.replace != null ? opts.replace : undefined;\n\n    let historyAction = HistoryAction.Push;\n\n    if (userReplace === true) {\n      historyAction = HistoryAction.Replace;\n    } else if (userReplace === false) {\n      // no-op\n    } else if (\n      submission != null &&\n      isMutationMethod(submission.formMethod) &&\n      submission.formAction === state.location.pathname + state.location.search\n    ) {\n      // By default on submissions to the current location we REPLACE so that\n      // users don't have to double-click the back button to get to the prior\n      // location.  If the user redirects to a different location from the\n      // action/loader this will be ignored and the redirect will be a PUSH\n      historyAction = HistoryAction.Replace;\n    }\n\n    let preventScrollReset =\n      opts && \"preventScrollReset\" in opts\n        ? opts.preventScrollReset === true\n        : undefined;\n\n    let flushSync = (opts && opts.unstable_flushSync) === true;\n\n    let blockerKey = shouldBlockNavigation({\n      currentLocation,\n      nextLocation,\n      historyAction,\n    });\n\n    if (blockerKey) {\n      // Put the blocker into a blocked state\n      updateBlocker(blockerKey, {\n        state: \"blocked\",\n        location: nextLocation,\n        proceed() {\n          updateBlocker(blockerKey!, {\n            state: \"proceeding\",\n            proceed: undefined,\n            reset: undefined,\n            location: nextLocation,\n          });\n          // Send the same navigation through\n          navigate(to, opts);\n        },\n        reset() {\n          let blockers = new Map(state.blockers);\n          blockers.set(blockerKey!, IDLE_BLOCKER);\n          updateState({ blockers });\n        },\n      });\n      return;\n    }\n\n    return await startNavigation(historyAction, nextLocation, {\n      submission,\n      // Send through the formData serialization error if we have one so we can\n      // render at the right error boundary after we match routes\n      pendingError: error,\n      preventScrollReset,\n      replace: opts && opts.replace,\n      enableViewTransition: opts && opts.unstable_viewTransition,\n      flushSync,\n    });\n  }\n\n  // Revalidate all current loaders.  If a navigation is in progress or if this\n  // is interrupted by a navigation, allow this to \"succeed\" by calling all\n  // loaders during the next loader round\n  function revalidate() {\n    interruptActiveLoads();\n    updateState({ revalidation: \"loading\" });\n\n    // If we're currently submitting an action, we don't need to start a new\n    // navigation, we'll just let the follow up loader execution call all loaders\n    if (state.navigation.state === \"submitting\") {\n      return;\n    }\n\n    // If we're currently in an idle state, start a new navigation for the current\n    // action/location and mark it as uninterrupted, which will skip the history\n    // update in completeNavigation\n    if (state.navigation.state === \"idle\") {\n      startNavigation(state.historyAction, state.location, {\n        startUninterruptedRevalidation: true,\n      });\n      return;\n    }\n\n    // Otherwise, if we're currently in a loading state, just start a new\n    // navigation to the navigation.location but do not trigger an uninterrupted\n    // revalidation so that history correctly updates once the navigation completes\n    startNavigation(\n      pendingAction || state.historyAction,\n      state.navigation.location,\n      {\n        overrideNavigation: state.navigation,\n        // Proxy through any rending view transition\n        enableViewTransition: pendingViewTransitionEnabled === true,\n      }\n    );\n  }\n\n  // Start a navigation to the given action/location.  Can optionally provide a\n  // overrideNavigation which will override the normalLoad in the case of a redirect\n  // navigation\n  async function startNavigation(\n    historyAction: HistoryAction,\n    location: Location,\n    opts?: {\n      initialHydration?: boolean;\n      submission?: Submission;\n      fetcherSubmission?: Submission;\n      overrideNavigation?: Navigation;\n      pendingError?: ErrorResponseImpl;\n      startUninterruptedRevalidation?: boolean;\n      preventScrollReset?: boolean;\n      replace?: boolean;\n      enableViewTransition?: boolean;\n      flushSync?: boolean;\n    }\n  ): Promise<void> {\n    // Abort any in-progress navigations and start a new one. Unset any ongoing\n    // uninterrupted revalidations unless told otherwise, since we want this\n    // new navigation to update history normally\n    pendingNavigationController && pendingNavigationController.abort();\n    pendingNavigationController = null;\n    pendingAction = historyAction;\n    isUninterruptedRevalidation =\n      (opts && opts.startUninterruptedRevalidation) === true;\n\n    // Save the current scroll position every time we start a new navigation,\n    // and track whether we should reset scroll on completion\n    saveScrollPosition(state.location, state.matches);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n\n    pendingViewTransitionEnabled = (opts && opts.enableViewTransition) === true;\n\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let loadingNavigation = opts && opts.overrideNavigation;\n    let matches = matchRoutes(routesToUse, location, basename);\n    let flushSync = (opts && opts.flushSync) === true;\n\n    let fogOfWar = checkFogOfWar(matches, routesToUse, location.pathname);\n    if (fogOfWar.active && fogOfWar.matches) {\n      matches = fogOfWar.matches;\n    }\n\n    // Short circuit with a 404 on the root error boundary if we match nothing\n    if (!matches) {\n      let { error, notFoundMatches, route } = handleNavigational404(\n        location.pathname\n      );\n      completeNavigation(\n        location,\n        {\n          matches: notFoundMatches,\n          loaderData: {},\n          errors: {\n            [route.id]: error,\n          },\n        },\n        { flushSync }\n      );\n      return;\n    }\n\n    // Short circuit if it's only a hash change and not a revalidation or\n    // mutation submission.\n    //\n    // Ignore on initial page loads because since the initial load will always\n    // be \"same hash\".  For example, on /page#hash and submit a <Form method=\"post\">\n    // which will default to a navigation to /page\n    if (\n      state.initialized &&\n      !isRevalidationRequired &&\n      isHashChangeOnly(state.location, location) &&\n      !(opts && opts.submission && isMutationMethod(opts.submission.formMethod))\n    ) {\n      completeNavigation(location, { matches }, { flushSync });\n      return;\n    }\n\n    // Create a controller/Request for this navigation\n    pendingNavigationController = new AbortController();\n    let request = createClientSideRequest(\n      init.history,\n      location,\n      pendingNavigationController.signal,\n      opts && opts.submission\n    );\n    let pendingActionResult: PendingActionResult | undefined;\n\n    if (opts && opts.pendingError) {\n      // If we have a pendingError, it means the user attempted a GET submission\n      // with binary FormData so assign here and skip to handleLoaders.  That\n      // way we handle calling loaders above the boundary etc.  It's not really\n      // different from an actionError in that sense.\n      pendingActionResult = [\n        findNearestBoundary(matches).route.id,\n        { type: ResultType.error, error: opts.pendingError },\n      ];\n    } else if (\n      opts &&\n      opts.submission &&\n      isMutationMethod(opts.submission.formMethod)\n    ) {\n      // Call action if we received an action submission\n      let actionResult = await handleAction(\n        request,\n        location,\n        opts.submission,\n        matches,\n        fogOfWar.active,\n        { replace: opts.replace, flushSync }\n      );\n\n      if (actionResult.shortCircuited) {\n        return;\n      }\n\n      // If we received a 404 from handleAction, it's because we couldn't lazily\n      // discover the destination route so we don't want to call loaders\n      if (actionResult.pendingActionResult) {\n        let [routeId, result] = actionResult.pendingActionResult;\n        if (\n          isErrorResult(result) &&\n          isRouteErrorResponse(result.error) &&\n          result.error.status === 404\n        ) {\n          pendingNavigationController = null;\n\n          completeNavigation(location, {\n            matches: actionResult.matches,\n            loaderData: {},\n            errors: {\n              [routeId]: result.error,\n            },\n          });\n          return;\n        }\n      }\n\n      matches = actionResult.matches || matches;\n      pendingActionResult = actionResult.pendingActionResult;\n      loadingNavigation = getLoadingNavigation(location, opts.submission);\n      flushSync = false;\n      // No need to do fog of war matching again on loader execution\n      fogOfWar.active = false;\n\n      // Create a GET request for the loaders\n      request = createClientSideRequest(\n        init.history,\n        request.url,\n        request.signal\n      );\n    }\n\n    // Call loaders\n    let {\n      shortCircuited,\n      matches: updatedMatches,\n      loaderData,\n      errors,\n    } = await handleLoaders(\n      request,\n      location,\n      matches,\n      fogOfWar.active,\n      loadingNavigation,\n      opts && opts.submission,\n      opts && opts.fetcherSubmission,\n      opts && opts.replace,\n      opts && opts.initialHydration === true,\n      flushSync,\n      pendingActionResult\n    );\n\n    if (shortCircuited) {\n      return;\n    }\n\n    // Clean up now that the action/loaders have completed.  Don't clean up if\n    // we short circuited because pendingNavigationController will have already\n    // been assigned to a new controller for the next navigation\n    pendingNavigationController = null;\n\n    completeNavigation(location, {\n      matches: updatedMatches || matches,\n      ...getActionDataForCommit(pendingActionResult),\n      loaderData,\n      errors,\n    });\n  }\n\n  // Call the action matched by the leaf route for this navigation and handle\n  // redirects/errors\n  async function handleAction(\n    request: Request,\n    location: Location,\n    submission: Submission,\n    matches: AgnosticDataRouteMatch[],\n    isFogOfWar: boolean,\n    opts: { replace?: boolean; flushSync?: boolean } = {}\n  ): Promise<HandleActionResult> {\n    interruptActiveLoads();\n\n    // Put us in a submitting state\n    let navigation = getSubmittingNavigation(location, submission);\n    updateState({ navigation }, { flushSync: opts.flushSync === true });\n\n    if (isFogOfWar) {\n      let discoverResult = await discoverRoutes(\n        matches,\n        location.pathname,\n        request.signal\n      );\n      if (discoverResult.type === \"aborted\") {\n        return { shortCircuited: true };\n      } else if (discoverResult.type === \"error\") {\n        let { boundaryId, error } = handleDiscoverRouteError(\n          location.pathname,\n          discoverResult\n        );\n        return {\n          matches: discoverResult.partialMatches,\n          pendingActionResult: [\n            boundaryId,\n            {\n              type: ResultType.error,\n              error,\n            },\n          ],\n        };\n      } else if (!discoverResult.matches) {\n        let { notFoundMatches, error, route } = handleNavigational404(\n          location.pathname\n        );\n        return {\n          matches: notFoundMatches,\n          pendingActionResult: [\n            route.id,\n            {\n              type: ResultType.error,\n              error,\n            },\n          ],\n        };\n      } else {\n        matches = discoverResult.matches;\n      }\n    }\n\n    // Call our action and get the result\n    let result: DataResult;\n    let actionMatch = getTargetMatch(matches, location);\n\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      result = {\n        type: ResultType.error,\n        error: getInternalRouterError(405, {\n          method: request.method,\n          pathname: location.pathname,\n          routeId: actionMatch.route.id,\n        }),\n      };\n    } else {\n      let results = await callDataStrategy(\n        \"action\",\n        state,\n        request,\n        [actionMatch],\n        matches,\n        null\n      );\n      result = results[actionMatch.route.id];\n\n      if (request.signal.aborted) {\n        return { shortCircuited: true };\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      let replace: boolean;\n      if (opts && opts.replace != null) {\n        replace = opts.replace;\n      } else {\n        // If the user didn't explicity indicate replace behavior, replace if\n        // we redirected to the exact same location we're currently at to avoid\n        // double back-buttons\n        let location = normalizeRedirectLocation(\n          result.response.headers.get(\"Location\")!,\n          new URL(request.url),\n          basename\n        );\n        replace = location === state.location.pathname + state.location.search;\n      }\n      await startRedirectNavigation(request, result, true, {\n        submission,\n        replace,\n      });\n      return { shortCircuited: true };\n    }\n\n    if (isDeferredResult(result)) {\n      throw getInternalRouterError(400, { type: \"defer-action\" });\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n\n      // By default, all submissions to the current location are REPLACE\n      // navigations, but if the action threw an error that'll be rendered in\n      // an errorElement, we fall back to PUSH so that the user can use the\n      // back button to get back to the pre-submission form location to try\n      // again\n      if ((opts && opts.replace) !== true) {\n        pendingAction = HistoryAction.Push;\n      }\n\n      return {\n        matches,\n        pendingActionResult: [boundaryMatch.route.id, result],\n      };\n    }\n\n    return {\n      matches,\n      pendingActionResult: [actionMatch.route.id, result],\n    };\n  }\n\n  // Call all applicable loaders for the given matches, handling redirects,\n  // errors, etc.\n  async function handleLoaders(\n    request: Request,\n    location: Location,\n    matches: AgnosticDataRouteMatch[],\n    isFogOfWar: boolean,\n    overrideNavigation?: Navigation,\n    submission?: Submission,\n    fetcherSubmission?: Submission,\n    replace?: boolean,\n    initialHydration?: boolean,\n    flushSync?: boolean,\n    pendingActionResult?: PendingActionResult\n  ): Promise<HandleLoadersResult> {\n    // Figure out the right navigation we want to use for data loading\n    let loadingNavigation =\n      overrideNavigation || getLoadingNavigation(location, submission);\n\n    // If this was a redirect from an action we don't have a \"submission\" but\n    // we have it on the loading navigation so use that if available\n    let activeSubmission =\n      submission ||\n      fetcherSubmission ||\n      getSubmissionFromNavigation(loadingNavigation);\n\n    // If this is an uninterrupted revalidation, we remain in our current idle\n    // state.  If not, we need to switch to our loading state and load data,\n    // preserving any new action data or existing action data (in the case of\n    // a revalidation interrupting an actionReload)\n    // If we have partialHydration enabled, then don't update the state for the\n    // initial data load since it's not a \"navigation\"\n    let shouldUpdateNavigationState =\n      !isUninterruptedRevalidation &&\n      (!future.v7_partialHydration || !initialHydration);\n\n    // When fog of war is enabled, we enter our `loading` state earlier so we\n    // can discover new routes during the `loading` state.  We skip this if\n    // we've already run actions since we would have done our matching already.\n    // If the children() function threw then, we want to proceed with the\n    // partial matches it discovered.\n    if (isFogOfWar) {\n      if (shouldUpdateNavigationState) {\n        let actionData = getUpdatedActionData(pendingActionResult);\n        updateState(\n          {\n            navigation: loadingNavigation,\n            ...(actionData !== undefined ? { actionData } : {}),\n          },\n          {\n            flushSync,\n          }\n        );\n      }\n\n      let discoverResult = await discoverRoutes(\n        matches,\n        location.pathname,\n        request.signal\n      );\n\n      if (discoverResult.type === \"aborted\") {\n        return { shortCircuited: true };\n      } else if (discoverResult.type === \"error\") {\n        let { boundaryId, error } = handleDiscoverRouteError(\n          location.pathname,\n          discoverResult\n        );\n        return {\n          matches: discoverResult.partialMatches,\n          loaderData: {},\n          errors: {\n            [boundaryId]: error,\n          },\n        };\n      } else if (!discoverResult.matches) {\n        let { error, notFoundMatches, route } = handleNavigational404(\n          location.pathname\n        );\n        return {\n          matches: notFoundMatches,\n          loaderData: {},\n          errors: {\n            [route.id]: error,\n          },\n        };\n      } else {\n        matches = discoverResult.matches;\n      }\n    }\n\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(\n      init.history,\n      state,\n      matches,\n      activeSubmission,\n      location,\n      future.v7_partialHydration && initialHydration === true,\n      future.v7_skipActionErrorRevalidation,\n      isRevalidationRequired,\n      cancelledDeferredRoutes,\n      cancelledFetcherLoads,\n      deletedFetchers,\n      fetchLoadMatches,\n      fetchRedirectIds,\n      routesToUse,\n      basename,\n      pendingActionResult\n    );\n\n    // Cancel pending deferreds for no-longer-matched routes or routes we're\n    // about to reload.  Note that if this is an action reload we would have\n    // already cancelled all pending deferreds so this would be a no-op\n    cancelActiveDeferreds(\n      (routeId) =>\n        !(matches && matches.some((m) => m.route.id === routeId)) ||\n        (matchesToLoad && matchesToLoad.some((m) => m.route.id === routeId))\n    );\n\n    pendingNavigationLoadId = ++incrementingLoadId;\n\n    // Short circuit if we have no loaders to run\n    if (matchesToLoad.length === 0 && revalidatingFetchers.length === 0) {\n      let updatedFetchers = markFetchRedirectsDone();\n      completeNavigation(\n        location,\n        {\n          matches,\n          loaderData: {},\n          // Commit pending error if we're short circuiting\n          errors:\n            pendingActionResult && isErrorResult(pendingActionResult[1])\n              ? { [pendingActionResult[0]]: pendingActionResult[1].error }\n              : null,\n          ...getActionDataForCommit(pendingActionResult),\n          ...(updatedFetchers ? { fetchers: new Map(state.fetchers) } : {}),\n        },\n        { flushSync }\n      );\n      return { shortCircuited: true };\n    }\n\n    if (shouldUpdateNavigationState) {\n      let updates: Partial<RouterState> = {};\n      if (!isFogOfWar) {\n        // Only update navigation/actionNData if we didn't already do it above\n        updates.navigation = loadingNavigation;\n        let actionData = getUpdatedActionData(pendingActionResult);\n        if (actionData !== undefined) {\n          updates.actionData = actionData;\n        }\n      }\n      if (revalidatingFetchers.length > 0) {\n        updates.fetchers = getUpdatedRevalidatingFetchers(revalidatingFetchers);\n      }\n      updateState(updates, { flushSync });\n    }\n\n    revalidatingFetchers.forEach((rf) => {\n      if (fetchControllers.has(rf.key)) {\n        abortFetcher(rf.key);\n      }\n      if (rf.controller) {\n        // Fetchers use an independent AbortController so that aborting a fetcher\n        // (via deleteFetcher) does not abort the triggering navigation that\n        // triggered the revalidation\n        fetchControllers.set(rf.key, rf.controller);\n      }\n    });\n\n    // Proxy navigation abort through to revalidation fetchers\n    let abortPendingFetchRevalidations = () =>\n      revalidatingFetchers.forEach((f) => abortFetcher(f.key));\n    if (pendingNavigationController) {\n      pendingNavigationController.signal.addEventListener(\n        \"abort\",\n        abortPendingFetchRevalidations\n      );\n    }\n\n    let { loaderResults, fetcherResults } =\n      await callLoadersAndMaybeResolveData(\n        state,\n        matches,\n        matchesToLoad,\n        revalidatingFetchers,\n        request\n      );\n\n    if (request.signal.aborted) {\n      return { shortCircuited: true };\n    }\n\n    // Clean up _after_ loaders have completed.  Don't clean up if we short\n    // circuited because fetchControllers would have been aborted and\n    // reassigned to new controllers for the next navigation\n    if (pendingNavigationController) {\n      pendingNavigationController.signal.removeEventListener(\n        \"abort\",\n        abortPendingFetchRevalidations\n      );\n    }\n    revalidatingFetchers.forEach((rf) => fetchControllers.delete(rf.key));\n\n    // If any loaders returned a redirect Response, start a new REPLACE navigation\n    let redirect = findRedirect(loaderResults);\n    if (redirect) {\n      await startRedirectNavigation(request, redirect.result, true, {\n        replace,\n      });\n      return { shortCircuited: true };\n    }\n\n    redirect = findRedirect(fetcherResults);\n    if (redirect) {\n      // If this redirect came from a fetcher make sure we mark it in\n      // fetchRedirectIds so it doesn't get revalidated on the next set of\n      // loader executions\n      fetchRedirectIds.add(redirect.key);\n      await startRedirectNavigation(request, redirect.result, true, {\n        replace,\n      });\n      return { shortCircuited: true };\n    }\n\n    // Process and commit output from loaders\n    let { loaderData, errors } = processLoaderData(\n      state,\n      matches,\n      matchesToLoad,\n      loaderResults,\n      pendingActionResult,\n      revalidatingFetchers,\n      fetcherResults,\n      activeDeferreds\n    );\n\n    // Wire up subscribers to update loaderData as promises settle\n    activeDeferreds.forEach((deferredData, routeId) => {\n      deferredData.subscribe((aborted) => {\n        // Note: No need to updateState here since the TrackedPromise on\n        // loaderData is stable across resolve/reject\n        // Remove this instance if we were aborted or if promises have settled\n        if (aborted || deferredData.done) {\n          activeDeferreds.delete(routeId);\n        }\n      });\n    });\n\n    // During partial hydration, preserve SSR errors for routes that don't re-run\n    if (future.v7_partialHydration && initialHydration && state.errors) {\n      Object.entries(state.errors)\n        .filter(([id]) => !matchesToLoad.some((m) => m.route.id === id))\n        .forEach(([routeId, error]) => {\n          errors = Object.assign(errors || {}, { [routeId]: error });\n        });\n    }\n\n    let updatedFetchers = markFetchRedirectsDone();\n    let didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);\n    let shouldUpdateFetchers =\n      updatedFetchers || didAbortFetchLoads || revalidatingFetchers.length > 0;\n\n    return {\n      matches,\n      loaderData,\n      errors,\n      ...(shouldUpdateFetchers ? { fetchers: new Map(state.fetchers) } : {}),\n    };\n  }\n\n  function getUpdatedActionData(\n    pendingActionResult: PendingActionResult | undefined\n  ): Record<string, RouteData> | null | undefined {\n    if (pendingActionResult && !isErrorResult(pendingActionResult[1])) {\n      // This is cast to `any` currently because `RouteData`uses any and it\n      // would be a breaking change to use any.\n      // TODO: v7 - change `RouteData` to use `unknown` instead of `any`\n      return {\n        [pendingActionResult[0]]: pendingActionResult[1].data as any,\n      };\n    } else if (state.actionData) {\n      if (Object.keys(state.actionData).length === 0) {\n        return null;\n      } else {\n        return state.actionData;\n      }\n    }\n  }\n\n  function getUpdatedRevalidatingFetchers(\n    revalidatingFetchers: RevalidatingFetcher[]\n  ) {\n    revalidatingFetchers.forEach((rf) => {\n      let fetcher = state.fetchers.get(rf.key);\n      let revalidatingFetcher = getLoadingFetcher(\n        undefined,\n        fetcher ? fetcher.data : undefined\n      );\n      state.fetchers.set(rf.key, revalidatingFetcher);\n    });\n    return new Map(state.fetchers);\n  }\n\n  // Trigger a fetcher load/submit for the given fetcher key\n  function fetch(\n    key: string,\n    routeId: string,\n    href: string | null,\n    opts?: RouterFetchOptions\n  ) {\n    if (isServer) {\n      throw new Error(\n        \"router.fetch() was called during the server render, but it shouldn't be. \" +\n          \"You are likely calling a useFetcher() method in the body of your component. \" +\n          \"Try moving it to a useEffect or a callback.\"\n      );\n    }\n\n    if (fetchControllers.has(key)) abortFetcher(key);\n    let flushSync = (opts && opts.unstable_flushSync) === true;\n\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let normalizedPath = normalizeTo(\n      state.location,\n      state.matches,\n      basename,\n      future.v7_prependBasename,\n      href,\n      future.v7_relativeSplatPath,\n      routeId,\n      opts?.relative\n    );\n    let matches = matchRoutes(routesToUse, normalizedPath, basename);\n\n    let fogOfWar = checkFogOfWar(matches, routesToUse, normalizedPath);\n    if (fogOfWar.active && fogOfWar.matches) {\n      matches = fogOfWar.matches;\n    }\n\n    if (!matches) {\n      setFetcherError(\n        key,\n        routeId,\n        getInternalRouterError(404, { pathname: normalizedPath }),\n        { flushSync }\n      );\n      return;\n    }\n\n    let { path, submission, error } = normalizeNavigateOptions(\n      future.v7_normalizeFormMethod,\n      true,\n      normalizedPath,\n      opts\n    );\n\n    if (error) {\n      setFetcherError(key, routeId, error, { flushSync });\n      return;\n    }\n\n    let match = getTargetMatch(matches, path);\n\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n\n    if (submission && isMutationMethod(submission.formMethod)) {\n      handleFetcherAction(\n        key,\n        routeId,\n        path,\n        match,\n        matches,\n        fogOfWar.active,\n        flushSync,\n        submission\n      );\n      return;\n    }\n\n    // Store off the match so we can call it's shouldRevalidate on subsequent\n    // revalidations\n    fetchLoadMatches.set(key, { routeId, path });\n    handleFetcherLoader(\n      key,\n      routeId,\n      path,\n      match,\n      matches,\n      fogOfWar.active,\n      flushSync,\n      submission\n    );\n  }\n\n  // Call the action for the matched fetcher.submit(), and then handle redirects,\n  // errors, and revalidation\n  async function handleFetcherAction(\n    key: string,\n    routeId: string,\n    path: string,\n    match: AgnosticDataRouteMatch,\n    requestMatches: AgnosticDataRouteMatch[],\n    isFogOfWar: boolean,\n    flushSync: boolean,\n    submission: Submission\n  ) {\n    interruptActiveLoads();\n    fetchLoadMatches.delete(key);\n\n    function detectAndHandle405Error(m: AgnosticDataRouteMatch) {\n      if (!m.route.action && !m.route.lazy) {\n        let error = getInternalRouterError(405, {\n          method: submission.formMethod,\n          pathname: path,\n          routeId: routeId,\n        });\n        setFetcherError(key, routeId, error, { flushSync });\n        return true;\n      }\n      return false;\n    }\n\n    if (!isFogOfWar && detectAndHandle405Error(match)) {\n      return;\n    }\n\n    // Put this fetcher into it's submitting state\n    let existingFetcher = state.fetchers.get(key);\n    updateFetcherState(key, getSubmittingFetcher(submission, existingFetcher), {\n      flushSync,\n    });\n\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(\n      init.history,\n      path,\n      abortController.signal,\n      submission\n    );\n\n    if (isFogOfWar) {\n      let discoverResult = await discoverRoutes(\n        requestMatches,\n        path,\n        fetchRequest.signal\n      );\n\n      if (discoverResult.type === \"aborted\") {\n        return;\n      } else if (discoverResult.type === \"error\") {\n        let { error } = handleDiscoverRouteError(path, discoverResult);\n        setFetcherError(key, routeId, error, { flushSync });\n        return;\n      } else if (!discoverResult.matches) {\n        setFetcherError(\n          key,\n          routeId,\n          getInternalRouterError(404, { pathname: path }),\n          { flushSync }\n        );\n        return;\n      } else {\n        requestMatches = discoverResult.matches;\n        match = getTargetMatch(requestMatches, path);\n\n        if (detectAndHandle405Error(match)) {\n          return;\n        }\n      }\n    }\n\n    // Call the action for the fetcher\n    fetchControllers.set(key, abortController);\n\n    let originatingLoadId = incrementingLoadId;\n    let actionResults = await callDataStrategy(\n      \"action\",\n      state,\n      fetchRequest,\n      [match],\n      requestMatches,\n      key\n    );\n    let actionResult = actionResults[match.route.id];\n\n    if (fetchRequest.signal.aborted) {\n      // We can delete this so long as we weren't aborted by our own fetcher\n      // re-submit which would have put _new_ controller is in fetchControllers\n      if (fetchControllers.get(key) === abortController) {\n        fetchControllers.delete(key);\n      }\n      return;\n    }\n\n    // When using v7_fetcherPersist, we don't want errors bubbling up to the UI\n    // or redirects processed for unmounted fetchers so we just revert them to\n    // idle\n    if (future.v7_fetcherPersist && deletedFetchers.has(key)) {\n      if (isRedirectResult(actionResult) || isErrorResult(actionResult)) {\n        updateFetcherState(key, getDoneFetcher(undefined));\n        return;\n      }\n      // Let SuccessResult's fall through for revalidation\n    } else {\n      if (isRedirectResult(actionResult)) {\n        fetchControllers.delete(key);\n        if (pendingNavigationLoadId > originatingLoadId) {\n          // A new navigation was kicked off after our action started, so that\n          // should take precedence over this redirect navigation.  We already\n          // set isRevalidationRequired so all loaders for the new route should\n          // fire unless opted out via shouldRevalidate\n          updateFetcherState(key, getDoneFetcher(undefined));\n          return;\n        } else {\n          fetchRedirectIds.add(key);\n          updateFetcherState(key, getLoadingFetcher(submission));\n          return startRedirectNavigation(fetchRequest, actionResult, false, {\n            fetcherSubmission: submission,\n          });\n        }\n      }\n\n      // Process any non-redirect errors thrown\n      if (isErrorResult(actionResult)) {\n        setFetcherError(key, routeId, actionResult.error);\n        return;\n      }\n    }\n\n    if (isDeferredResult(actionResult)) {\n      throw getInternalRouterError(400, { type: \"defer-action\" });\n    }\n\n    // Start the data load for current matches, or the next location if we're\n    // in the middle of a navigation\n    let nextLocation = state.navigation.location || state.location;\n    let revalidationRequest = createClientSideRequest(\n      init.history,\n      nextLocation,\n      abortController.signal\n    );\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let matches =\n      state.navigation.state !== \"idle\"\n        ? matchRoutes(routesToUse, state.navigation.location, basename)\n        : state.matches;\n\n    invariant(matches, \"Didn't find any matches after fetcher action\");\n\n    let loadId = ++incrementingLoadId;\n    fetchReloadIds.set(key, loadId);\n\n    let loadFetcher = getLoadingFetcher(submission, actionResult.data);\n    state.fetchers.set(key, loadFetcher);\n\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(\n      init.history,\n      state,\n      matches,\n      submission,\n      nextLocation,\n      false,\n      future.v7_skipActionErrorRevalidation,\n      isRevalidationRequired,\n      cancelledDeferredRoutes,\n      cancelledFetcherLoads,\n      deletedFetchers,\n      fetchLoadMatches,\n      fetchRedirectIds,\n      routesToUse,\n      basename,\n      [match.route.id, actionResult]\n    );\n\n    // Put all revalidating fetchers into the loading state, except for the\n    // current fetcher which we want to keep in it's current loading state which\n    // contains it's action submission info + action data\n    revalidatingFetchers\n      .filter((rf) => rf.key !== key)\n      .forEach((rf) => {\n        let staleKey = rf.key;\n        let existingFetcher = state.fetchers.get(staleKey);\n        let revalidatingFetcher = getLoadingFetcher(\n          undefined,\n          existingFetcher ? existingFetcher.data : undefined\n        );\n        state.fetchers.set(staleKey, revalidatingFetcher);\n        if (fetchControllers.has(staleKey)) {\n          abortFetcher(staleKey);\n        }\n        if (rf.controller) {\n          fetchControllers.set(staleKey, rf.controller);\n        }\n      });\n\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    let abortPendingFetchRevalidations = () =>\n      revalidatingFetchers.forEach((rf) => abortFetcher(rf.key));\n\n    abortController.signal.addEventListener(\n      \"abort\",\n      abortPendingFetchRevalidations\n    );\n\n    let { loaderResults, fetcherResults } =\n      await callLoadersAndMaybeResolveData(\n        state,\n        matches,\n        matchesToLoad,\n        revalidatingFetchers,\n        revalidationRequest\n      );\n\n    if (abortController.signal.aborted) {\n      return;\n    }\n\n    abortController.signal.removeEventListener(\n      \"abort\",\n      abortPendingFetchRevalidations\n    );\n\n    fetchReloadIds.delete(key);\n    fetchControllers.delete(key);\n    revalidatingFetchers.forEach((r) => fetchControllers.delete(r.key));\n\n    let redirect = findRedirect(loaderResults);\n    if (redirect) {\n      return startRedirectNavigation(\n        revalidationRequest,\n        redirect.result,\n        false\n      );\n    }\n\n    redirect = findRedirect(fetcherResults);\n    if (redirect) {\n      // If this redirect came from a fetcher make sure we mark it in\n      // fetchRedirectIds so it doesn't get revalidated on the next set of\n      // loader executions\n      fetchRedirectIds.add(redirect.key);\n      return startRedirectNavigation(\n        revalidationRequest,\n        redirect.result,\n        false\n      );\n    }\n\n    // Process and commit output from loaders\n    let { loaderData, errors } = processLoaderData(\n      state,\n      matches,\n      matchesToLoad,\n      loaderResults,\n      undefined,\n      revalidatingFetchers,\n      fetcherResults,\n      activeDeferreds\n    );\n\n    // Since we let revalidations complete even if the submitting fetcher was\n    // deleted, only put it back to idle if it hasn't been deleted\n    if (state.fetchers.has(key)) {\n      let doneFetcher = getDoneFetcher(actionResult.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n\n    abortStaleFetchLoads(loadId);\n\n    // If we are currently in a navigation loading state and this fetcher is\n    // more recent than the navigation, we want the newer data so abort the\n    // navigation and complete it with the fetcher data\n    if (\n      state.navigation.state === \"loading\" &&\n      loadId > pendingNavigationLoadId\n    ) {\n      invariant(pendingAction, \"Expected pending action\");\n      pendingNavigationController && pendingNavigationController.abort();\n\n      completeNavigation(state.navigation.location, {\n        matches,\n        loaderData,\n        errors,\n        fetchers: new Map(state.fetchers),\n      });\n    } else {\n      // otherwise just update with the fetcher data, preserving any existing\n      // loaderData for loaders that did not need to reload.  We have to\n      // manually merge here since we aren't going through completeNavigation\n      updateState({\n        errors,\n        loaderData: mergeLoaderData(\n          state.loaderData,\n          loaderData,\n          matches,\n          errors\n        ),\n        fetchers: new Map(state.fetchers),\n      });\n      isRevalidationRequired = false;\n    }\n  }\n\n  // Call the matched loader for fetcher.load(), handling redirects, errors, etc.\n  async function handleFetcherLoader(\n    key: string,\n    routeId: string,\n    path: string,\n    match: AgnosticDataRouteMatch,\n    matches: AgnosticDataRouteMatch[],\n    isFogOfWar: boolean,\n    flushSync: boolean,\n    submission?: Submission\n  ) {\n    let existingFetcher = state.fetchers.get(key);\n    updateFetcherState(\n      key,\n      getLoadingFetcher(\n        submission,\n        existingFetcher ? existingFetcher.data : undefined\n      ),\n      { flushSync }\n    );\n\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(\n      init.history,\n      path,\n      abortController.signal\n    );\n\n    if (isFogOfWar) {\n      let discoverResult = await discoverRoutes(\n        matches,\n        path,\n        fetchRequest.signal\n      );\n\n      if (discoverResult.type === \"aborted\") {\n        return;\n      } else if (discoverResult.type === \"error\") {\n        let { error } = handleDiscoverRouteError(path, discoverResult);\n        setFetcherError(key, routeId, error, { flushSync });\n        return;\n      } else if (!discoverResult.matches) {\n        setFetcherError(\n          key,\n          routeId,\n          getInternalRouterError(404, { pathname: path }),\n          { flushSync }\n        );\n        return;\n      } else {\n        matches = discoverResult.matches;\n        match = getTargetMatch(matches, path);\n      }\n    }\n\n    // Call the loader for this fetcher route match\n    fetchControllers.set(key, abortController);\n\n    let originatingLoadId = incrementingLoadId;\n    let results = await callDataStrategy(\n      \"loader\",\n      state,\n      fetchRequest,\n      [match],\n      matches,\n      key\n    );\n    let result = results[match.route.id];\n\n    // Deferred isn't supported for fetcher loads, await everything and treat it\n    // as a normal load.  resolveDeferredData will return undefined if this\n    // fetcher gets aborted, so we just leave result untouched and short circuit\n    // below if that happens\n    if (isDeferredResult(result)) {\n      result =\n        (await resolveDeferredData(result, fetchRequest.signal, true)) ||\n        result;\n    }\n\n    // We can delete this so long as we weren't aborted by our our own fetcher\n    // re-load which would have put _new_ controller is in fetchControllers\n    if (fetchControllers.get(key) === abortController) {\n      fetchControllers.delete(key);\n    }\n\n    if (fetchRequest.signal.aborted) {\n      return;\n    }\n\n    // We don't want errors bubbling up or redirects followed for unmounted\n    // fetchers, so short circuit here if it was removed from the UI\n    if (deletedFetchers.has(key)) {\n      updateFetcherState(key, getDoneFetcher(undefined));\n      return;\n    }\n\n    // If the loader threw a redirect Response, start a new REPLACE navigation\n    if (isRedirectResult(result)) {\n      if (pendingNavigationLoadId > originatingLoadId) {\n        // A new navigation was kicked off after our loader started, so that\n        // should take precedence over this redirect navigation\n        updateFetcherState(key, getDoneFetcher(undefined));\n        return;\n      } else {\n        fetchRedirectIds.add(key);\n        await startRedirectNavigation(fetchRequest, result, false);\n        return;\n      }\n    }\n\n    // Process any non-redirect errors thrown\n    if (isErrorResult(result)) {\n      setFetcherError(key, routeId, result.error);\n      return;\n    }\n\n    invariant(!isDeferredResult(result), \"Unhandled fetcher deferred data\");\n\n    // Put the fetcher back into an idle state\n    updateFetcherState(key, getDoneFetcher(result.data));\n  }\n\n  /**\n   * Utility function to handle redirects returned from an action or loader.\n   * Normally, a redirect \"replaces\" the navigation that triggered it.  So, for\n   * example:\n   *\n   *  - user is on /a\n   *  - user clicks a link to /b\n   *  - loader for /b redirects to /c\n   *\n   * In a non-JS app the browser would track the in-flight navigation to /b and\n   * then replace it with /c when it encountered the redirect response.  In\n   * the end it would only ever update the URL bar with /c.\n   *\n   * In client-side routing using pushState/replaceState, we aim to emulate\n   * this behavior and we also do not update history until the end of the\n   * navigation (including processed redirects).  This means that we never\n   * actually touch history until we've processed redirects, so we just use\n   * the history action from the original navigation (PUSH or REPLACE).\n   */\n  async function startRedirectNavigation(\n    request: Request,\n    redirect: RedirectResult,\n    isNavigation: boolean,\n    {\n      submission,\n      fetcherSubmission,\n      replace,\n    }: {\n      submission?: Submission;\n      fetcherSubmission?: Submission;\n      replace?: boolean;\n    } = {}\n  ) {\n    if (redirect.response.headers.has(\"X-Remix-Revalidate\")) {\n      isRevalidationRequired = true;\n    }\n\n    let location = redirect.response.headers.get(\"Location\");\n    invariant(location, \"Expected a Location header on the redirect Response\");\n    location = normalizeRedirectLocation(\n      location,\n      new URL(request.url),\n      basename\n    );\n    let redirectLocation = createLocation(state.location, location, {\n      _isRedirect: true,\n    });\n\n    if (isBrowser) {\n      let isDocumentReload = false;\n\n      if (redirect.response.headers.has(\"X-Remix-Reload-Document\")) {\n        // Hard reload if the response contained X-Remix-Reload-Document\n        isDocumentReload = true;\n      } else if (ABSOLUTE_URL_REGEX.test(location)) {\n        const url = init.history.createURL(location);\n        isDocumentReload =\n          // Hard reload if it's an absolute URL to a new origin\n          url.origin !== routerWindow.location.origin ||\n          // Hard reload if it's an absolute URL that does not match our basename\n          stripBasename(url.pathname, basename) == null;\n      }\n\n      if (isDocumentReload) {\n        if (replace) {\n          routerWindow.location.replace(location);\n        } else {\n          routerWindow.location.assign(location);\n        }\n        return;\n      }\n    }\n\n    // There's no need to abort on redirects, since we don't detect the\n    // redirect until the action/loaders have settled\n    pendingNavigationController = null;\n\n    let redirectHistoryAction =\n      replace === true || redirect.response.headers.has(\"X-Remix-Replace\")\n        ? HistoryAction.Replace\n        : HistoryAction.Push;\n\n    // Use the incoming submission if provided, fallback on the active one in\n    // state.navigation\n    let { formMethod, formAction, formEncType } = state.navigation;\n    if (\n      !submission &&\n      !fetcherSubmission &&\n      formMethod &&\n      formAction &&\n      formEncType\n    ) {\n      submission = getSubmissionFromNavigation(state.navigation);\n    }\n\n    // If this was a 307/308 submission we want to preserve the HTTP method and\n    // re-submit the GET/POST/PUT/PATCH/DELETE as a submission navigation to the\n    // redirected location\n    let activeSubmission = submission || fetcherSubmission;\n    if (\n      redirectPreserveMethodStatusCodes.has(redirect.response.status) &&\n      activeSubmission &&\n      isMutationMethod(activeSubmission.formMethod)\n    ) {\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        submission: {\n          ...activeSubmission,\n          formAction: location,\n        },\n        // Preserve these flags across redirects\n        preventScrollReset: pendingPreventScrollReset,\n        enableViewTransition: isNavigation\n          ? pendingViewTransitionEnabled\n          : undefined,\n      });\n    } else {\n      // If we have a navigation submission, we will preserve it through the\n      // redirect navigation\n      let overrideNavigation = getLoadingNavigation(\n        redirectLocation,\n        submission\n      );\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        overrideNavigation,\n        // Send fetcher submissions through for shouldRevalidate\n        fetcherSubmission,\n        // Preserve these flags across redirects\n        preventScrollReset: pendingPreventScrollReset,\n        enableViewTransition: isNavigation\n          ? pendingViewTransitionEnabled\n          : undefined,\n      });\n    }\n  }\n\n  // Utility wrapper for calling dataStrategy client-side without having to\n  // pass around the manifest, mapRouteProperties, etc.\n  async function callDataStrategy(\n    type: \"loader\" | \"action\",\n    state: RouterState,\n    request: Request,\n    matchesToLoad: AgnosticDataRouteMatch[],\n    matches: AgnosticDataRouteMatch[],\n    fetcherKey: string | null\n  ): Promise<Record<string, DataResult>> {\n    let results: Record<string, DataStrategyResult>;\n    let dataResults: Record<string, DataResult> = {};\n    try {\n      results = await callDataStrategyImpl(\n        dataStrategyImpl,\n        type,\n        state,\n        request,\n        matchesToLoad,\n        matches,\n        fetcherKey,\n        manifest,\n        mapRouteProperties\n      );\n    } catch (e) {\n      // If the outer dataStrategy method throws, just return the error for all\n      // matches - and it'll naturally bubble to the root\n      matchesToLoad.forEach((m) => {\n        dataResults[m.route.id] = {\n          type: ResultType.error,\n          error: e,\n        };\n      });\n      return dataResults;\n    }\n\n    for (let [routeId, result] of Object.entries(results)) {\n      if (isRedirectDataStrategyResultResult(result)) {\n        let response = result.result as Response;\n        dataResults[routeId] = {\n          type: ResultType.redirect,\n          response: normalizeRelativeRoutingRedirectResponse(\n            response,\n            request,\n            routeId,\n            matches,\n            basename,\n            future.v7_relativeSplatPath\n          ),\n        };\n      } else {\n        dataResults[routeId] = await convertDataStrategyResultToDataResult(\n          result\n        );\n      }\n    }\n\n    return dataResults;\n  }\n\n  async function callLoadersAndMaybeResolveData(\n    state: RouterState,\n    matches: AgnosticDataRouteMatch[],\n    matchesToLoad: AgnosticDataRouteMatch[],\n    fetchersToLoad: RevalidatingFetcher[],\n    request: Request\n  ) {\n    let currentMatches = state.matches;\n\n    // Kick off loaders and fetchers in parallel\n    let loaderResultsPromise = callDataStrategy(\n      \"loader\",\n      state,\n      request,\n      matchesToLoad,\n      matches,\n      null\n    );\n\n    let fetcherResultsPromise = Promise.all(\n      fetchersToLoad.map(async (f) => {\n        if (f.matches && f.match && f.controller) {\n          let results = await callDataStrategy(\n            \"loader\",\n            state,\n            createClientSideRequest(init.history, f.path, f.controller.signal),\n            [f.match],\n            f.matches,\n            f.key\n          );\n          let result = results[f.match.route.id];\n          // Fetcher results are keyed by fetcher key from here on out, not routeId\n          return { [f.key]: result };\n        } else {\n          return Promise.resolve({\n            [f.key]: {\n              type: ResultType.error,\n              error: getInternalRouterError(404, {\n                pathname: f.path,\n              }),\n            } as ErrorResult,\n          });\n        }\n      })\n    );\n\n    let loaderResults = await loaderResultsPromise;\n    let fetcherResults = (await fetcherResultsPromise).reduce(\n      (acc, r) => Object.assign(acc, r),\n      {}\n    );\n\n    await Promise.all([\n      resolveNavigationDeferredResults(\n        matches,\n        loaderResults,\n        request.signal,\n        currentMatches,\n        state.loaderData\n      ),\n      resolveFetcherDeferredResults(matches, fetcherResults, fetchersToLoad),\n    ]);\n\n    return {\n      loaderResults,\n      fetcherResults,\n    };\n  }\n\n  function interruptActiveLoads() {\n    // Every interruption triggers a revalidation\n    isRevalidationRequired = true;\n\n    // Cancel pending route-level deferreds and mark cancelled routes for\n    // revalidation\n    cancelledDeferredRoutes.push(...cancelActiveDeferreds());\n\n    // Abort in-flight fetcher loads\n    fetchLoadMatches.forEach((_, key) => {\n      if (fetchControllers.has(key)) {\n        cancelledFetcherLoads.add(key);\n        abortFetcher(key);\n      }\n    });\n  }\n\n  function updateFetcherState(\n    key: string,\n    fetcher: Fetcher,\n    opts: { flushSync?: boolean } = {}\n  ) {\n    state.fetchers.set(key, fetcher);\n    updateState(\n      { fetchers: new Map(state.fetchers) },\n      { flushSync: (opts && opts.flushSync) === true }\n    );\n  }\n\n  function setFetcherError(\n    key: string,\n    routeId: string,\n    error: any,\n    opts: { flushSync?: boolean } = {}\n  ) {\n    let boundaryMatch = findNearestBoundary(state.matches, routeId);\n    deleteFetcher(key);\n    updateState(\n      {\n        errors: {\n          [boundaryMatch.route.id]: error,\n        },\n        fetchers: new Map(state.fetchers),\n      },\n      { flushSync: (opts && opts.flushSync) === true }\n    );\n  }\n\n  function getFetcher<TData = any>(key: string): Fetcher<TData> {\n    if (future.v7_fetcherPersist) {\n      activeFetchers.set(key, (activeFetchers.get(key) || 0) + 1);\n      // If this fetcher was previously marked for deletion, unmark it since we\n      // have a new instance\n      if (deletedFetchers.has(key)) {\n        deletedFetchers.delete(key);\n      }\n    }\n    return state.fetchers.get(key) || IDLE_FETCHER;\n  }\n\n  function deleteFetcher(key: string): void {\n    let fetcher = state.fetchers.get(key);\n    // Don't abort the controller if this is a deletion of a fetcher.submit()\n    // in it's loading phase since - we don't want to abort the corresponding\n    // revalidation and want them to complete and land\n    if (\n      fetchControllers.has(key) &&\n      !(fetcher && fetcher.state === \"loading\" && fetchReloadIds.has(key))\n    ) {\n      abortFetcher(key);\n    }\n    fetchLoadMatches.delete(key);\n    fetchReloadIds.delete(key);\n    fetchRedirectIds.delete(key);\n    deletedFetchers.delete(key);\n    cancelledFetcherLoads.delete(key);\n    state.fetchers.delete(key);\n  }\n\n  function deleteFetcherAndUpdateState(key: string): void {\n    if (future.v7_fetcherPersist) {\n      let count = (activeFetchers.get(key) || 0) - 1;\n      if (count <= 0) {\n        activeFetchers.delete(key);\n        deletedFetchers.add(key);\n      } else {\n        activeFetchers.set(key, count);\n      }\n    } else {\n      deleteFetcher(key);\n    }\n    updateState({ fetchers: new Map(state.fetchers) });\n  }\n\n  function abortFetcher(key: string) {\n    let controller = fetchControllers.get(key);\n    invariant(controller, `Expected fetch controller: ${key}`);\n    controller.abort();\n    fetchControllers.delete(key);\n  }\n\n  function markFetchersDone(keys: string[]) {\n    for (let key of keys) {\n      let fetcher = getFetcher(key);\n      let doneFetcher = getDoneFetcher(fetcher.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  function markFetchRedirectsDone(): boolean {\n    let doneKeys = [];\n    let updatedFetchers = false;\n    for (let key of fetchRedirectIds) {\n      let fetcher = state.fetchers.get(key);\n      invariant(fetcher, `Expected fetcher: ${key}`);\n      if (fetcher.state === \"loading\") {\n        fetchRedirectIds.delete(key);\n        doneKeys.push(key);\n        updatedFetchers = true;\n      }\n    }\n    markFetchersDone(doneKeys);\n    return updatedFetchers;\n  }\n\n  function abortStaleFetchLoads(landedId: number): boolean {\n    let yeetedKeys = [];\n    for (let [key, id] of fetchReloadIds) {\n      if (id < landedId) {\n        let fetcher = state.fetchers.get(key);\n        invariant(fetcher, `Expected fetcher: ${key}`);\n        if (fetcher.state === \"loading\") {\n          abortFetcher(key);\n          fetchReloadIds.delete(key);\n          yeetedKeys.push(key);\n        }\n      }\n    }\n    markFetchersDone(yeetedKeys);\n    return yeetedKeys.length > 0;\n  }\n\n  function getBlocker(key: string, fn: BlockerFunction) {\n    let blocker: Blocker = state.blockers.get(key) || IDLE_BLOCKER;\n\n    if (blockerFunctions.get(key) !== fn) {\n      blockerFunctions.set(key, fn);\n    }\n\n    return blocker;\n  }\n\n  function deleteBlocker(key: string) {\n    state.blockers.delete(key);\n    blockerFunctions.delete(key);\n  }\n\n  // Utility function to update blockers, ensuring valid state transitions\n  function updateBlocker(key: string, newBlocker: Blocker) {\n    let blocker = state.blockers.get(key) || IDLE_BLOCKER;\n\n    // Poor mans state machine :)\n    // https://mermaid.live/edit#pako:eNqVkc9OwzAMxl8l8nnjAYrEtDIOHEBIgwvKJTReGy3_lDpIqO27k6awMG0XcrLlnz87nwdonESogKXXBuE79rq75XZO3-yHds0RJVuv70YrPlUrCEe2HfrORS3rubqZfuhtpg5C9wk5tZ4VKcRUq88q9Z8RS0-48cE1iHJkL0ugbHuFLus9L6spZy8nX9MP2CNdomVaposqu3fGayT8T8-jJQwhepo_UtpgBQaDEUom04dZhAN1aJBDlUKJBxE1ceB2Smj0Mln-IBW5AFU2dwUiktt_2Qaq2dBfaKdEup85UV7Yd-dKjlnkabl2Pvr0DTkTreM\n    invariant(\n      (blocker.state === \"unblocked\" && newBlocker.state === \"blocked\") ||\n        (blocker.state === \"blocked\" && newBlocker.state === \"blocked\") ||\n        (blocker.state === \"blocked\" && newBlocker.state === \"proceeding\") ||\n        (blocker.state === \"blocked\" && newBlocker.state === \"unblocked\") ||\n        (blocker.state === \"proceeding\" && newBlocker.state === \"unblocked\"),\n      `Invalid blocker state transition: ${blocker.state} -> ${newBlocker.state}`\n    );\n\n    let blockers = new Map(state.blockers);\n    blockers.set(key, newBlocker);\n    updateState({ blockers });\n  }\n\n  function shouldBlockNavigation({\n    currentLocation,\n    nextLocation,\n    historyAction,\n  }: {\n    currentLocation: Location;\n    nextLocation: Location;\n    historyAction: HistoryAction;\n  }): string | undefined {\n    if (blockerFunctions.size === 0) {\n      return;\n    }\n\n    // We ony support a single active blocker at the moment since we don't have\n    // any compelling use cases for multi-blocker yet\n    if (blockerFunctions.size > 1) {\n      warning(false, \"A router only supports one blocker at a time\");\n    }\n\n    let entries = Array.from(blockerFunctions.entries());\n    let [blockerKey, blockerFunction] = entries[entries.length - 1];\n    let blocker = state.blockers.get(blockerKey);\n\n    if (blocker && blocker.state === \"proceeding\") {\n      // If the blocker is currently proceeding, we don't need to re-check\n      // it and can let this navigation continue\n      return;\n    }\n\n    // At this point, we know we're unblocked/blocked so we need to check the\n    // user-provided blocker function\n    if (blockerFunction({ currentLocation, nextLocation, historyAction })) {\n      return blockerKey;\n    }\n  }\n\n  function handleNavigational404(pathname: string) {\n    let error = getInternalRouterError(404, { pathname });\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let { matches, route } = getShortCircuitMatches(routesToUse);\n\n    // Cancel all pending deferred on 404s since we don't keep any routes\n    cancelActiveDeferreds();\n\n    return { notFoundMatches: matches, route, error };\n  }\n\n  function handleDiscoverRouteError(\n    pathname: string,\n    discoverResult: DiscoverRoutesErrorResult\n  ) {\n    return {\n      boundaryId: findNearestBoundary(discoverResult.partialMatches).route.id,\n      error: getInternalRouterError(400, {\n        type: \"route-discovery\",\n        pathname,\n        message:\n          discoverResult.error != null && \"message\" in discoverResult.error\n            ? discoverResult.error\n            : String(discoverResult.error),\n      }),\n    };\n  }\n\n  function cancelActiveDeferreds(\n    predicate?: (routeId: string) => boolean\n  ): string[] {\n    let cancelledRouteIds: string[] = [];\n    activeDeferreds.forEach((dfd, routeId) => {\n      if (!predicate || predicate(routeId)) {\n        // Cancel the deferred - but do not remove from activeDeferreds here -\n        // we rely on the subscribers to do that so our tests can assert proper\n        // cleanup via _internalActiveDeferreds\n        dfd.cancel();\n        cancelledRouteIds.push(routeId);\n        activeDeferreds.delete(routeId);\n      }\n    });\n    return cancelledRouteIds;\n  }\n\n  // Opt in to capturing and reporting scroll positions during navigations,\n  // used by the <ScrollRestoration> component\n  function enableScrollRestoration(\n    positions: Record<string, number>,\n    getPosition: GetScrollPositionFunction,\n    getKey?: GetScrollRestorationKeyFunction\n  ) {\n    savedScrollPositions = positions;\n    getScrollPosition = getPosition;\n    getScrollRestorationKey = getKey || null;\n\n    // Perform initial hydration scroll restoration, since we miss the boat on\n    // the initial updateState() because we've not yet rendered <ScrollRestoration/>\n    // and therefore have no savedScrollPositions available\n    if (!initialScrollRestored && state.navigation === IDLE_NAVIGATION) {\n      initialScrollRestored = true;\n      let y = getSavedScrollPosition(state.location, state.matches);\n      if (y != null) {\n        updateState({ restoreScrollPosition: y });\n      }\n    }\n\n    return () => {\n      savedScrollPositions = null;\n      getScrollPosition = null;\n      getScrollRestorationKey = null;\n    };\n  }\n\n  function getScrollKey(location: Location, matches: AgnosticDataRouteMatch[]) {\n    if (getScrollRestorationKey) {\n      let key = getScrollRestorationKey(\n        location,\n        matches.map((m) => convertRouteMatchToUiMatch(m, state.loaderData))\n      );\n      return key || location.key;\n    }\n    return location.key;\n  }\n\n  function saveScrollPosition(\n    location: Location,\n    matches: AgnosticDataRouteMatch[]\n  ): void {\n    if (savedScrollPositions && getScrollPosition) {\n      let key = getScrollKey(location, matches);\n      savedScrollPositions[key] = getScrollPosition();\n    }\n  }\n\n  function getSavedScrollPosition(\n    location: Location,\n    matches: AgnosticDataRouteMatch[]\n  ): number | null {\n    if (savedScrollPositions) {\n      let key = getScrollKey(location, matches);\n      let y = savedScrollPositions[key];\n      if (typeof y === \"number\") {\n        return y;\n      }\n    }\n    return null;\n  }\n\n  function checkFogOfWar(\n    matches: AgnosticDataRouteMatch[] | null,\n    routesToUse: AgnosticDataRouteObject[],\n    pathname: string\n  ): { active: boolean; matches: AgnosticDataRouteMatch[] | null } {\n    if (patchRoutesOnNavigationImpl) {\n      // Don't bother re-calling patchRouteOnMiss for a path we've already\n      // processed.  the last execution would have patched the route tree\n      // accordingly so `matches` here are already accurate.\n      if (discoveredRoutes.has(pathname)) {\n        return { active: false, matches };\n      }\n\n      if (!matches) {\n        let fogMatches = matchRoutesImpl<AgnosticDataRouteObject>(\n          routesToUse,\n          pathname,\n          basename,\n          true\n        );\n\n        return { active: true, matches: fogMatches || [] };\n      } else {\n        if (Object.keys(matches[0].params).length > 0) {\n          // If we matched a dynamic param or a splat, it might only be because\n          // we haven't yet discovered other routes that would match with a\n          // higher score.  Call patchRoutesOnNavigation just to be sure\n          let partialMatches = matchRoutesImpl<AgnosticDataRouteObject>(\n            routesToUse,\n            pathname,\n            basename,\n            true\n          );\n          return { active: true, matches: partialMatches };\n        }\n      }\n    }\n\n    return { active: false, matches: null };\n  }\n\n  type DiscoverRoutesSuccessResult = {\n    type: \"success\";\n    matches: AgnosticDataRouteMatch[] | null;\n  };\n  type DiscoverRoutesErrorResult = {\n    type: \"error\";\n    error: any;\n    partialMatches: AgnosticDataRouteMatch[];\n  };\n  type DiscoverRoutesAbortedResult = { type: \"aborted\" };\n  type DiscoverRoutesResult =\n    | DiscoverRoutesSuccessResult\n    | DiscoverRoutesErrorResult\n    | DiscoverRoutesAbortedResult;\n\n  async function discoverRoutes(\n    matches: AgnosticDataRouteMatch[],\n    pathname: string,\n    signal: AbortSignal\n  ): Promise<DiscoverRoutesResult> {\n    let partialMatches: AgnosticDataRouteMatch[] | null = matches;\n    while (true) {\n      let isNonHMR = inFlightDataRoutes == null;\n      let routesToUse = inFlightDataRoutes || dataRoutes;\n      try {\n        await loadLazyRouteChildren(\n          patchRoutesOnNavigationImpl!,\n          pathname,\n          partialMatches,\n          routesToUse,\n          manifest,\n          mapRouteProperties,\n          pendingPatchRoutes,\n          signal\n        );\n      } catch (e) {\n        return { type: \"error\", error: e, partialMatches };\n      } finally {\n        // If we are not in the middle of an HMR revalidation and we changed the\n        // routes, provide a new identity so when we `updateState` at the end of\n        // this navigation/fetch `router.routes` will be a new identity and\n        // trigger a re-run of memoized `router.routes` dependencies.\n        // HMR will already update the identity and reflow when it lands\n        // `inFlightDataRoutes` in `completeNavigation`\n        if (isNonHMR) {\n          dataRoutes = [...dataRoutes];\n        }\n      }\n\n      if (signal.aborted) {\n        return { type: \"aborted\" };\n      }\n\n      let newMatches = matchRoutes(routesToUse, pathname, basename);\n      if (newMatches) {\n        addToFifoQueue(pathname, discoveredRoutes);\n        return { type: \"success\", matches: newMatches };\n      }\n\n      let newPartialMatches = matchRoutesImpl<AgnosticDataRouteObject>(\n        routesToUse,\n        pathname,\n        basename,\n        true\n      );\n\n      // Avoid loops if the second pass results in the same partial matches\n      if (\n        !newPartialMatches ||\n        (partialMatches.length === newPartialMatches.length &&\n          partialMatches.every(\n            (m, i) => m.route.id === newPartialMatches![i].route.id\n          ))\n      ) {\n        addToFifoQueue(pathname, discoveredRoutes);\n        return { type: \"success\", matches: null };\n      }\n\n      partialMatches = newPartialMatches;\n    }\n  }\n\n  function addToFifoQueue(path: string, queue: Set<string>) {\n    if (queue.size >= discoveredRoutesMaxSize) {\n      let first = queue.values().next().value;\n      queue.delete(first);\n    }\n    queue.add(path);\n  }\n\n  function _internalSetRoutes(newRoutes: AgnosticDataRouteObject[]) {\n    manifest = {};\n    inFlightDataRoutes = convertRoutesToDataRoutes(\n      newRoutes,\n      mapRouteProperties,\n      undefined,\n      manifest\n    );\n  }\n\n  function patchRoutes(\n    routeId: string | null,\n    children: AgnosticRouteObject[]\n  ): void {\n    let isNonHMR = inFlightDataRoutes == null;\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    patchRoutesImpl(\n      routeId,\n      children,\n      routesToUse,\n      manifest,\n      mapRouteProperties\n    );\n\n    // If we are not in the middle of an HMR revalidation and we changed the\n    // routes, provide a new identity and trigger a reflow via `updateState`\n    // to re-run memoized `router.routes` dependencies.\n    // HMR will already update the identity and reflow when it lands\n    // `inFlightDataRoutes` in `completeNavigation`\n    if (isNonHMR) {\n      dataRoutes = [...dataRoutes];\n      updateState({});\n    }\n  }\n\n  router = {\n    get basename() {\n      return basename;\n    },\n    get future() {\n      return future;\n    },\n    get state() {\n      return state;\n    },\n    get routes() {\n      return dataRoutes;\n    },\n    get window() {\n      return routerWindow;\n    },\n    initialize,\n    subscribe,\n    enableScrollRestoration,\n    navigate,\n    fetch,\n    revalidate,\n    // Passthrough to history-aware createHref used by useHref so we get proper\n    // hash-aware URLs in DOM paths\n    createHref: (to: To) => init.history.createHref(to),\n    encodeLocation: (to: To) => init.history.encodeLocation(to),\n    getFetcher,\n    deleteFetcher: deleteFetcherAndUpdateState,\n    dispose,\n    getBlocker,\n    deleteBlocker,\n    patchRoutes,\n    _internalFetchControllers: fetchControllers,\n    _internalActiveDeferreds: activeDeferreds,\n    // TODO: Remove setRoutes, it's temporary to avoid dealing with\n    // updating the tree while validating the update algorithm.\n    _internalSetRoutes,\n  };\n\n  return router;\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region createStaticHandler\n////////////////////////////////////////////////////////////////////////////////\n\nexport const UNSAFE_DEFERRED_SYMBOL = Symbol(\"deferred\");\n\n/**\n * Future flags to toggle new feature behavior\n */\nexport interface StaticHandlerFutureConfig {\n  v7_relativeSplatPath: boolean;\n  v7_throwAbortReason: boolean;\n}\n\nexport interface CreateStaticHandlerOptions {\n  basename?: string;\n  /**\n   * @deprecated Use `mapRouteProperties` instead\n   */\n  detectErrorBoundary?: DetectErrorBoundaryFunction;\n  mapRouteProperties?: MapRoutePropertiesFunction;\n  future?: Partial<StaticHandlerFutureConfig>;\n}\n\nexport function createStaticHandler(\n  routes: AgnosticRouteObject[],\n  opts?: CreateStaticHandlerOptions\n): StaticHandler {\n  invariant(\n    routes.length > 0,\n    \"You must provide a non-empty routes array to createStaticHandler\"\n  );\n\n  let manifest: RouteManifest = {};\n  let basename = (opts ? opts.basename : null) || \"/\";\n  let mapRouteProperties: MapRoutePropertiesFunction;\n  if (opts?.mapRouteProperties) {\n    mapRouteProperties = opts.mapRouteProperties;\n  } else if (opts?.detectErrorBoundary) {\n    // If they are still using the deprecated version, wrap it with the new API\n    let detectErrorBoundary = opts.detectErrorBoundary;\n    mapRouteProperties = (route) => ({\n      hasErrorBoundary: detectErrorBoundary(route),\n    });\n  } else {\n    mapRouteProperties = defaultMapRouteProperties;\n  }\n  // Config driven behavior flags\n  let future: StaticHandlerFutureConfig = {\n    v7_relativeSplatPath: false,\n    v7_throwAbortReason: false,\n    ...(opts ? opts.future : null),\n  };\n\n  let dataRoutes = convertRoutesToDataRoutes(\n    routes,\n    mapRouteProperties,\n    undefined,\n    manifest\n  );\n\n  /**\n   * The query() method is intended for document requests, in which we want to\n   * call an optional action and potentially multiple loaders for all nested\n   * routes.  It returns a StaticHandlerContext object, which is very similar\n   * to the router state (location, loaderData, actionData, errors, etc.) and\n   * also adds SSR-specific information such as the statusCode and headers\n   * from action/loaders Responses.\n   *\n   * It _should_ never throw and should report all errors through the\n   * returned context.errors object, properly associating errors to their error\n   * boundary.  Additionally, it tracks _deepestRenderedBoundaryId which can be\n   * used to emulate React error boundaries during SSr by performing a second\n   * pass only down to the boundaryId.\n   *\n   * The one exception where we do not return a StaticHandlerContext is when a\n   * redirect response is returned or thrown from any action/loader.  We\n   * propagate that out and return the raw Response so the HTTP server can\n   * return it directly.\n   *\n   * - `opts.requestContext` is an optional server context that will be passed\n   *   to actions/loaders in the `context` parameter\n   * - `opts.skipLoaderErrorBubbling` is an optional parameter that will prevent\n   *   the bubbling of errors which allows single-fetch-type implementations\n   *   where the client will handle the bubbling and we may need to return data\n   *   for the handling route\n   */\n  async function query(\n    request: Request,\n    {\n      requestContext,\n      skipLoaderErrorBubbling,\n      unstable_dataStrategy,\n    }: {\n      requestContext?: unknown;\n      skipLoaderErrorBubbling?: boolean;\n      unstable_dataStrategy?: DataStrategyFunction;\n    } = {}\n  ): Promise<StaticHandlerContext | Response> {\n    let url = new URL(request.url);\n    let method = request.method;\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"HEAD\") {\n      let error = getInternalRouterError(405, { method });\n      let { matches: methodNotAllowedMatches, route } =\n        getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: methodNotAllowedMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error,\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null,\n      };\n    } else if (!matches) {\n      let error = getInternalRouterError(404, { pathname: location.pathname });\n      let { matches: notFoundMatches, route } =\n        getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: notFoundMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error,\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null,\n      };\n    }\n\n    let result = await queryImpl(\n      request,\n      location,\n      matches,\n      requestContext,\n      unstable_dataStrategy || null,\n      skipLoaderErrorBubbling === true,\n      null\n    );\n    if (isResponse(result)) {\n      return result;\n    }\n\n    // When returning StaticHandlerContext, we patch back in the location here\n    // since we need it for React Context.  But this helps keep our submit and\n    // loadRouteData operating on a Request instead of a Location\n    return { location, basename, ...result };\n  }\n\n  /**\n   * The queryRoute() method is intended for targeted route requests, either\n   * for fetch ?_data requests or resource route requests.  In this case, we\n   * are only ever calling a single action or loader, and we are returning the\n   * returned value directly.  In most cases, this will be a Response returned\n   * from the action/loader, but it may be a primitive or other value as well -\n   * and in such cases the calling context should handle that accordingly.\n   *\n   * We do respect the throw/return differentiation, so if an action/loader\n   * throws, then this method will throw the value.  This is important so we\n   * can do proper boundary identification in Remix where a thrown Response\n   * must go to the Catch Boundary but a returned Response is happy-path.\n   *\n   * One thing to note is that any Router-initiated Errors that make sense\n   * to associate with a status code will be thrown as an ErrorResponse\n   * instance which include the raw Error, such that the calling context can\n   * serialize the error as they see fit while including the proper response\n   * code.  Examples here are 404 and 405 errors that occur prior to reaching\n   * any user-defined loaders.\n   *\n   * - `opts.routeId` allows you to specify the specific route handler to call.\n   *   If not provided the handler will determine the proper route by matching\n   *   against `request.url`\n   * - `opts.requestContext` is an optional server context that will be passed\n   *    to actions/loaders in the `context` parameter\n   */\n  async function queryRoute(\n    request: Request,\n    {\n      routeId,\n      requestContext,\n      unstable_dataStrategy,\n    }: {\n      requestContext?: unknown;\n      routeId?: string;\n      unstable_dataStrategy?: DataStrategyFunction;\n    } = {}\n  ): Promise<any> {\n    let url = new URL(request.url);\n    let method = request.method;\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"HEAD\" && method !== \"OPTIONS\") {\n      throw getInternalRouterError(405, { method });\n    } else if (!matches) {\n      throw getInternalRouterError(404, { pathname: location.pathname });\n    }\n\n    let match = routeId\n      ? matches.find((m) => m.route.id === routeId)\n      : getTargetMatch(matches, location);\n\n    if (routeId && !match) {\n      throw getInternalRouterError(403, {\n        pathname: location.pathname,\n        routeId,\n      });\n    } else if (!match) {\n      // This should never hit I don't think?\n      throw getInternalRouterError(404, { pathname: location.pathname });\n    }\n\n    let result = await queryImpl(\n      request,\n      location,\n      matches,\n      requestContext,\n      unstable_dataStrategy || null,\n      false,\n      match\n    );\n\n    if (isResponse(result)) {\n      return result;\n    }\n\n    let error = result.errors ? Object.values(result.errors)[0] : undefined;\n    if (error !== undefined) {\n      // If we got back result.errors, that means the loader/action threw\n      // _something_ that wasn't a Response, but it's not guaranteed/required\n      // to be an `instanceof Error` either, so we have to use throw here to\n      // preserve the \"error\" state outside of queryImpl.\n      throw error;\n    }\n\n    // Pick off the right state value to return\n    if (result.actionData) {\n      return Object.values(result.actionData)[0];\n    }\n\n    if (result.loaderData) {\n      let data = Object.values(result.loaderData)[0];\n      if (result.activeDeferreds?.[match.route.id]) {\n        data[UNSAFE_DEFERRED_SYMBOL] = result.activeDeferreds[match.route.id];\n      }\n      return data;\n    }\n\n    return undefined;\n  }\n\n  async function queryImpl(\n    request: Request,\n    location: Location,\n    matches: AgnosticDataRouteMatch[],\n    requestContext: unknown,\n    unstable_dataStrategy: DataStrategyFunction | null,\n    skipLoaderErrorBubbling: boolean,\n    routeMatch: AgnosticDataRouteMatch | null\n  ): Promise<Omit<StaticHandlerContext, \"location\" | \"basename\"> | Response> {\n    invariant(\n      request.signal,\n      \"query()/queryRoute() requests must contain an AbortController signal\"\n    );\n\n    try {\n      if (isMutationMethod(request.method.toLowerCase())) {\n        let result = await submit(\n          request,\n          matches,\n          routeMatch || getTargetMatch(matches, location),\n          requestContext,\n          unstable_dataStrategy,\n          skipLoaderErrorBubbling,\n          routeMatch != null\n        );\n        return result;\n      }\n\n      let result = await loadRouteData(\n        request,\n        matches,\n        requestContext,\n        unstable_dataStrategy,\n        skipLoaderErrorBubbling,\n        routeMatch\n      );\n      return isResponse(result)\n        ? result\n        : {\n            ...result,\n            actionData: null,\n            actionHeaders: {},\n          };\n    } catch (e) {\n      // If the user threw/returned a Response in callLoaderOrAction for a\n      // `queryRoute` call, we throw the `DataStrategyResult` to bail out early\n      // and then return or throw the raw Response here accordingly\n      if (isDataStrategyResult(e) && isResponse(e.result)) {\n        if (e.type === ResultType.error) {\n          throw e.result;\n        }\n        return e.result;\n      }\n      // Redirects are always returned since they don't propagate to catch\n      // boundaries\n      if (isRedirectResponse(e)) {\n        return e;\n      }\n      throw e;\n    }\n  }\n\n  async function submit(\n    request: Request,\n    matches: AgnosticDataRouteMatch[],\n    actionMatch: AgnosticDataRouteMatch,\n    requestContext: unknown,\n    unstable_dataStrategy: DataStrategyFunction | null,\n    skipLoaderErrorBubbling: boolean,\n    isRouteRequest: boolean\n  ): Promise<Omit<StaticHandlerContext, \"location\" | \"basename\"> | Response> {\n    let result: DataResult;\n\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      let error = getInternalRouterError(405, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: actionMatch.route.id,\n      });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error,\n      };\n    } else {\n      let results = await callDataStrategy(\n        \"action\",\n        request,\n        [actionMatch],\n        matches,\n        isRouteRequest,\n        requestContext,\n        unstable_dataStrategy\n      );\n      result = results[actionMatch.route.id];\n\n      if (request.signal.aborted) {\n        throwStaticHandlerAbortedError(request, isRouteRequest, future);\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      // Uhhhh - this should never happen, we should always throw these from\n      // callLoaderOrAction, but the type narrowing here keeps TS happy and we\n      // can get back on the \"throw all redirect responses\" train here should\n      // this ever happen :/\n      throw new Response(null, {\n        status: result.response.status,\n        headers: {\n          Location: result.response.headers.get(\"Location\")!,\n        },\n      });\n    }\n\n    if (isDeferredResult(result)) {\n      let error = getInternalRouterError(400, { type: \"defer-action\" });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error,\n      };\n    }\n\n    if (isRouteRequest) {\n      // Note: This should only be non-Response values if we get here, since\n      // isRouteRequest should throw any Response received in callLoaderOrAction\n      if (isErrorResult(result)) {\n        throw result.error;\n      }\n\n      return {\n        matches: [actionMatch],\n        loaderData: {},\n        actionData: { [actionMatch.route.id]: result.data },\n        errors: null,\n        // Note: statusCode + headers are unused here since queryRoute will\n        // return the raw Response or value\n        statusCode: 200,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null,\n      };\n    }\n\n    // Create a GET request for the loaders\n    let loaderRequest = new Request(request.url, {\n      headers: request.headers,\n      redirect: request.redirect,\n      signal: request.signal,\n    });\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = skipLoaderErrorBubbling\n        ? actionMatch\n        : findNearestBoundary(matches, actionMatch.route.id);\n\n      let context = await loadRouteData(\n        loaderRequest,\n        matches,\n        requestContext,\n        unstable_dataStrategy,\n        skipLoaderErrorBubbling,\n        null,\n        [boundaryMatch.route.id, result]\n      );\n\n      // action status codes take precedence over loader status codes\n      return {\n        ...context,\n        statusCode: isRouteErrorResponse(result.error)\n          ? result.error.status\n          : result.statusCode != null\n          ? result.statusCode\n          : 500,\n        actionData: null,\n        actionHeaders: {\n          ...(result.headers ? { [actionMatch.route.id]: result.headers } : {}),\n        },\n      };\n    }\n\n    let context = await loadRouteData(\n      loaderRequest,\n      matches,\n      requestContext,\n      unstable_dataStrategy,\n      skipLoaderErrorBubbling,\n      null\n    );\n\n    return {\n      ...context,\n      actionData: {\n        [actionMatch.route.id]: result.data,\n      },\n      // action status codes take precedence over loader status codes\n      ...(result.statusCode ? { statusCode: result.statusCode } : {}),\n      actionHeaders: result.headers\n        ? { [actionMatch.route.id]: result.headers }\n        : {},\n    };\n  }\n\n  async function loadRouteData(\n    request: Request,\n    matches: AgnosticDataRouteMatch[],\n    requestContext: unknown,\n    unstable_dataStrategy: DataStrategyFunction | null,\n    skipLoaderErrorBubbling: boolean,\n    routeMatch: AgnosticDataRouteMatch | null,\n    pendingActionResult?: PendingActionResult\n  ): Promise<\n    | Omit<\n        StaticHandlerContext,\n        \"location\" | \"basename\" | \"actionData\" | \"actionHeaders\"\n      >\n    | Response\n  > {\n    let isRouteRequest = routeMatch != null;\n\n    // Short circuit if we have no loaders to run (queryRoute())\n    if (\n      isRouteRequest &&\n      !routeMatch?.route.loader &&\n      !routeMatch?.route.lazy\n    ) {\n      throw getInternalRouterError(400, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: routeMatch?.route.id,\n      });\n    }\n\n    let requestMatches = routeMatch\n      ? [routeMatch]\n      : pendingActionResult && isErrorResult(pendingActionResult[1])\n      ? getLoaderMatchesUntilBoundary(matches, pendingActionResult[0])\n      : matches;\n    let matchesToLoad = requestMatches.filter(\n      (m) => m.route.loader || m.route.lazy\n    );\n\n    // Short circuit if we have no loaders to run (query())\n    if (matchesToLoad.length === 0) {\n      return {\n        matches,\n        // Add a null for all matched routes for proper revalidation on the client\n        loaderData: matches.reduce(\n          (acc, m) => Object.assign(acc, { [m.route.id]: null }),\n          {}\n        ),\n        errors:\n          pendingActionResult && isErrorResult(pendingActionResult[1])\n            ? {\n                [pendingActionResult[0]]: pendingActionResult[1].error,\n              }\n            : null,\n        statusCode: 200,\n        loaderHeaders: {},\n        activeDeferreds: null,\n      };\n    }\n\n    let results = await callDataStrategy(\n      \"loader\",\n      request,\n      matchesToLoad,\n      matches,\n      isRouteRequest,\n      requestContext,\n      unstable_dataStrategy\n    );\n\n    if (request.signal.aborted) {\n      throwStaticHandlerAbortedError(request, isRouteRequest, future);\n    }\n\n    // Process and commit output from loaders\n    let activeDeferreds = new Map<string, DeferredData>();\n    let context = processRouteLoaderData(\n      matches,\n      results,\n      pendingActionResult,\n      activeDeferreds,\n      skipLoaderErrorBubbling\n    );\n\n    // Add a null for any non-loader matches for proper revalidation on the client\n    let executedLoaders = new Set<string>(\n      matchesToLoad.map((match) => match.route.id)\n    );\n    matches.forEach((match) => {\n      if (!executedLoaders.has(match.route.id)) {\n        context.loaderData[match.route.id] = null;\n      }\n    });\n\n    return {\n      ...context,\n      matches,\n      activeDeferreds:\n        activeDeferreds.size > 0\n          ? Object.fromEntries(activeDeferreds.entries())\n          : null,\n    };\n  }\n\n  // Utility wrapper for calling dataStrategy server-side without having to\n  // pass around the manifest, mapRouteProperties, etc.\n  async function callDataStrategy(\n    type: \"loader\" | \"action\",\n    request: Request,\n    matchesToLoad: AgnosticDataRouteMatch[],\n    matches: AgnosticDataRouteMatch[],\n    isRouteRequest: boolean,\n    requestContext: unknown,\n    unstable_dataStrategy: DataStrategyFunction | null\n  ): Promise<Record<string, DataResult>> {\n    let results = await callDataStrategyImpl(\n      unstable_dataStrategy || defaultDataStrategy,\n      type,\n      null,\n      request,\n      matchesToLoad,\n      matches,\n      null,\n      manifest,\n      mapRouteProperties,\n      requestContext\n    );\n\n    let dataResults: Record<string, DataResult> = {};\n    await Promise.all(\n      matches.map(async (match) => {\n        if (!(match.route.id in results)) {\n          return;\n        }\n        let result = results[match.route.id];\n        if (isRedirectDataStrategyResultResult(result)) {\n          let response = result.result as Response;\n          // Throw redirects and let the server handle them with an HTTP redirect\n          throw normalizeRelativeRoutingRedirectResponse(\n            response,\n            request,\n            match.route.id,\n            matches,\n            basename,\n            future.v7_relativeSplatPath\n          );\n        }\n        if (isResponse(result.result) && isRouteRequest) {\n          // For SSR single-route requests, we want to hand Responses back\n          // directly without unwrapping\n          throw result;\n        }\n\n        dataResults[match.route.id] =\n          await convertDataStrategyResultToDataResult(result);\n      })\n    );\n    return dataResults;\n  }\n\n  return {\n    dataRoutes,\n    query,\n    queryRoute,\n  };\n}\n\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Helpers\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Given an existing StaticHandlerContext and an error thrown at render time,\n * provide an updated StaticHandlerContext suitable for a second SSR render\n */\nexport function getStaticContextFromError(\n  routes: AgnosticDataRouteObject[],\n  context: StaticHandlerContext,\n  error: any\n) {\n  let newContext: StaticHandlerContext = {\n    ...context,\n    statusCode: isRouteErrorResponse(error) ? error.status : 500,\n    errors: {\n      [context._deepestRenderedBoundaryId || routes[0].id]: error,\n    },\n  };\n  return newContext;\n}\n\nfunction throwStaticHandlerAbortedError(\n  request: Request,\n  isRouteRequest: boolean,\n  future: StaticHandlerFutureConfig\n) {\n  if (future.v7_throwAbortReason && request.signal.reason !== undefined) {\n    throw request.signal.reason;\n  }\n\n  let method = isRouteRequest ? \"queryRoute\" : \"query\";\n  throw new Error(`${method}() call aborted: ${request.method} ${request.url}`);\n}\n\nfunction isSubmissionNavigation(\n  opts: BaseNavigateOrFetchOptions\n): opts is SubmissionNavigateOptions {\n  return (\n    opts != null &&\n    ((\"formData\" in opts && opts.formData != null) ||\n      (\"body\" in opts && opts.body !== undefined))\n  );\n}\n\nfunction normalizeTo(\n  location: Path,\n  matches: AgnosticDataRouteMatch[],\n  basename: string,\n  prependBasename: boolean,\n  to: To | null,\n  v7_relativeSplatPath: boolean,\n  fromRouteId?: string,\n  relative?: RelativeRoutingType\n) {\n  let contextualMatches: AgnosticDataRouteMatch[];\n  let activeRouteMatch: AgnosticDataRouteMatch | undefined;\n  if (fromRouteId) {\n    // Grab matches up to the calling route so our route-relative logic is\n    // relative to the correct source route\n    contextualMatches = [];\n    for (let match of matches) {\n      contextualMatches.push(match);\n      if (match.route.id === fromRouteId) {\n        activeRouteMatch = match;\n        break;\n      }\n    }\n  } else {\n    contextualMatches = matches;\n    activeRouteMatch = matches[matches.length - 1];\n  }\n\n  // Resolve the relative path\n  let path = resolveTo(\n    to ? to : \".\",\n    getResolveToMatches(contextualMatches, v7_relativeSplatPath),\n    stripBasename(location.pathname, basename) || location.pathname,\n    relative === \"path\"\n  );\n\n  // When `to` is not specified we inherit search/hash from the current\n  // location, unlike when to=\".\" and we just inherit the path.\n  // See https://github.com/remix-run/remix/issues/927\n  if (to == null) {\n    path.search = location.search;\n    path.hash = location.hash;\n  }\n\n  // Add an ?index param for matched index routes if we don't already have one\n  if (\n    (to == null || to === \"\" || to === \".\") &&\n    activeRouteMatch &&\n    activeRouteMatch.route.index &&\n    !hasNakedIndexQuery(path.search)\n  ) {\n    path.search = path.search\n      ? path.search.replace(/^\\?/, \"?index&\")\n      : \"?index\";\n  }\n\n  // If we're operating within a basename, prepend it to the pathname.  If\n  // this is a root navigation, then just use the raw basename which allows\n  // the basename to have full control over the presence of a trailing slash\n  // on root actions\n  if (prependBasename && basename !== \"/\") {\n    path.pathname =\n      path.pathname === \"/\" ? basename : joinPaths([basename, path.pathname]);\n  }\n\n  return createPath(path);\n}\n\n// Normalize navigation options by converting formMethod=GET formData objects to\n// URLSearchParams so they behave identically to links with query params\nfunction normalizeNavigateOptions(\n  normalizeFormMethod: boolean,\n  isFetcher: boolean,\n  path: string,\n  opts?: BaseNavigateOrFetchOptions\n): {\n  path: string;\n  submission?: Submission;\n  error?: ErrorResponseImpl;\n} {\n  // Return location verbatim on non-submission navigations\n  if (!opts || !isSubmissionNavigation(opts)) {\n    return { path };\n  }\n\n  if (opts.formMethod && !isValidMethod(opts.formMethod)) {\n    return {\n      path,\n      error: getInternalRouterError(405, { method: opts.formMethod }),\n    };\n  }\n\n  let getInvalidBodyError = () => ({\n    path,\n    error: getInternalRouterError(400, { type: \"invalid-body\" }),\n  });\n\n  // Create a Submission on non-GET navigations\n  let rawFormMethod = opts.formMethod || \"get\";\n  let formMethod = normalizeFormMethod\n    ? (rawFormMethod.toUpperCase() as V7_FormMethod)\n    : (rawFormMethod.toLowerCase() as FormMethod);\n  let formAction = stripHashFromPath(path);\n\n  if (opts.body !== undefined) {\n    if (opts.formEncType === \"text/plain\") {\n      // text only support POST/PUT/PATCH/DELETE submissions\n      if (!isMutationMethod(formMethod)) {\n        return getInvalidBodyError();\n      }\n\n      let text =\n        typeof opts.body === \"string\"\n          ? opts.body\n          : opts.body instanceof FormData ||\n            opts.body instanceof URLSearchParams\n          ? // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#plain-text-form-data\n            Array.from(opts.body.entries()).reduce(\n              (acc, [name, value]) => `${acc}${name}=${value}\\n`,\n              \"\"\n            )\n          : String(opts.body);\n\n      return {\n        path,\n        submission: {\n          formMethod,\n          formAction,\n          formEncType: opts.formEncType,\n          formData: undefined,\n          json: undefined,\n          text,\n        },\n      };\n    } else if (opts.formEncType === \"application/json\") {\n      // json only supports POST/PUT/PATCH/DELETE submissions\n      if (!isMutationMethod(formMethod)) {\n        return getInvalidBodyError();\n      }\n\n      try {\n        let json =\n          typeof opts.body === \"string\" ? JSON.parse(opts.body) : opts.body;\n\n        return {\n          path,\n          submission: {\n            formMethod,\n            formAction,\n            formEncType: opts.formEncType,\n            formData: undefined,\n            json,\n            text: undefined,\n          },\n        };\n      } catch (e) {\n        return getInvalidBodyError();\n      }\n    }\n  }\n\n  invariant(\n    typeof FormData === \"function\",\n    \"FormData is not available in this environment\"\n  );\n\n  let searchParams: URLSearchParams;\n  let formData: FormData;\n\n  if (opts.formData) {\n    searchParams = convertFormDataToSearchParams(opts.formData);\n    formData = opts.formData;\n  } else if (opts.body instanceof FormData) {\n    searchParams = convertFormDataToSearchParams(opts.body);\n    formData = opts.body;\n  } else if (opts.body instanceof URLSearchParams) {\n    searchParams = opts.body;\n    formData = convertSearchParamsToFormData(searchParams);\n  } else if (opts.body == null) {\n    searchParams = new URLSearchParams();\n    formData = new FormData();\n  } else {\n    try {\n      searchParams = new URLSearchParams(opts.body);\n      formData = convertSearchParamsToFormData(searchParams);\n    } catch (e) {\n      return getInvalidBodyError();\n    }\n  }\n\n  let submission: Submission = {\n    formMethod,\n    formAction,\n    formEncType:\n      (opts && opts.formEncType) || \"application/x-www-form-urlencoded\",\n    formData,\n    json: undefined,\n    text: undefined,\n  };\n\n  if (isMutationMethod(submission.formMethod)) {\n    return { path, submission };\n  }\n\n  // Flatten submission onto URLSearchParams for GET submissions\n  let parsedPath = parsePath(path);\n  // On GET navigation submissions we can drop the ?index param from the\n  // resulting location since all loaders will run.  But fetcher GET submissions\n  // only run a single loader so we need to preserve any incoming ?index params\n  if (isFetcher && parsedPath.search && hasNakedIndexQuery(parsedPath.search)) {\n    searchParams.append(\"index\", \"\");\n  }\n  parsedPath.search = `?${searchParams}`;\n\n  return { path: createPath(parsedPath), submission };\n}\n\n// Filter out all routes below any caught error as they aren't going to\n// render so we don't need to load them\nfunction getLoaderMatchesUntilBoundary(\n  matches: AgnosticDataRouteMatch[],\n  boundaryId: string\n) {\n  let boundaryMatches = matches;\n  if (boundaryId) {\n    let index = matches.findIndex((m) => m.route.id === boundaryId);\n    if (index >= 0) {\n      boundaryMatches = matches.slice(0, index);\n    }\n  }\n  return boundaryMatches;\n}\n\nfunction getMatchesToLoad(\n  history: History,\n  state: RouterState,\n  matches: AgnosticDataRouteMatch[],\n  submission: Submission | undefined,\n  location: Location,\n  isInitialLoad: boolean,\n  skipActionErrorRevalidation: boolean,\n  isRevalidationRequired: boolean,\n  cancelledDeferredRoutes: string[],\n  cancelledFetcherLoads: Set<string>,\n  deletedFetchers: Set<string>,\n  fetchLoadMatches: Map<string, FetchLoadMatch>,\n  fetchRedirectIds: Set<string>,\n  routesToUse: AgnosticDataRouteObject[],\n  basename: string | undefined,\n  pendingActionResult?: PendingActionResult\n): [AgnosticDataRouteMatch[], RevalidatingFetcher[]] {\n  let actionResult = pendingActionResult\n    ? isErrorResult(pendingActionResult[1])\n      ? pendingActionResult[1].error\n      : pendingActionResult[1].data\n    : undefined;\n  let currentUrl = history.createURL(state.location);\n  let nextUrl = history.createURL(location);\n\n  // Pick navigation matches that are net-new or qualify for revalidation\n  let boundaryId =\n    pendingActionResult && isErrorResult(pendingActionResult[1])\n      ? pendingActionResult[0]\n      : undefined;\n  let boundaryMatches = boundaryId\n    ? getLoaderMatchesUntilBoundary(matches, boundaryId)\n    : matches;\n\n  // Don't revalidate loaders by default after action 4xx/5xx responses\n  // when the flag is enabled.  They can still opt-into revalidation via\n  // `shouldRevalidate` via `actionResult`\n  let actionStatus = pendingActionResult\n    ? pendingActionResult[1].statusCode\n    : undefined;\n  let shouldSkipRevalidation =\n    skipActionErrorRevalidation && actionStatus && actionStatus >= 400;\n\n  let navigationMatches = boundaryMatches.filter((match, index) => {\n    let { route } = match;\n    if (route.lazy) {\n      // We haven't loaded this route yet so we don't know if it's got a loader!\n      return true;\n    }\n\n    if (route.loader == null) {\n      return false;\n    }\n\n    if (isInitialLoad) {\n      if (typeof route.loader !== \"function\" || route.loader.hydrate) {\n        return true;\n      }\n      return (\n        state.loaderData[route.id] === undefined &&\n        // Don't re-run if the loader ran and threw an error\n        (!state.errors || state.errors[route.id] === undefined)\n      );\n    }\n\n    // Always call the loader on new route instances and pending defer cancellations\n    if (\n      isNewLoader(state.loaderData, state.matches[index], match) ||\n      cancelledDeferredRoutes.some((id) => id === match.route.id)\n    ) {\n      return true;\n    }\n\n    // This is the default implementation for when we revalidate.  If the route\n    // provides it's own implementation, then we give them full control but\n    // provide this value so they can leverage it if needed after they check\n    // their own specific use cases\n    let currentRouteMatch = state.matches[index];\n    let nextRouteMatch = match;\n\n    return shouldRevalidateLoader(match, {\n      currentUrl,\n      currentParams: currentRouteMatch.params,\n      nextUrl,\n      nextParams: nextRouteMatch.params,\n      ...submission,\n      actionResult,\n      actionStatus,\n      defaultShouldRevalidate: shouldSkipRevalidation\n        ? false\n        : // Forced revalidation due to submission, useRevalidator, or X-Remix-Revalidate\n          isRevalidationRequired ||\n          currentUrl.pathname + currentUrl.search ===\n            nextUrl.pathname + nextUrl.search ||\n          // Search params affect all loaders\n          currentUrl.search !== nextUrl.search ||\n          isNewRouteInstance(currentRouteMatch, nextRouteMatch),\n    });\n  });\n\n  // Pick fetcher.loads that need to be revalidated\n  let revalidatingFetchers: RevalidatingFetcher[] = [];\n  fetchLoadMatches.forEach((f, key) => {\n    // Don't revalidate:\n    //  - on initial load (shouldn't be any fetchers then anyway)\n    //  - if fetcher won't be present in the subsequent render\n    //    - no longer matches the URL (v7_fetcherPersist=false)\n    //    - was unmounted but persisted due to v7_fetcherPersist=true\n    if (\n      isInitialLoad ||\n      !matches.some((m) => m.route.id === f.routeId) ||\n      deletedFetchers.has(key)\n    ) {\n      return;\n    }\n\n    let fetcherMatches = matchRoutes(routesToUse, f.path, basename);\n\n    // If the fetcher path no longer matches, push it in with null matches so\n    // we can trigger a 404 in callLoadersAndMaybeResolveData.  Note this is\n    // currently only a use-case for Remix HMR where the route tree can change\n    // at runtime and remove a route previously loaded via a fetcher\n    if (!fetcherMatches) {\n      revalidatingFetchers.push({\n        key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: null,\n        match: null,\n        controller: null,\n      });\n      return;\n    }\n\n    // Revalidating fetchers are decoupled from the route matches since they\n    // load from a static href.  They revalidate based on explicit revalidation\n    // (submission, useRevalidator, or X-Remix-Revalidate)\n    let fetcher = state.fetchers.get(key);\n    let fetcherMatch = getTargetMatch(fetcherMatches, f.path);\n\n    let shouldRevalidate = false;\n    if (fetchRedirectIds.has(key)) {\n      // Never trigger a revalidation of an actively redirecting fetcher\n      shouldRevalidate = false;\n    } else if (cancelledFetcherLoads.has(key)) {\n      // Always mark for revalidation if the fetcher was cancelled\n      cancelledFetcherLoads.delete(key);\n      shouldRevalidate = true;\n    } else if (\n      fetcher &&\n      fetcher.state !== \"idle\" &&\n      fetcher.data === undefined\n    ) {\n      // If the fetcher hasn't ever completed loading yet, then this isn't a\n      // revalidation, it would just be a brand new load if an explicit\n      // revalidation is required\n      shouldRevalidate = isRevalidationRequired;\n    } else {\n      // Otherwise fall back on any user-defined shouldRevalidate, defaulting\n      // to explicit revalidations only\n      shouldRevalidate = shouldRevalidateLoader(fetcherMatch, {\n        currentUrl,\n        currentParams: state.matches[state.matches.length - 1].params,\n        nextUrl,\n        nextParams: matches[matches.length - 1].params,\n        ...submission,\n        actionResult,\n        actionStatus,\n        defaultShouldRevalidate: shouldSkipRevalidation\n          ? false\n          : isRevalidationRequired,\n      });\n    }\n\n    if (shouldRevalidate) {\n      revalidatingFetchers.push({\n        key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: fetcherMatches,\n        match: fetcherMatch,\n        controller: new AbortController(),\n      });\n    }\n  });\n\n  return [navigationMatches, revalidatingFetchers];\n}\n\nfunction isNewLoader(\n  currentLoaderData: RouteData,\n  currentMatch: AgnosticDataRouteMatch,\n  match: AgnosticDataRouteMatch\n) {\n  let isNew =\n    // [a] -> [a, b]\n    !currentMatch ||\n    // [a, b] -> [a, c]\n    match.route.id !== currentMatch.route.id;\n\n  // Handle the case that we don't have data for a re-used route, potentially\n  // from a prior error or from a cancelled pending deferred\n  let isMissingData = currentLoaderData[match.route.id] === undefined;\n\n  // Always load if this is a net-new route or we don't yet have data\n  return isNew || isMissingData;\n}\n\nfunction isNewRouteInstance(\n  currentMatch: AgnosticDataRouteMatch,\n  match: AgnosticDataRouteMatch\n) {\n  let currentPath = currentMatch.route.path;\n  return (\n    // param change for this match, /users/123 -> /users/456\n    currentMatch.pathname !== match.pathname ||\n    // splat param changed, which is not present in match.path\n    // e.g. /files/images/avatar.jpg -> files/finances.xls\n    (currentPath != null &&\n      currentPath.endsWith(\"*\") &&\n      currentMatch.params[\"*\"] !== match.params[\"*\"])\n  );\n}\n\nfunction shouldRevalidateLoader(\n  loaderMatch: AgnosticDataRouteMatch,\n  arg: ShouldRevalidateFunctionArgs\n) {\n  if (loaderMatch.route.shouldRevalidate) {\n    let routeChoice = loaderMatch.route.shouldRevalidate(arg);\n    if (typeof routeChoice === \"boolean\") {\n      return routeChoice;\n    }\n  }\n\n  return arg.defaultShouldRevalidate;\n}\n\n/**\n * Idempotent utility to execute patchRoutesOnNavigation() to lazily load route\n * definitions and update the routes/routeManifest\n */\nasync function loadLazyRouteChildren(\n  patchRoutesOnNavigationImpl: AgnosticPatchRoutesOnNavigationFunction,\n  path: string,\n  matches: AgnosticDataRouteMatch[],\n  routes: AgnosticDataRouteObject[],\n  manifest: RouteManifest,\n  mapRouteProperties: MapRoutePropertiesFunction,\n  pendingRouteChildren: Map<\n    string,\n    ReturnType<typeof patchRoutesOnNavigationImpl>\n  >,\n  signal: AbortSignal\n) {\n  let key = [path, ...matches.map((m) => m.route.id)].join(\"-\");\n  try {\n    let pending = pendingRouteChildren.get(key);\n    if (!pending) {\n      pending = patchRoutesOnNavigationImpl({\n        path,\n        matches,\n        patch: (routeId, children) => {\n          if (!signal.aborted) {\n            patchRoutesImpl(\n              routeId,\n              children,\n              routes,\n              manifest,\n              mapRouteProperties\n            );\n          }\n        },\n      });\n      pendingRouteChildren.set(key, pending);\n    }\n\n    if (pending && isPromise<AgnosticRouteObject[]>(pending)) {\n      await pending;\n    }\n  } finally {\n    pendingRouteChildren.delete(key);\n  }\n}\n\nfunction patchRoutesImpl(\n  routeId: string | null,\n  children: AgnosticRouteObject[],\n  routesToUse: AgnosticDataRouteObject[],\n  manifest: RouteManifest,\n  mapRouteProperties: MapRoutePropertiesFunction\n) {\n  if (routeId) {\n    let route = manifest[routeId];\n    invariant(\n      route,\n      `No route found to patch children into: routeId = ${routeId}`\n    );\n    let dataChildren = convertRoutesToDataRoutes(\n      children,\n      mapRouteProperties,\n      [routeId, \"patch\", String(route.children?.length || \"0\")],\n      manifest\n    );\n    if (route.children) {\n      route.children.push(...dataChildren);\n    } else {\n      route.children = dataChildren;\n    }\n  } else {\n    let dataChildren = convertRoutesToDataRoutes(\n      children,\n      mapRouteProperties,\n      [\"patch\", String(routesToUse.length || \"0\")],\n      manifest\n    );\n    routesToUse.push(...dataChildren);\n  }\n}\n\n/**\n * Execute route.lazy() methods to lazily load route modules (loader, action,\n * shouldRevalidate) and update the routeManifest in place which shares objects\n * with dataRoutes so those get updated as well.\n */\nasync function loadLazyRouteModule(\n  route: AgnosticDataRouteObject,\n  mapRouteProperties: MapRoutePropertiesFunction,\n  manifest: RouteManifest\n) {\n  if (!route.lazy) {\n    return;\n  }\n\n  let lazyRoute = await route.lazy();\n\n  // If the lazy route function was executed and removed by another parallel\n  // call then we can return - first lazy() to finish wins because the return\n  // value of lazy is expected to be static\n  if (!route.lazy) {\n    return;\n  }\n\n  let routeToUpdate = manifest[route.id];\n  invariant(routeToUpdate, \"No route found in manifest\");\n\n  // Update the route in place.  This should be safe because there's no way\n  // we could yet be sitting on this route as we can't get there without\n  // resolving lazy() first.\n  //\n  // This is different than the HMR \"update\" use-case where we may actively be\n  // on the route being updated.  The main concern boils down to \"does this\n  // mutation affect any ongoing navigations or any current state.matches\n  // values?\".  If not, it should be safe to update in place.\n  let routeUpdates: Record<string, any> = {};\n  for (let lazyRouteProperty in lazyRoute) {\n    let staticRouteValue =\n      routeToUpdate[lazyRouteProperty as keyof typeof routeToUpdate];\n\n    let isPropertyStaticallyDefined =\n      staticRouteValue !== undefined &&\n      // This property isn't static since it should always be updated based\n      // on the route updates\n      lazyRouteProperty !== \"hasErrorBoundary\";\n\n    warning(\n      !isPropertyStaticallyDefined,\n      `Route \"${routeToUpdate.id}\" has a static property \"${lazyRouteProperty}\" ` +\n        `defined but its lazy function is also returning a value for this property. ` +\n        `The lazy route property \"${lazyRouteProperty}\" will be ignored.`\n    );\n\n    if (\n      !isPropertyStaticallyDefined &&\n      !immutableRouteKeys.has(lazyRouteProperty as ImmutableRouteKey)\n    ) {\n      routeUpdates[lazyRouteProperty] =\n        lazyRoute[lazyRouteProperty as keyof typeof lazyRoute];\n    }\n  }\n\n  // Mutate the route with the provided updates.  Do this first so we pass\n  // the updated version to mapRouteProperties\n  Object.assign(routeToUpdate, routeUpdates);\n\n  // Mutate the `hasErrorBoundary` property on the route based on the route\n  // updates and remove the `lazy` function so we don't resolve the lazy\n  // route again.\n  Object.assign(routeToUpdate, {\n    // To keep things framework agnostic, we use the provided\n    // `mapRouteProperties` (or wrapped `detectErrorBoundary`) function to\n    // set the framework-aware properties (`element`/`hasErrorBoundary`) since\n    // the logic will differ between frameworks.\n    ...mapRouteProperties(routeToUpdate),\n    lazy: undefined,\n  });\n}\n\n// Default implementation of `dataStrategy` which fetches all loaders in parallel\nasync function defaultDataStrategy({\n  matches,\n}: DataStrategyFunctionArgs): ReturnType<DataStrategyFunction> {\n  let matchesToLoad = matches.filter((m) => m.shouldLoad);\n  let results = await Promise.all(matchesToLoad.map((m) => m.resolve()));\n  return results.reduce(\n    (acc, result, i) =>\n      Object.assign(acc, { [matchesToLoad[i].route.id]: result }),\n    {}\n  );\n}\n\nasync function callDataStrategyImpl(\n  dataStrategyImpl: DataStrategyFunction,\n  type: \"loader\" | \"action\",\n  state: RouterState | null,\n  request: Request,\n  matchesToLoad: AgnosticDataRouteMatch[],\n  matches: AgnosticDataRouteMatch[],\n  fetcherKey: string | null,\n  manifest: RouteManifest,\n  mapRouteProperties: MapRoutePropertiesFunction,\n  requestContext?: unknown\n): Promise<Record<string, DataStrategyResult>> {\n  let loadRouteDefinitionsPromises = matches.map((m) =>\n    m.route.lazy\n      ? loadLazyRouteModule(m.route, mapRouteProperties, manifest)\n      : undefined\n  );\n\n  let dsMatches = matches.map((match, i) => {\n    let loadRoutePromise = loadRouteDefinitionsPromises[i];\n    let shouldLoad = matchesToLoad.some((m) => m.route.id === match.route.id);\n    // `resolve` encapsulates route.lazy(), executing the loader/action,\n    // and mapping return values/thrown errors to a `DataStrategyResult`.  Users\n    // can pass a callback to take fine-grained control over the execution\n    // of the loader/action\n    let resolve: DataStrategyMatch[\"resolve\"] = async (handlerOverride) => {\n      if (\n        handlerOverride &&\n        request.method === \"GET\" &&\n        (match.route.lazy || match.route.loader)\n      ) {\n        shouldLoad = true;\n      }\n      return shouldLoad\n        ? callLoaderOrAction(\n            type,\n            request,\n            match,\n            loadRoutePromise,\n            handlerOverride,\n            requestContext\n          )\n        : Promise.resolve({ type: ResultType.data, result: undefined });\n    };\n\n    return {\n      ...match,\n      shouldLoad,\n      resolve,\n    };\n  });\n\n  // Send all matches here to allow for a middleware-type implementation.\n  // handler will be a no-op for unneeded routes and we filter those results\n  // back out below.\n  let results = await dataStrategyImpl({\n    matches: dsMatches,\n    request,\n    params: matches[0].params,\n    fetcherKey,\n    context: requestContext,\n  });\n\n  // Wait for all routes to load here but 'swallow the error since we want\n  // it to bubble up from the `await loadRoutePromise` in `callLoaderOrAction` -\n  // called from `match.resolve()`\n  try {\n    await Promise.all(loadRouteDefinitionsPromises);\n  } catch (e) {\n    // No-op\n  }\n\n  return results;\n}\n\n// Default logic for calling a loader/action is the user has no specified a dataStrategy\nasync function callLoaderOrAction(\n  type: \"loader\" | \"action\",\n  request: Request,\n  match: AgnosticDataRouteMatch,\n  loadRoutePromise: Promise<void> | undefined,\n  handlerOverride: Parameters<DataStrategyMatch[\"resolve\"]>[0],\n  staticContext?: unknown\n): Promise<DataStrategyResult> {\n  let result: DataStrategyResult;\n  let onReject: (() => void) | undefined;\n\n  let runHandler = (\n    handler: AgnosticRouteObject[\"loader\"] | AgnosticRouteObject[\"action\"]\n  ): Promise<DataStrategyResult> => {\n    // Setup a promise we can race against so that abort signals short circuit\n    let reject: () => void;\n    // This will never resolve so safe to type it as Promise<DataStrategyResult> to\n    // satisfy the function return value\n    let abortPromise = new Promise<DataStrategyResult>((_, r) => (reject = r));\n    onReject = () => reject();\n    request.signal.addEventListener(\"abort\", onReject);\n\n    let actualHandler = (ctx?: unknown) => {\n      if (typeof handler !== \"function\") {\n        return Promise.reject(\n          new Error(\n            `You cannot call the handler for a route which defines a boolean ` +\n              `\"${type}\" [routeId: ${match.route.id}]`\n          )\n        );\n      }\n      return handler(\n        {\n          request,\n          params: match.params,\n          context: staticContext,\n        },\n        ...(ctx !== undefined ? [ctx] : [])\n      );\n    };\n\n    let handlerPromise: Promise<DataStrategyResult> = (async () => {\n      try {\n        let val = await (handlerOverride\n          ? handlerOverride((ctx: unknown) => actualHandler(ctx))\n          : actualHandler());\n        return { type: \"data\", result: val };\n      } catch (e) {\n        return { type: \"error\", result: e };\n      }\n    })();\n\n    return Promise.race([handlerPromise, abortPromise]);\n  };\n\n  try {\n    let handler = match.route[type];\n\n    // If we have a route.lazy promise, await that first\n    if (loadRoutePromise) {\n      if (handler) {\n        // Run statically defined handler in parallel with lazy()\n        let handlerError;\n        let [value] = await Promise.all([\n          // If the handler throws, don't let it immediately bubble out,\n          // since we need to let the lazy() execution finish so we know if this\n          // route has a boundary that can handle the error\n          runHandler(handler).catch((e) => {\n            handlerError = e;\n          }),\n          loadRoutePromise,\n        ]);\n        if (handlerError !== undefined) {\n          throw handlerError;\n        }\n        result = value!;\n      } else {\n        // Load lazy route module, then run any returned handler\n        await loadRoutePromise;\n\n        handler = match.route[type];\n        if (handler) {\n          // Handler still runs even if we got interrupted to maintain consistency\n          // with un-abortable behavior of handler execution on non-lazy or\n          // previously-lazy-loaded routes\n          result = await runHandler(handler);\n        } else if (type === \"action\") {\n          let url = new URL(request.url);\n          let pathname = url.pathname + url.search;\n          throw getInternalRouterError(405, {\n            method: request.method,\n            pathname,\n            routeId: match.route.id,\n          });\n        } else {\n          // lazy() route has no loader to run.  Short circuit here so we don't\n          // hit the invariant below that errors on returning undefined.\n          return { type: ResultType.data, result: undefined };\n        }\n      }\n    } else if (!handler) {\n      let url = new URL(request.url);\n      let pathname = url.pathname + url.search;\n      throw getInternalRouterError(404, {\n        pathname,\n      });\n    } else {\n      result = await runHandler(handler);\n    }\n\n    invariant(\n      result.result !== undefined,\n      `You defined ${type === \"action\" ? \"an action\" : \"a loader\"} for route ` +\n        `\"${match.route.id}\" but didn't return anything from your \\`${type}\\` ` +\n        `function. Please return a value or \\`null\\`.`\n    );\n  } catch (e) {\n    // We should already be catching and converting normal handler executions to\n    // DataStrategyResults and returning them, so anything that throws here is an\n    // unexpected error we still need to wrap\n    return { type: ResultType.error, result: e };\n  } finally {\n    if (onReject) {\n      request.signal.removeEventListener(\"abort\", onReject);\n    }\n  }\n\n  return result;\n}\n\nasync function convertDataStrategyResultToDataResult(\n  dataStrategyResult: DataStrategyResult\n): Promise<DataResult> {\n  let { result, type } = dataStrategyResult;\n\n  if (isResponse(result)) {\n    let data: any;\n\n    try {\n      let contentType = result.headers.get(\"Content-Type\");\n      // Check between word boundaries instead of startsWith() due to the last\n      // paragraph of https://httpwg.org/specs/rfc9110.html#field.content-type\n      if (contentType && /\\bapplication\\/json\\b/.test(contentType)) {\n        if (result.body == null) {\n          data = null;\n        } else {\n          data = await result.json();\n        }\n      } else {\n        data = await result.text();\n      }\n    } catch (e) {\n      return { type: ResultType.error, error: e };\n    }\n\n    if (type === ResultType.error) {\n      return {\n        type: ResultType.error,\n        error: new ErrorResponseImpl(result.status, result.statusText, data),\n        statusCode: result.status,\n        headers: result.headers,\n      };\n    }\n\n    return {\n      type: ResultType.data,\n      data,\n      statusCode: result.status,\n      headers: result.headers,\n    };\n  }\n\n  if (type === ResultType.error) {\n    if (isDataWithResponseInit(result)) {\n      if (result.data instanceof Error) {\n        return {\n          type: ResultType.error,\n          error: result.data,\n          statusCode: result.init?.status,\n        };\n      }\n\n      // Convert thrown unstable_data() to ErrorResponse instances\n      result = new ErrorResponseImpl(\n        result.init?.status || 500,\n        undefined,\n        result.data\n      );\n    }\n    return {\n      type: ResultType.error,\n      error: result,\n      statusCode: isRouteErrorResponse(result) ? result.status : undefined,\n    };\n  }\n\n  if (isDeferredData(result)) {\n    return {\n      type: ResultType.deferred,\n      deferredData: result,\n      statusCode: result.init?.status,\n      headers: result.init?.headers && new Headers(result.init.headers),\n    };\n  }\n\n  if (isDataWithResponseInit(result)) {\n    return {\n      type: ResultType.data,\n      data: result.data,\n      statusCode: result.init?.status,\n      headers: result.init?.headers\n        ? new Headers(result.init.headers)\n        : undefined,\n    };\n  }\n\n  return { type: ResultType.data, data: result };\n}\n\n// Support relative routing in internal redirects\nfunction normalizeRelativeRoutingRedirectResponse(\n  response: Response,\n  request: Request,\n  routeId: string,\n  matches: AgnosticDataRouteMatch[],\n  basename: string,\n  v7_relativeSplatPath: boolean\n) {\n  let location = response.headers.get(\"Location\");\n  invariant(\n    location,\n    \"Redirects returned/thrown from loaders/actions must have a Location header\"\n  );\n\n  if (!ABSOLUTE_URL_REGEX.test(location)) {\n    let trimmedMatches = matches.slice(\n      0,\n      matches.findIndex((m) => m.route.id === routeId) + 1\n    );\n    location = normalizeTo(\n      new URL(request.url),\n      trimmedMatches,\n      basename,\n      true,\n      location,\n      v7_relativeSplatPath\n    );\n    response.headers.set(\"Location\", location);\n  }\n\n  return response;\n}\n\nfunction normalizeRedirectLocation(\n  location: string,\n  currentUrl: URL,\n  basename: string\n): string {\n  if (ABSOLUTE_URL_REGEX.test(location)) {\n    // Strip off the protocol+origin for same-origin + same-basename absolute redirects\n    let normalizedLocation = location;\n    let url = normalizedLocation.startsWith(\"//\")\n      ? new URL(currentUrl.protocol + normalizedLocation)\n      : new URL(normalizedLocation);\n    let isSameBasename = stripBasename(url.pathname, basename) != null;\n    if (url.origin === currentUrl.origin && isSameBasename) {\n      return url.pathname + url.search + url.hash;\n    }\n  }\n  return location;\n}\n\n// Utility method for creating the Request instances for loaders/actions during\n// client-side navigations and fetches.  During SSR we will always have a\n// Request instance from the static handler (query/queryRoute)\nfunction createClientSideRequest(\n  history: History,\n  location: string | Location,\n  signal: AbortSignal,\n  submission?: Submission\n): Request {\n  let url = history.createURL(stripHashFromPath(location)).toString();\n  let init: RequestInit = { signal };\n\n  if (submission && isMutationMethod(submission.formMethod)) {\n    let { formMethod, formEncType } = submission;\n    // Didn't think we needed this but it turns out unlike other methods, patch\n    // won't be properly normalized to uppercase and results in a 405 error.\n    // See: https://fetch.spec.whatwg.org/#concept-method\n    init.method = formMethod.toUpperCase();\n\n    if (formEncType === \"application/json\") {\n      init.headers = new Headers({ \"Content-Type\": formEncType });\n      init.body = JSON.stringify(submission.json);\n    } else if (formEncType === \"text/plain\") {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = submission.text;\n    } else if (\n      formEncType === \"application/x-www-form-urlencoded\" &&\n      submission.formData\n    ) {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = convertFormDataToSearchParams(submission.formData);\n    } else {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = submission.formData;\n    }\n  }\n\n  return new Request(url, init);\n}\n\nfunction convertFormDataToSearchParams(formData: FormData): URLSearchParams {\n  let searchParams = new URLSearchParams();\n\n  for (let [key, value] of formData.entries()) {\n    // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#converting-an-entry-list-to-a-list-of-name-value-pairs\n    searchParams.append(key, typeof value === \"string\" ? value : value.name);\n  }\n\n  return searchParams;\n}\n\nfunction convertSearchParamsToFormData(\n  searchParams: URLSearchParams\n): FormData {\n  let formData = new FormData();\n  for (let [key, value] of searchParams.entries()) {\n    formData.append(key, value);\n  }\n  return formData;\n}\n\nfunction processRouteLoaderData(\n  matches: AgnosticDataRouteMatch[],\n  results: Record<string, DataResult>,\n  pendingActionResult: PendingActionResult | undefined,\n  activeDeferreds: Map<string, DeferredData>,\n  skipLoaderErrorBubbling: boolean\n): {\n  loaderData: RouterState[\"loaderData\"];\n  errors: RouterState[\"errors\"] | null;\n  statusCode: number;\n  loaderHeaders: Record<string, Headers>;\n} {\n  // Fill in loaderData/errors from our loaders\n  let loaderData: RouterState[\"loaderData\"] = {};\n  let errors: RouterState[\"errors\"] | null = null;\n  let statusCode: number | undefined;\n  let foundError = false;\n  let loaderHeaders: Record<string, Headers> = {};\n  let pendingError =\n    pendingActionResult && isErrorResult(pendingActionResult[1])\n      ? pendingActionResult[1].error\n      : undefined;\n\n  // Process loader results into state.loaderData/state.errors\n  matches.forEach((match) => {\n    if (!(match.route.id in results)) {\n      return;\n    }\n    let id = match.route.id;\n    let result = results[id];\n    invariant(\n      !isRedirectResult(result),\n      \"Cannot handle redirect results in processLoaderData\"\n    );\n    if (isErrorResult(result)) {\n      let error = result.error;\n      // If we have a pending action error, we report it at the highest-route\n      // that throws a loader error, and then clear it out to indicate that\n      // it was consumed\n      if (pendingError !== undefined) {\n        error = pendingError;\n        pendingError = undefined;\n      }\n\n      errors = errors || {};\n\n      if (skipLoaderErrorBubbling) {\n        errors[id] = error;\n      } else {\n        // Look upwards from the matched route for the closest ancestor error\n        // boundary, defaulting to the root match.  Prefer higher error values\n        // if lower errors bubble to the same boundary\n        let boundaryMatch = findNearestBoundary(matches, id);\n        if (errors[boundaryMatch.route.id] == null) {\n          errors[boundaryMatch.route.id] = error;\n        }\n      }\n\n      // Clear our any prior loaderData for the throwing route\n      loaderData[id] = undefined;\n\n      // Once we find our first (highest) error, we set the status code and\n      // prevent deeper status codes from overriding\n      if (!foundError) {\n        foundError = true;\n        statusCode = isRouteErrorResponse(result.error)\n          ? result.error.status\n          : 500;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    } else {\n      if (isDeferredResult(result)) {\n        activeDeferreds.set(id, result.deferredData);\n        loaderData[id] = result.deferredData.data;\n        // Error status codes always override success status codes, but if all\n        // loaders are successful we take the deepest status code.\n        if (\n          result.statusCode != null &&\n          result.statusCode !== 200 &&\n          !foundError\n        ) {\n          statusCode = result.statusCode;\n        }\n        if (result.headers) {\n          loaderHeaders[id] = result.headers;\n        }\n      } else {\n        loaderData[id] = result.data;\n        // Error status codes always override success status codes, but if all\n        // loaders are successful we take the deepest status code.\n        if (result.statusCode && result.statusCode !== 200 && !foundError) {\n          statusCode = result.statusCode;\n        }\n        if (result.headers) {\n          loaderHeaders[id] = result.headers;\n        }\n      }\n    }\n  });\n\n  // If we didn't consume the pending action error (i.e., all loaders\n  // resolved), then consume it here.  Also clear out any loaderData for the\n  // throwing route\n  if (pendingError !== undefined && pendingActionResult) {\n    errors = { [pendingActionResult[0]]: pendingError };\n    loaderData[pendingActionResult[0]] = undefined;\n  }\n\n  return {\n    loaderData,\n    errors,\n    statusCode: statusCode || 200,\n    loaderHeaders,\n  };\n}\n\nfunction processLoaderData(\n  state: RouterState,\n  matches: AgnosticDataRouteMatch[],\n  matchesToLoad: AgnosticDataRouteMatch[],\n  results: Record<string, DataResult>,\n  pendingActionResult: PendingActionResult | undefined,\n  revalidatingFetchers: RevalidatingFetcher[],\n  fetcherResults: Record<string, DataResult>,\n  activeDeferreds: Map<string, DeferredData>\n): {\n  loaderData: RouterState[\"loaderData\"];\n  errors?: RouterState[\"errors\"];\n} {\n  let { loaderData, errors } = processRouteLoaderData(\n    matches,\n    results,\n    pendingActionResult,\n    activeDeferreds,\n    false // This method is only called client side so we always want to bubble\n  );\n\n  // Process results from our revalidating fetchers\n  revalidatingFetchers.forEach((rf) => {\n    let { key, match, controller } = rf;\n    let result = fetcherResults[key];\n    invariant(result, \"Did not find corresponding fetcher result\");\n\n    // Process fetcher non-redirect errors\n    if (controller && controller.signal.aborted) {\n      // Nothing to do for aborted fetchers\n      return;\n    } else if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, match?.route.id);\n      if (!(errors && errors[boundaryMatch.route.id])) {\n        errors = {\n          ...errors,\n          [boundaryMatch.route.id]: result.error,\n        };\n      }\n      state.fetchers.delete(key);\n    } else if (isRedirectResult(result)) {\n      // Should never get here, redirects should get processed above, but we\n      // keep this to type narrow to a success result in the else\n      invariant(false, \"Unhandled fetcher revalidation redirect\");\n    } else if (isDeferredResult(result)) {\n      // Should never get here, deferred data should be awaited for fetchers\n      // in resolveDeferredResults\n      invariant(false, \"Unhandled fetcher deferred data\");\n    } else {\n      let doneFetcher = getDoneFetcher(result.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n  });\n\n  return { loaderData, errors };\n}\n\nfunction mergeLoaderData(\n  loaderData: RouteData,\n  newLoaderData: RouteData,\n  matches: AgnosticDataRouteMatch[],\n  errors: RouteData | null | undefined\n): RouteData {\n  let mergedLoaderData = { ...newLoaderData };\n  for (let match of matches) {\n    let id = match.route.id;\n    if (newLoaderData.hasOwnProperty(id)) {\n      if (newLoaderData[id] !== undefined) {\n        mergedLoaderData[id] = newLoaderData[id];\n      } else {\n        // No-op - this is so we ignore existing data if we have a key in the\n        // incoming object with an undefined value, which is how we unset a prior\n        // loaderData if we encounter a loader error\n      }\n    } else if (loaderData[id] !== undefined && match.route.loader) {\n      // Preserve existing keys not included in newLoaderData and where a loader\n      // wasn't removed by HMR\n      mergedLoaderData[id] = loaderData[id];\n    }\n\n    if (errors && errors.hasOwnProperty(id)) {\n      // Don't keep any loader data below the boundary\n      break;\n    }\n  }\n  return mergedLoaderData;\n}\n\nfunction getActionDataForCommit(\n  pendingActionResult: PendingActionResult | undefined\n) {\n  if (!pendingActionResult) {\n    return {};\n  }\n  return isErrorResult(pendingActionResult[1])\n    ? {\n        // Clear out prior actionData on errors\n        actionData: {},\n      }\n    : {\n        actionData: {\n          [pendingActionResult[0]]: pendingActionResult[1].data,\n        },\n      };\n}\n\n// Find the nearest error boundary, looking upwards from the leaf route (or the\n// route specified by routeId) for the closest ancestor error boundary,\n// defaulting to the root match\nfunction findNearestBoundary(\n  matches: AgnosticDataRouteMatch[],\n  routeId?: string\n): AgnosticDataRouteMatch {\n  let eligibleMatches = routeId\n    ? matches.slice(0, matches.findIndex((m) => m.route.id === routeId) + 1)\n    : [...matches];\n  return (\n    eligibleMatches.reverse().find((m) => m.route.hasErrorBoundary === true) ||\n    matches[0]\n  );\n}\n\nfunction getShortCircuitMatches(routes: AgnosticDataRouteObject[]): {\n  matches: AgnosticDataRouteMatch[];\n  route: AgnosticDataRouteObject;\n} {\n  // Prefer a root layout route if present, otherwise shim in a route object\n  let route =\n    routes.length === 1\n      ? routes[0]\n      : routes.find((r) => r.index || !r.path || r.path === \"/\") || {\n          id: `__shim-error-route__`,\n        };\n\n  return {\n    matches: [\n      {\n        params: {},\n        pathname: \"\",\n        pathnameBase: \"\",\n        route,\n      },\n    ],\n    route,\n  };\n}\n\nfunction getInternalRouterError(\n  status: number,\n  {\n    pathname,\n    routeId,\n    method,\n    type,\n    message,\n  }: {\n    pathname?: string;\n    routeId?: string;\n    method?: string;\n    type?: \"defer-action\" | \"invalid-body\" | \"route-discovery\";\n    message?: string;\n  } = {}\n) {\n  let statusText = \"Unknown Server Error\";\n  let errorMessage = \"Unknown @remix-run/router error\";\n\n  if (status === 400) {\n    statusText = \"Bad Request\";\n    if (type === \"route-discovery\") {\n      errorMessage =\n        `Unable to match URL \"${pathname}\" - the \\`unstable_patchRoutesOnNavigation()\\` ` +\n        `function threw the following error:\\n${message}`;\n    } else if (method && pathname && routeId) {\n      errorMessage =\n        `You made a ${method} request to \"${pathname}\" but ` +\n        `did not provide a \\`loader\\` for route \"${routeId}\", ` +\n        `so there is no way to handle the request.`;\n    } else if (type === \"defer-action\") {\n      errorMessage = \"defer() is not supported in actions\";\n    } else if (type === \"invalid-body\") {\n      errorMessage = \"Unable to encode submission body\";\n    }\n  } else if (status === 403) {\n    statusText = \"Forbidden\";\n    errorMessage = `Route \"${routeId}\" does not match URL \"${pathname}\"`;\n  } else if (status === 404) {\n    statusText = \"Not Found\";\n    errorMessage = `No route matches URL \"${pathname}\"`;\n  } else if (status === 405) {\n    statusText = \"Method Not Allowed\";\n    if (method && pathname && routeId) {\n      errorMessage =\n        `You made a ${method.toUpperCase()} request to \"${pathname}\" but ` +\n        `did not provide an \\`action\\` for route \"${routeId}\", ` +\n        `so there is no way to handle the request.`;\n    } else if (method) {\n      errorMessage = `Invalid request method \"${method.toUpperCase()}\"`;\n    }\n  }\n\n  return new ErrorResponseImpl(\n    status || 500,\n    statusText,\n    new Error(errorMessage),\n    true\n  );\n}\n\n// Find any returned redirect errors, starting from the lowest match\nfunction findRedirect(\n  results: Record<string, DataResult>\n): { key: string; result: RedirectResult } | undefined {\n  let entries = Object.entries(results);\n  for (let i = entries.length - 1; i >= 0; i--) {\n    let [key, result] = entries[i];\n    if (isRedirectResult(result)) {\n      return { key, result };\n    }\n  }\n}\n\nfunction stripHashFromPath(path: To) {\n  let parsedPath = typeof path === \"string\" ? parsePath(path) : path;\n  return createPath({ ...parsedPath, hash: \"\" });\n}\n\nfunction isHashChangeOnly(a: Location, b: Location): boolean {\n  if (a.pathname !== b.pathname || a.search !== b.search) {\n    return false;\n  }\n\n  if (a.hash === \"\") {\n    // /page -> /page#hash\n    return b.hash !== \"\";\n  } else if (a.hash === b.hash) {\n    // /page#hash -> /page#hash\n    return true;\n  } else if (b.hash !== \"\") {\n    // /page#hash -> /page#other\n    return true;\n  }\n\n  // If the hash is removed the browser will re-perform a request to the server\n  // /page#hash -> /page\n  return false;\n}\n\nfunction isPromise<T = unknown>(val: unknown): val is Promise<T> {\n  return typeof val === \"object\" && val != null && \"then\" in val;\n}\n\nfunction isDataStrategyResult(result: unknown): result is DataStrategyResult {\n  return (\n    result != null &&\n    typeof result === \"object\" &&\n    \"type\" in result &&\n    \"result\" in result &&\n    (result.type === ResultType.data || result.type === ResultType.error)\n  );\n}\n\nfunction isRedirectDataStrategyResultResult(result: DataStrategyResult) {\n  return (\n    isResponse(result.result) && redirectStatusCodes.has(result.result.status)\n  );\n}\n\nfunction isDeferredResult(result: DataResult): result is DeferredResult {\n  return result.type === ResultType.deferred;\n}\n\nfunction isErrorResult(result: DataResult): result is ErrorResult {\n  return result.type === ResultType.error;\n}\n\nfunction isRedirectResult(result?: DataResult): result is RedirectResult {\n  return (result && result.type) === ResultType.redirect;\n}\n\nexport function isDataWithResponseInit(\n  value: any\n): value is DataWithResponseInit<unknown> {\n  return (\n    typeof value === \"object\" &&\n    value != null &&\n    \"type\" in value &&\n    \"data\" in value &&\n    \"init\" in value &&\n    value.type === \"DataWithResponseInit\"\n  );\n}\n\nexport function isDeferredData(value: any): value is DeferredData {\n  let deferred: DeferredData = value;\n  return (\n    deferred &&\n    typeof deferred === \"object\" &&\n    typeof deferred.data === \"object\" &&\n    typeof deferred.subscribe === \"function\" &&\n    typeof deferred.cancel === \"function\" &&\n    typeof deferred.resolveData === \"function\"\n  );\n}\n\nfunction isResponse(value: any): value is Response {\n  return (\n    value != null &&\n    typeof value.status === \"number\" &&\n    typeof value.statusText === \"string\" &&\n    typeof value.headers === \"object\" &&\n    typeof value.body !== \"undefined\"\n  );\n}\n\nfunction isRedirectResponse(result: any): result is Response {\n  if (!isResponse(result)) {\n    return false;\n  }\n\n  let status = result.status;\n  let location = result.headers.get(\"Location\");\n  return status >= 300 && status <= 399 && location != null;\n}\n\nfunction isValidMethod(method: string): method is FormMethod | V7_FormMethod {\n  return validRequestMethods.has(method.toLowerCase() as FormMethod);\n}\n\nfunction isMutationMethod(\n  method: string\n): method is MutationFormMethod | V7_MutationFormMethod {\n  return validMutationMethods.has(method.toLowerCase() as MutationFormMethod);\n}\n\nasync function resolveNavigationDeferredResults(\n  matches: (AgnosticDataRouteMatch | null)[],\n  results: Record<string, DataResult>,\n  signal: AbortSignal,\n  currentMatches: AgnosticDataRouteMatch[],\n  currentLoaderData: RouteData\n) {\n  let entries = Object.entries(results);\n  for (let index = 0; index < entries.length; index++) {\n    let [routeId, result] = entries[index];\n    let match = matches.find((m) => m?.route.id === routeId);\n    // If we don't have a match, then we can have a deferred result to do\n    // anything with.  This is for revalidating fetchers where the route was\n    // removed during HMR\n    if (!match) {\n      continue;\n    }\n\n    let currentMatch = currentMatches.find(\n      (m) => m.route.id === match!.route.id\n    );\n    let isRevalidatingLoader =\n      currentMatch != null &&\n      !isNewRouteInstance(currentMatch, match) &&\n      (currentLoaderData && currentLoaderData[match.route.id]) !== undefined;\n\n    if (isDeferredResult(result) && isRevalidatingLoader) {\n      // Note: we do not have to touch activeDeferreds here since we race them\n      // against the signal in resolveDeferredData and they'll get aborted\n      // there if needed\n      await resolveDeferredData(result, signal, false).then((result) => {\n        if (result) {\n          results[routeId] = result;\n        }\n      });\n    }\n  }\n}\n\nasync function resolveFetcherDeferredResults(\n  matches: (AgnosticDataRouteMatch | null)[],\n  results: Record<string, DataResult>,\n  revalidatingFetchers: RevalidatingFetcher[]\n) {\n  for (let index = 0; index < revalidatingFetchers.length; index++) {\n    let { key, routeId, controller } = revalidatingFetchers[index];\n    let result = results[key];\n    let match = matches.find((m) => m?.route.id === routeId);\n    // If we don't have a match, then we can have a deferred result to do\n    // anything with.  This is for revalidating fetchers where the route was\n    // removed during HMR\n    if (!match) {\n      continue;\n    }\n\n    if (isDeferredResult(result)) {\n      // Note: we do not have to touch activeDeferreds here since we race them\n      // against the signal in resolveDeferredData and they'll get aborted\n      // there if needed\n      invariant(\n        controller,\n        \"Expected an AbortController for revalidating fetcher deferred result\"\n      );\n      await resolveDeferredData(result, controller.signal, true).then(\n        (result) => {\n          if (result) {\n            results[key] = result;\n          }\n        }\n      );\n    }\n  }\n}\n\nasync function resolveDeferredData(\n  result: DeferredResult,\n  signal: AbortSignal,\n  unwrap = false\n): Promise<SuccessResult | ErrorResult | undefined> {\n  let aborted = await result.deferredData.resolveData(signal);\n  if (aborted) {\n    return;\n  }\n\n  if (unwrap) {\n    try {\n      return {\n        type: ResultType.data,\n        data: result.deferredData.unwrappedData,\n      };\n    } catch (e) {\n      // Handle any TrackedPromise._error values encountered while unwrapping\n      return {\n        type: ResultType.error,\n        error: e,\n      };\n    }\n  }\n\n  return {\n    type: ResultType.data,\n    data: result.deferredData.data,\n  };\n}\n\nfunction hasNakedIndexQuery(search: string): boolean {\n  return new URLSearchParams(search).getAll(\"index\").some((v) => v === \"\");\n}\n\nfunction getTargetMatch(\n  matches: AgnosticDataRouteMatch[],\n  location: Location | string\n) {\n  let search =\n    typeof location === \"string\" ? parsePath(location).search : location.search;\n  if (\n    matches[matches.length - 1].route.index &&\n    hasNakedIndexQuery(search || \"\")\n  ) {\n    // Return the leaf index route when index is present\n    return matches[matches.length - 1];\n  }\n  // Otherwise grab the deepest \"path contributing\" match (ignoring index and\n  // pathless layout routes)\n  let pathMatches = getPathContributingMatches(matches);\n  return pathMatches[pathMatches.length - 1];\n}\n\nfunction getSubmissionFromNavigation(\n  navigation: Navigation\n): Submission | undefined {\n  let { formMethod, formAction, formEncType, text, formData, json } =\n    navigation;\n  if (!formMethod || !formAction || !formEncType) {\n    return;\n  }\n\n  if (text != null) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData: undefined,\n      json: undefined,\n      text,\n    };\n  } else if (formData != null) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData,\n      json: undefined,\n      text: undefined,\n    };\n  } else if (json !== undefined) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData: undefined,\n      json,\n      text: undefined,\n    };\n  }\n}\n\nfunction getLoadingNavigation(\n  location: Location,\n  submission?: Submission\n): NavigationStates[\"Loading\"] {\n  if (submission) {\n    let navigation: NavigationStates[\"Loading\"] = {\n      state: \"loading\",\n      location,\n      formMethod: submission.formMethod,\n      formAction: submission.formAction,\n      formEncType: submission.formEncType,\n      formData: submission.formData,\n      json: submission.json,\n      text: submission.text,\n    };\n    return navigation;\n  } else {\n    let navigation: NavigationStates[\"Loading\"] = {\n      state: \"loading\",\n      location,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      json: undefined,\n      text: undefined,\n    };\n    return navigation;\n  }\n}\n\nfunction getSubmittingNavigation(\n  location: Location,\n  submission: Submission\n): NavigationStates[\"Submitting\"] {\n  let navigation: NavigationStates[\"Submitting\"] = {\n    state: \"submitting\",\n    location,\n    formMethod: submission.formMethod,\n    formAction: submission.formAction,\n    formEncType: submission.formEncType,\n    formData: submission.formData,\n    json: submission.json,\n    text: submission.text,\n  };\n  return navigation;\n}\n\nfunction getLoadingFetcher(\n  submission?: Submission,\n  data?: Fetcher[\"data\"]\n): FetcherStates[\"Loading\"] {\n  if (submission) {\n    let fetcher: FetcherStates[\"Loading\"] = {\n      state: \"loading\",\n      formMethod: submission.formMethod,\n      formAction: submission.formAction,\n      formEncType: submission.formEncType,\n      formData: submission.formData,\n      json: submission.json,\n      text: submission.text,\n      data,\n    };\n    return fetcher;\n  } else {\n    let fetcher: FetcherStates[\"Loading\"] = {\n      state: \"loading\",\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      json: undefined,\n      text: undefined,\n      data,\n    };\n    return fetcher;\n  }\n}\n\nfunction getSubmittingFetcher(\n  submission: Submission,\n  existingFetcher?: Fetcher\n): FetcherStates[\"Submitting\"] {\n  let fetcher: FetcherStates[\"Submitting\"] = {\n    state: \"submitting\",\n    formMethod: submission.formMethod,\n    formAction: submission.formAction,\n    formEncType: submission.formEncType,\n    formData: submission.formData,\n    json: submission.json,\n    text: submission.text,\n    data: existingFetcher ? existingFetcher.data : undefined,\n  };\n  return fetcher;\n}\n\nfunction getDoneFetcher(data: Fetcher[\"data\"]): FetcherStates[\"Idle\"] {\n  let fetcher: FetcherStates[\"Idle\"] = {\n    state: \"idle\",\n    formMethod: undefined,\n    formAction: undefined,\n    formEncType: undefined,\n    formData: undefined,\n    json: undefined,\n    text: undefined,\n    data,\n  };\n  return fetcher;\n}\n\nfunction restoreAppliedTransitions(\n  _window: Window,\n  transitions: Map<string, Set<string>>\n) {\n  try {\n    let sessionPositions = _window.sessionStorage.getItem(\n      TRANSITIONS_STORAGE_KEY\n    );\n    if (sessionPositions) {\n      let json = JSON.parse(sessionPositions);\n      for (let [k, v] of Object.entries(json || {})) {\n        if (v && Array.isArray(v)) {\n          transitions.set(k, new Set(v || []));\n        }\n      }\n    }\n  } catch (e) {\n    // no-op, use default empty object\n  }\n}\n\nfunction persistAppliedTransitions(\n  _window: Window,\n  transitions: Map<string, Set<string>>\n) {\n  if (transitions.size > 0) {\n    let json: Record<string, string[]> = {};\n    for (let [k, v] of transitions) {\n      json[k] = [...v];\n    }\n    try {\n      _window.sessionStorage.setItem(\n        TRANSITIONS_STORAGE_KEY,\n        JSON.stringify(json)\n      );\n    } catch (error) {\n      warning(\n        false,\n        `Failed to save applied view transitions in sessionStorage (${error}).`\n      );\n    }\n  }\n}\n//#endregion\n"]},"metadata":{},"sourceType":"module"}